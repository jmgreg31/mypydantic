# Model Generated: Thu Mar  2 21:56:18 2023

from __future__ import annotations

from datetime import datetime
from typing import Any, Dict, IO, List, Literal, Optional, Sequence, Type, Union

from botocore.response import StreamingBody
from pydantic import Field

from mypydantic.models.base_model import BaseModel


class AcceleratorCountRequestModel(BaseModel):
    min: Optional[int] = Field(default=None, alias="Min")
    max: Optional[int] = Field(default=None, alias="Max")


class AcceleratorCountModel(BaseModel):
    min: Optional[int] = Field(default=None, alias="Min")
    max: Optional[int] = Field(default=None, alias="Max")


class AcceleratorTotalMemoryMiBRequestModel(BaseModel):
    min: Optional[int] = Field(default=None, alias="Min")
    max: Optional[int] = Field(default=None, alias="Max")


class AcceleratorTotalMemoryMiBModel(BaseModel):
    min: Optional[int] = Field(default=None, alias="Min")
    max: Optional[int] = Field(default=None, alias="Max")


class AddressTransferModel(BaseModel):
    public_ip: Optional[str] = Field(default=None, alias="PublicIp")
    allocation_id: Optional[str] = Field(default=None, alias="AllocationId")
    transfer_account_id: Optional[str] = Field(default=None, alias="TransferAccountId")
    transfer_offer_expiration_timestamp: Optional[datetime] = Field(
        default=None, alias="TransferOfferExpirationTimestamp"
    )
    transfer_offer_accepted_timestamp: Optional[datetime] = Field(
        default=None, alias="TransferOfferAcceptedTimestamp"
    )
    address_transfer_status: Optional[
        Literal["accepted", "disabled", "pending"]
    ] = Field(default=None, alias="AddressTransferStatus")


class ResponseMetadataModel(BaseModel):
    request_id: str = Field(alias="RequestId")
    host_id: str = Field(alias="HostId")
    http_status_code: int = Field(alias="HTTPStatusCode")
    http_headers: Dict[str, str] = Field(alias="HTTPHeaders")
    retry_attempts: int = Field(alias="RetryAttempts")


class TargetConfigurationRequestModel(BaseModel):
    offering_id: str = Field(alias="OfferingId")
    instance_count: Optional[int] = Field(default=None, alias="InstanceCount")


class AcceptTransitGatewayMulticastDomainAssociationsRequestModel(BaseModel):
    transit_gateway_multicast_domain_id: Optional[str] = Field(
        default=None, alias="TransitGatewayMulticastDomainId"
    )
    transit_gateway_attachment_id: Optional[str] = Field(
        default=None, alias="TransitGatewayAttachmentId"
    )
    subnet_ids: Optional[Sequence[str]] = Field(default=None, alias="SubnetIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class AcceptTransitGatewayPeeringAttachmentRequestModel(BaseModel):
    transit_gateway_attachment_id: str = Field(alias="TransitGatewayAttachmentId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class AcceptTransitGatewayVpcAttachmentRequestModel(BaseModel):
    transit_gateway_attachment_id: str = Field(alias="TransitGatewayAttachmentId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class AcceptVpcEndpointConnectionsRequestModel(BaseModel):
    service_id: str = Field(alias="ServiceId")
    vpc_endpoint_ids: Sequence[str] = Field(alias="VpcEndpointIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class AcceptVpcPeeringConnectionRequestModel(BaseModel):
    vpc_peering_connection_id: str = Field(alias="VpcPeeringConnectionId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class AcceptVpcPeeringConnectionRequestVpcPeeringConnectionAcceptModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class AccountAttributeValueModel(BaseModel):
    attribute_value: Optional[str] = Field(default=None, alias="AttributeValue")


class ActiveInstanceModel(BaseModel):
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    instance_type: Optional[str] = Field(default=None, alias="InstanceType")
    spot_instance_request_id: Optional[str] = Field(
        default=None, alias="SpotInstanceRequestId"
    )
    instance_health: Optional[Literal["healthy", "unhealthy"]] = Field(
        default=None, alias="InstanceHealth"
    )


class AddIpamOperatingRegionModel(BaseModel):
    region_name: Optional[str] = Field(default=None, alias="RegionName")


class AddPrefixListEntryModel(BaseModel):
    cidr: str = Field(alias="Cidr")
    description: Optional[str] = Field(default=None, alias="Description")


class AddedPrincipalModel(BaseModel):
    principal_type: Optional[
        Literal["Account", "All", "OrganizationUnit", "Role", "Service", "User"]
    ] = Field(default=None, alias="PrincipalType")
    principal: Optional[str] = Field(default=None, alias="Principal")
    service_permission_id: Optional[str] = Field(
        default=None, alias="ServicePermissionId"
    )
    service_id: Optional[str] = Field(default=None, alias="ServiceId")


class AnalysisComponentModel(BaseModel):
    id: Optional[str] = Field(default=None, alias="Id")
    arn: Optional[str] = Field(default=None, alias="Arn")
    name: Optional[str] = Field(default=None, alias="Name")


class PtrUpdateStatusModel(BaseModel):
    value: Optional[str] = Field(default=None, alias="Value")
    status: Optional[str] = Field(default=None, alias="Status")
    reason: Optional[str] = Field(default=None, alias="Reason")


class TagModel(BaseModel):
    key: Optional[str] = Field(default=None, alias="Key")
    value: Optional[str] = Field(default=None, alias="Value")


class AdvertiseByoipCidrRequestModel(BaseModel):
    cidr: str = Field(alias="Cidr")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ByoipCidrModel(BaseModel):
    cidr: Optional[str] = Field(default=None, alias="Cidr")
    description: Optional[str] = Field(default=None, alias="Description")
    status_message: Optional[str] = Field(default=None, alias="StatusMessage")
    state: Optional[
        Literal[
            "advertised",
            "deprovisioned",
            "failed-deprovision",
            "failed-provision",
            "pending-deprovision",
            "pending-provision",
            "provisioned",
            "provisioned-not-publicly-advertisable",
        ]
    ] = Field(default=None, alias="State")


class AllocateIpamPoolCidrRequestModel(BaseModel):
    ipam_pool_id: str = Field(alias="IpamPoolId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    cidr: Optional[str] = Field(default=None, alias="Cidr")
    netmask_length: Optional[int] = Field(default=None, alias="NetmaskLength")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    description: Optional[str] = Field(default=None, alias="Description")
    preview_next_cidr: Optional[bool] = Field(default=None, alias="PreviewNextCidr")
    disallowed_cidrs: Optional[Sequence[str]] = Field(
        default=None, alias="DisallowedCidrs"
    )


class IpamPoolAllocationModel(BaseModel):
    cidr: Optional[str] = Field(default=None, alias="Cidr")
    ipam_pool_allocation_id: Optional[str] = Field(
        default=None, alias="IpamPoolAllocationId"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    resource_id: Optional[str] = Field(default=None, alias="ResourceId")
    resource_type: Optional[
        Literal["custom", "ec2-public-ipv4-pool", "ipam-pool", "vpc"]
    ] = Field(default=None, alias="ResourceType")
    resource_region: Optional[str] = Field(default=None, alias="ResourceRegion")
    resource_owner: Optional[str] = Field(default=None, alias="ResourceOwner")


class AlternatePathHintModel(BaseModel):
    component_id: Optional[str] = Field(default=None, alias="ComponentId")
    component_arn: Optional[str] = Field(default=None, alias="ComponentArn")


class PortRangeModel(BaseModel):
    from_: Optional[int] = Field(default=None, alias="From")
    to: Optional[int] = Field(default=None, alias="To")


class AnalysisLoadBalancerListenerModel(BaseModel):
    load_balancer_port: Optional[int] = Field(default=None, alias="LoadBalancerPort")
    instance_port: Optional[int] = Field(default=None, alias="InstancePort")


class AnalysisRouteTableRouteModel(BaseModel):
    destination_cidr: Optional[str] = Field(default=None, alias="DestinationCidr")
    destination_prefix_list_id: Optional[str] = Field(
        default=None, alias="DestinationPrefixListId"
    )
    egress_only_internet_gateway_id: Optional[str] = Field(
        default=None, alias="EgressOnlyInternetGatewayId"
    )
    gateway_id: Optional[str] = Field(default=None, alias="GatewayId")
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    nat_gateway_id: Optional[str] = Field(default=None, alias="NatGatewayId")
    network_interface_id: Optional[str] = Field(
        default=None, alias="NetworkInterfaceId"
    )
    origin: Optional[str] = Field(default=None, alias="Origin")
    transit_gateway_id: Optional[str] = Field(default=None, alias="TransitGatewayId")
    vpc_peering_connection_id: Optional[str] = Field(
        default=None, alias="VpcPeeringConnectionId"
    )
    state: Optional[str] = Field(default=None, alias="State")


class ApplySecurityGroupsToClientVpnTargetNetworkRequestModel(BaseModel):
    client_vpn_endpoint_id: str = Field(alias="ClientVpnEndpointId")
    vpc_id: str = Field(alias="VpcId")
    security_group_ids: Sequence[str] = Field(alias="SecurityGroupIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class AssignIpv6AddressesRequestModel(BaseModel):
    network_interface_id: str = Field(alias="NetworkInterfaceId")
    ipv6_address_count: Optional[int] = Field(default=None, alias="Ipv6AddressCount")
    ipv6_addresses: Optional[Sequence[str]] = Field(default=None, alias="Ipv6Addresses")
    ipv6_prefix_count: Optional[int] = Field(default=None, alias="Ipv6PrefixCount")
    ipv6_prefixes: Optional[Sequence[str]] = Field(default=None, alias="Ipv6Prefixes")


class AssignPrivateIpAddressesRequestNetworkInterfaceAssignPrivateIpAddressesModel(
    BaseModel
):
    allow_reassignment: Optional[bool] = Field(default=None, alias="AllowReassignment")
    private_ip_addresses: Optional[Sequence[str]] = Field(
        default=None, alias="PrivateIpAddresses"
    )
    secondary_private_ip_address_count: Optional[int] = Field(
        default=None, alias="SecondaryPrivateIpAddressCount"
    )
    ipv4_prefixes: Optional[Sequence[str]] = Field(default=None, alias="Ipv4Prefixes")
    ipv4_prefix_count: Optional[int] = Field(default=None, alias="Ipv4PrefixCount")


class AssignPrivateIpAddressesRequestModel(BaseModel):
    network_interface_id: str = Field(alias="NetworkInterfaceId")
    allow_reassignment: Optional[bool] = Field(default=None, alias="AllowReassignment")
    private_ip_addresses: Optional[Sequence[str]] = Field(
        default=None, alias="PrivateIpAddresses"
    )
    secondary_private_ip_address_count: Optional[int] = Field(
        default=None, alias="SecondaryPrivateIpAddressCount"
    )
    ipv4_prefixes: Optional[Sequence[str]] = Field(default=None, alias="Ipv4Prefixes")
    ipv4_prefix_count: Optional[int] = Field(default=None, alias="Ipv4PrefixCount")


class AssignedPrivateIpAddressModel(BaseModel):
    private_ip_address: Optional[str] = Field(default=None, alias="PrivateIpAddress")


class Ipv4PrefixSpecificationModel(BaseModel):
    ipv4_prefix: Optional[str] = Field(default=None, alias="Ipv4Prefix")


class AssignPrivateNatGatewayAddressRequestModel(BaseModel):
    nat_gateway_id: str = Field(alias="NatGatewayId")
    private_ip_addresses: Optional[Sequence[str]] = Field(
        default=None, alias="PrivateIpAddresses"
    )
    private_ip_address_count: Optional[int] = Field(
        default=None, alias="PrivateIpAddressCount"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class NatGatewayAddressModel(BaseModel):
    allocation_id: Optional[str] = Field(default=None, alias="AllocationId")
    network_interface_id: Optional[str] = Field(
        default=None, alias="NetworkInterfaceId"
    )
    private_ip: Optional[str] = Field(default=None, alias="PrivateIp")
    public_ip: Optional[str] = Field(default=None, alias="PublicIp")
    association_id: Optional[str] = Field(default=None, alias="AssociationId")
    is_primary: Optional[bool] = Field(default=None, alias="IsPrimary")
    failure_message: Optional[str] = Field(default=None, alias="FailureMessage")
    status: Optional[
        Literal[
            "assigning",
            "associating",
            "disassociating",
            "failed",
            "succeeded",
            "unassigning",
        ]
    ] = Field(default=None, alias="Status")


class AssociateAddressRequestClassicAddressAssociateModel(BaseModel):
    allocation_id: Optional[str] = Field(default=None, alias="AllocationId")
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    allow_reassociation: Optional[bool] = Field(
        default=None, alias="AllowReassociation"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    network_interface_id: Optional[str] = Field(
        default=None, alias="NetworkInterfaceId"
    )
    private_ip_address: Optional[str] = Field(default=None, alias="PrivateIpAddress")


class AssociateAddressRequestModel(BaseModel):
    allocation_id: Optional[str] = Field(default=None, alias="AllocationId")
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    public_ip: Optional[str] = Field(default=None, alias="PublicIp")
    allow_reassociation: Optional[bool] = Field(
        default=None, alias="AllowReassociation"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    network_interface_id: Optional[str] = Field(
        default=None, alias="NetworkInterfaceId"
    )
    private_ip_address: Optional[str] = Field(default=None, alias="PrivateIpAddress")


class AssociateAddressRequestVpcAddressAssociateModel(BaseModel):
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    public_ip: Optional[str] = Field(default=None, alias="PublicIp")
    allow_reassociation: Optional[bool] = Field(
        default=None, alias="AllowReassociation"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    network_interface_id: Optional[str] = Field(
        default=None, alias="NetworkInterfaceId"
    )
    private_ip_address: Optional[str] = Field(default=None, alias="PrivateIpAddress")


class AssociateClientVpnTargetNetworkRequestModel(BaseModel):
    client_vpn_endpoint_id: str = Field(alias="ClientVpnEndpointId")
    subnet_id: str = Field(alias="SubnetId")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class AssociationStatusModel(BaseModel):
    code: Optional[
        Literal[
            "associated",
            "associating",
            "association-failed",
            "disassociated",
            "disassociating",
        ]
    ] = Field(default=None, alias="Code")
    message: Optional[str] = Field(default=None, alias="Message")


class AssociateDhcpOptionsRequestDhcpOptionsAssociateWithVpcModel(BaseModel):
    vpc_id: str = Field(alias="VpcId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class AssociateDhcpOptionsRequestModel(BaseModel):
    dhcp_options_id: str = Field(alias="DhcpOptionsId")
    vpc_id: str = Field(alias="VpcId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class AssociateDhcpOptionsRequestVpcAssociateDhcpOptionsModel(BaseModel):
    dhcp_options_id: str = Field(alias="DhcpOptionsId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class AssociateEnclaveCertificateIamRoleRequestModel(BaseModel):
    certificate_arn: str = Field(alias="CertificateArn")
    role_arn: str = Field(alias="RoleArn")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class IamInstanceProfileSpecificationModel(BaseModel):
    arn: Optional[str] = Field(default=None, alias="Arn")
    name: Optional[str] = Field(default=None, alias="Name")


class AssociateNatGatewayAddressRequestModel(BaseModel):
    nat_gateway_id: str = Field(alias="NatGatewayId")
    allocation_ids: Sequence[str] = Field(alias="AllocationIds")
    private_ip_addresses: Optional[Sequence[str]] = Field(
        default=None, alias="PrivateIpAddresses"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class AssociateRouteTableRequestModel(BaseModel):
    route_table_id: str = Field(alias="RouteTableId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    subnet_id: Optional[str] = Field(default=None, alias="SubnetId")
    gateway_id: Optional[str] = Field(default=None, alias="GatewayId")


class AssociateRouteTableRequestRouteTableAssociateWithSubnetModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    subnet_id: Optional[str] = Field(default=None, alias="SubnetId")
    gateway_id: Optional[str] = Field(default=None, alias="GatewayId")


class RouteTableAssociationStateModel(BaseModel):
    state: Optional[
        Literal[
            "associated", "associating", "disassociated", "disassociating", "failed"
        ]
    ] = Field(default=None, alias="State")
    status_message: Optional[str] = Field(default=None, alias="StatusMessage")


class AssociateSubnetCidrBlockRequestModel(BaseModel):
    ipv6_cidr_block: str = Field(alias="Ipv6CidrBlock")
    subnet_id: str = Field(alias="SubnetId")


class AssociateTransitGatewayMulticastDomainRequestModel(BaseModel):
    transit_gateway_multicast_domain_id: str = Field(
        alias="TransitGatewayMulticastDomainId"
    )
    transit_gateway_attachment_id: str = Field(alias="TransitGatewayAttachmentId")
    subnet_ids: Sequence[str] = Field(alias="SubnetIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class AssociateTransitGatewayPolicyTableRequestModel(BaseModel):
    transit_gateway_policy_table_id: str = Field(alias="TransitGatewayPolicyTableId")
    transit_gateway_attachment_id: str = Field(alias="TransitGatewayAttachmentId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class TransitGatewayPolicyTableAssociationModel(BaseModel):
    transit_gateway_policy_table_id: Optional[str] = Field(
        default=None, alias="TransitGatewayPolicyTableId"
    )
    transit_gateway_attachment_id: Optional[str] = Field(
        default=None, alias="TransitGatewayAttachmentId"
    )
    resource_id: Optional[str] = Field(default=None, alias="ResourceId")
    resource_type: Optional[
        Literal[
            "connect", "direct-connect-gateway", "peering", "tgw-peering", "vpc", "vpn"
        ]
    ] = Field(default=None, alias="ResourceType")
    state: Optional[
        Literal["associated", "associating", "disassociated", "disassociating"]
    ] = Field(default=None, alias="State")


class AssociateTransitGatewayRouteTableRequestModel(BaseModel):
    transit_gateway_route_table_id: str = Field(alias="TransitGatewayRouteTableId")
    transit_gateway_attachment_id: str = Field(alias="TransitGatewayAttachmentId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class TransitGatewayAssociationModel(BaseModel):
    transit_gateway_route_table_id: Optional[str] = Field(
        default=None, alias="TransitGatewayRouteTableId"
    )
    transit_gateway_attachment_id: Optional[str] = Field(
        default=None, alias="TransitGatewayAttachmentId"
    )
    resource_id: Optional[str] = Field(default=None, alias="ResourceId")
    resource_type: Optional[
        Literal[
            "connect", "direct-connect-gateway", "peering", "tgw-peering", "vpc", "vpn"
        ]
    ] = Field(default=None, alias="ResourceType")
    state: Optional[
        Literal["associated", "associating", "disassociated", "disassociating"]
    ] = Field(default=None, alias="State")


class AssociateTrunkInterfaceRequestModel(BaseModel):
    branch_interface_id: str = Field(alias="BranchInterfaceId")
    trunk_interface_id: str = Field(alias="TrunkInterfaceId")
    vlan_id: Optional[int] = Field(default=None, alias="VlanId")
    gre_key: Optional[int] = Field(default=None, alias="GreKey")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class AssociateVpcCidrBlockRequestModel(BaseModel):
    vpc_id: str = Field(alias="VpcId")
    amazon_provided_ipv6_cidr_block: Optional[bool] = Field(
        default=None, alias="AmazonProvidedIpv6CidrBlock"
    )
    cidr_block: Optional[str] = Field(default=None, alias="CidrBlock")
    ipv6_cidr_block_network_border_group: Optional[str] = Field(
        default=None, alias="Ipv6CidrBlockNetworkBorderGroup"
    )
    ipv6_pool: Optional[str] = Field(default=None, alias="Ipv6Pool")
    ipv6_cidr_block: Optional[str] = Field(default=None, alias="Ipv6CidrBlock")
    ipv4_ipam_pool_id: Optional[str] = Field(default=None, alias="Ipv4IpamPoolId")
    ipv4_netmask_length: Optional[int] = Field(default=None, alias="Ipv4NetmaskLength")
    ipv6_ipam_pool_id: Optional[str] = Field(default=None, alias="Ipv6IpamPoolId")
    ipv6_netmask_length: Optional[int] = Field(default=None, alias="Ipv6NetmaskLength")


class AssociatedRoleModel(BaseModel):
    associated_role_arn: Optional[str] = Field(default=None, alias="AssociatedRoleArn")
    certificate_s3_bucket_name: Optional[str] = Field(
        default=None, alias="CertificateS3BucketName"
    )
    certificate_s3_object_key: Optional[str] = Field(
        default=None, alias="CertificateS3ObjectKey"
    )
    encryption_kms_key_id: Optional[str] = Field(
        default=None, alias="EncryptionKmsKeyId"
    )


class AssociatedTargetNetworkModel(BaseModel):
    network_id: Optional[str] = Field(default=None, alias="NetworkId")
    network_type: Optional[Literal["vpc"]] = Field(default=None, alias="NetworkType")


class AthenaIntegrationModel(BaseModel):
    integration_result_s3_destination_arn: str = Field(
        alias="IntegrationResultS3DestinationArn"
    )
    partition_load_frequency: Literal["daily", "monthly", "none", "weekly"] = Field(
        alias="PartitionLoadFrequency"
    )
    partition_start_date: Optional[Union[datetime, str]] = Field(
        default=None, alias="PartitionStartDate"
    )
    partition_end_date: Optional[Union[datetime, str]] = Field(
        default=None, alias="PartitionEndDate"
    )


class AttachClassicLinkVpcRequestInstanceAttachClassicLinkVpcModel(BaseModel):
    groups: Sequence[str] = Field(alias="Groups")
    vpc_id: str = Field(alias="VpcId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class AttachClassicLinkVpcRequestModel(BaseModel):
    groups: Sequence[str] = Field(alias="Groups")
    instance_id: str = Field(alias="InstanceId")
    vpc_id: str = Field(alias="VpcId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class AttachClassicLinkVpcRequestVpcAttachClassicLinkInstanceModel(BaseModel):
    groups: Sequence[str] = Field(alias="Groups")
    instance_id: str = Field(alias="InstanceId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class AttachInternetGatewayRequestInternetGatewayAttachToVpcModel(BaseModel):
    vpc_id: str = Field(alias="VpcId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class AttachInternetGatewayRequestModel(BaseModel):
    internet_gateway_id: str = Field(alias="InternetGatewayId")
    vpc_id: str = Field(alias="VpcId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class AttachInternetGatewayRequestVpcAttachInternetGatewayModel(BaseModel):
    internet_gateway_id: str = Field(alias="InternetGatewayId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class AttachVerifiedAccessTrustProviderRequestModel(BaseModel):
    verified_access_instance_id: str = Field(alias="VerifiedAccessInstanceId")
    verified_access_trust_provider_id: str = Field(
        alias="VerifiedAccessTrustProviderId"
    )
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class AttachVolumeRequestInstanceAttachVolumeModel(BaseModel):
    device: str = Field(alias="Device")
    volume_id: str = Field(alias="VolumeId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class AttachVolumeRequestModel(BaseModel):
    device: str = Field(alias="Device")
    instance_id: str = Field(alias="InstanceId")
    volume_id: str = Field(alias="VolumeId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class AttachVolumeRequestVolumeAttachToInstanceModel(BaseModel):
    device: str = Field(alias="Device")
    instance_id: str = Field(alias="InstanceId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class AttachVpnGatewayRequestModel(BaseModel):
    vpc_id: str = Field(alias="VpcId")
    vpn_gateway_id: str = Field(alias="VpnGatewayId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class VpcAttachmentModel(BaseModel):
    state: Optional[Literal["attached", "attaching", "detached", "detaching"]] = Field(
        default=None, alias="State"
    )
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")


class AttachmentEnaSrdUdpSpecificationModel(BaseModel):
    ena_srd_udp_enabled: Optional[bool] = Field(default=None, alias="EnaSrdUdpEnabled")


class AttributeBooleanValueModel(BaseModel):
    value: Optional[bool] = Field(default=None, alias="Value")


class AttributeValueModel(BaseModel):
    value: Optional[str] = Field(default=None, alias="Value")


class ClientVpnAuthorizationRuleStatusModel(BaseModel):
    code: Optional[Literal["active", "authorizing", "failed", "revoking"]] = Field(
        default=None, alias="Code"
    )
    message: Optional[str] = Field(default=None, alias="Message")


class AuthorizeClientVpnIngressRequestModel(BaseModel):
    client_vpn_endpoint_id: str = Field(alias="ClientVpnEndpointId")
    target_network_cidr: str = Field(alias="TargetNetworkCidr")
    access_group_id: Optional[str] = Field(default=None, alias="AccessGroupId")
    authorize_all_groups: Optional[bool] = Field(
        default=None, alias="AuthorizeAllGroups"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class AvailabilityZoneMessageModel(BaseModel):
    message: Optional[str] = Field(default=None, alias="Message")


class InstanceCapacityModel(BaseModel):
    available_capacity: Optional[int] = Field(default=None, alias="AvailableCapacity")
    instance_type: Optional[str] = Field(default=None, alias="InstanceType")
    total_capacity: Optional[int] = Field(default=None, alias="TotalCapacity")


class BaselineEbsBandwidthMbpsRequestModel(BaseModel):
    min: Optional[int] = Field(default=None, alias="Min")
    max: Optional[int] = Field(default=None, alias="Max")


class BaselineEbsBandwidthMbpsModel(BaseModel):
    min: Optional[int] = Field(default=None, alias="Min")
    max: Optional[int] = Field(default=None, alias="Max")


class BlobAttributeValueModel(BaseModel):
    value: Optional[Union[str, bytes, Type[IO[Any]], Type[StreamingBody]]] = Field(
        default=None, alias="Value"
    )


class EbsBlockDeviceModel(BaseModel):
    delete_on_termination: Optional[bool] = Field(
        default=None, alias="DeleteOnTermination"
    )
    iops: Optional[int] = Field(default=None, alias="Iops")
    snapshot_id: Optional[str] = Field(default=None, alias="SnapshotId")
    volume_size: Optional[int] = Field(default=None, alias="VolumeSize")
    volume_type: Optional[
        Literal["gp2", "gp3", "io1", "io2", "sc1", "st1", "standard"]
    ] = Field(default=None, alias="VolumeType")
    kms_key_id: Optional[str] = Field(default=None, alias="KmsKeyId")
    throughput: Optional[int] = Field(default=None, alias="Throughput")
    outpost_arn: Optional[str] = Field(default=None, alias="OutpostArn")
    encrypted: Optional[bool] = Field(default=None, alias="Encrypted")


class BundleTaskErrorModel(BaseModel):
    code: Optional[str] = Field(default=None, alias="Code")
    message: Optional[str] = Field(default=None, alias="Message")


class CancelBundleTaskRequestModel(BaseModel):
    bundle_id: str = Field(alias="BundleId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CancelCapacityReservationFleetErrorModel(BaseModel):
    code: Optional[str] = Field(default=None, alias="Code")
    message: Optional[str] = Field(default=None, alias="Message")


class CancelCapacityReservationFleetsRequestModel(BaseModel):
    capacity_reservation_fleet_ids: Sequence[str] = Field(
        alias="CapacityReservationFleetIds"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CapacityReservationFleetCancellationStateModel(BaseModel):
    current_fleet_state: Optional[
        Literal[
            "active",
            "cancelled",
            "cancelling",
            "expired",
            "expiring",
            "failed",
            "modifying",
            "partially_fulfilled",
            "submitted",
        ]
    ] = Field(default=None, alias="CurrentFleetState")
    previous_fleet_state: Optional[
        Literal[
            "active",
            "cancelled",
            "cancelling",
            "expired",
            "expiring",
            "failed",
            "modifying",
            "partially_fulfilled",
            "submitted",
        ]
    ] = Field(default=None, alias="PreviousFleetState")
    capacity_reservation_fleet_id: Optional[str] = Field(
        default=None, alias="CapacityReservationFleetId"
    )


class CancelCapacityReservationRequestModel(BaseModel):
    capacity_reservation_id: str = Field(alias="CapacityReservationId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CancelConversionRequestModel(BaseModel):
    conversion_task_id: str = Field(alias="ConversionTaskId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    reason_message: Optional[str] = Field(default=None, alias="ReasonMessage")


class CancelExportTaskRequestModel(BaseModel):
    export_task_id: str = Field(alias="ExportTaskId")


class CancelImageLaunchPermissionRequestModel(BaseModel):
    image_id: str = Field(alias="ImageId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CancelImportTaskRequestModel(BaseModel):
    cancel_reason: Optional[str] = Field(default=None, alias="CancelReason")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    import_task_id: Optional[str] = Field(default=None, alias="ImportTaskId")


class CancelReservedInstancesListingRequestModel(BaseModel):
    reserved_instances_listing_id: str = Field(alias="ReservedInstancesListingId")


class CancelSpotFleetRequestsErrorModel(BaseModel):
    code: Optional[
        Literal[
            "fleetRequestIdDoesNotExist",
            "fleetRequestIdMalformed",
            "fleetRequestNotInCancellableState",
            "unexpectedError",
        ]
    ] = Field(default=None, alias="Code")
    message: Optional[str] = Field(default=None, alias="Message")


class CancelSpotFleetRequestsRequestModel(BaseModel):
    spot_fleet_request_ids: Sequence[str] = Field(alias="SpotFleetRequestIds")
    terminate_instances: bool = Field(alias="TerminateInstances")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CancelSpotFleetRequestsSuccessItemModel(BaseModel):
    current_spot_fleet_request_state: Optional[
        Literal[
            "active",
            "cancelled",
            "cancelled_running",
            "cancelled_terminating",
            "failed",
            "modifying",
            "submitted",
        ]
    ] = Field(default=None, alias="CurrentSpotFleetRequestState")
    previous_spot_fleet_request_state: Optional[
        Literal[
            "active",
            "cancelled",
            "cancelled_running",
            "cancelled_terminating",
            "failed",
            "modifying",
            "submitted",
        ]
    ] = Field(default=None, alias="PreviousSpotFleetRequestState")
    spot_fleet_request_id: Optional[str] = Field(
        default=None, alias="SpotFleetRequestId"
    )


class CancelSpotInstanceRequestsRequestModel(BaseModel):
    spot_instance_request_ids: Sequence[str] = Field(alias="SpotInstanceRequestIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CancelledSpotInstanceRequestModel(BaseModel):
    spot_instance_request_id: Optional[str] = Field(
        default=None, alias="SpotInstanceRequestId"
    )
    state: Optional[
        Literal["active", "cancelled", "closed", "completed", "open"]
    ] = Field(default=None, alias="State")


class CapacityAllocationModel(BaseModel):
    allocation_type: Optional[Literal["used"]] = Field(
        default=None, alias="AllocationType"
    )
    count: Optional[int] = Field(default=None, alias="Count")


class FleetCapacityReservationModel(BaseModel):
    capacity_reservation_id: Optional[str] = Field(
        default=None, alias="CapacityReservationId"
    )
    availability_zone_id: Optional[str] = Field(
        default=None, alias="AvailabilityZoneId"
    )
    instance_type: Optional[
        Literal[
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.large",
            "a1.medium",
            "a1.metal",
            "a1.xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c3.large",
            "c3.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.large",
            "c5.metal",
            "c5.xlarge",
            "c5a.12xlarge",
            "c5a.16xlarge",
            "c5a.24xlarge",
            "c5a.2xlarge",
            "c5a.4xlarge",
            "c5a.8xlarge",
            "c5a.large",
            "c5a.xlarge",
            "c5ad.12xlarge",
            "c5ad.16xlarge",
            "c5ad.24xlarge",
            "c5ad.2xlarge",
            "c5ad.4xlarge",
            "c5ad.8xlarge",
            "c5ad.large",
            "c5ad.xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.large",
            "c5d.metal",
            "c5d.xlarge",
            "c5n.18xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.large",
            "c5n.metal",
            "c5n.xlarge",
            "c6a.12xlarge",
            "c6a.16xlarge",
            "c6a.24xlarge",
            "c6a.2xlarge",
            "c6a.32xlarge",
            "c6a.48xlarge",
            "c6a.4xlarge",
            "c6a.8xlarge",
            "c6a.large",
            "c6a.metal",
            "c6a.xlarge",
            "c6g.12xlarge",
            "c6g.16xlarge",
            "c6g.2xlarge",
            "c6g.4xlarge",
            "c6g.8xlarge",
            "c6g.large",
            "c6g.medium",
            "c6g.metal",
            "c6g.xlarge",
            "c6gd.12xlarge",
            "c6gd.16xlarge",
            "c6gd.2xlarge",
            "c6gd.4xlarge",
            "c6gd.8xlarge",
            "c6gd.large",
            "c6gd.medium",
            "c6gd.metal",
            "c6gd.xlarge",
            "c6gn.12xlarge",
            "c6gn.16xlarge",
            "c6gn.2xlarge",
            "c6gn.4xlarge",
            "c6gn.8xlarge",
            "c6gn.large",
            "c6gn.medium",
            "c6gn.xlarge",
            "c6i.12xlarge",
            "c6i.16xlarge",
            "c6i.24xlarge",
            "c6i.2xlarge",
            "c6i.32xlarge",
            "c6i.4xlarge",
            "c6i.8xlarge",
            "c6i.large",
            "c6i.metal",
            "c6i.xlarge",
            "c6id.12xlarge",
            "c6id.16xlarge",
            "c6id.24xlarge",
            "c6id.2xlarge",
            "c6id.32xlarge",
            "c6id.4xlarge",
            "c6id.8xlarge",
            "c6id.large",
            "c6id.metal",
            "c6id.xlarge",
            "c6in.12xlarge",
            "c6in.16xlarge",
            "c6in.24xlarge",
            "c6in.2xlarge",
            "c6in.32xlarge",
            "c6in.4xlarge",
            "c6in.8xlarge",
            "c6in.large",
            "c6in.xlarge",
            "c7g.12xlarge",
            "c7g.16xlarge",
            "c7g.2xlarge",
            "c7g.4xlarge",
            "c7g.8xlarge",
            "c7g.large",
            "c7g.medium",
            "c7g.xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "cg1.4xlarge",
            "cr1.8xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "d2.xlarge",
            "d3.2xlarge",
            "d3.4xlarge",
            "d3.8xlarge",
            "d3.xlarge",
            "d3en.12xlarge",
            "d3en.2xlarge",
            "d3en.4xlarge",
            "d3en.6xlarge",
            "d3en.8xlarge",
            "d3en.xlarge",
            "dl1.24xlarge",
            "f1.16xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.16xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3s.xlarge",
            "g4ad.16xlarge",
            "g4ad.2xlarge",
            "g4ad.4xlarge",
            "g4ad.8xlarge",
            "g4ad.xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.metal",
            "g4dn.xlarge",
            "g5.12xlarge",
            "g5.16xlarge",
            "g5.24xlarge",
            "g5.2xlarge",
            "g5.48xlarge",
            "g5.4xlarge",
            "g5.8xlarge",
            "g5.xlarge",
            "g5g.16xlarge",
            "g5g.2xlarge",
            "g5g.4xlarge",
            "g5g.8xlarge",
            "g5g.metal",
            "g5g.xlarge",
            "h1.16xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "hi1.4xlarge",
            "hpc6a.48xlarge",
            "hpc6id.32xlarge",
            "hs1.8xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i2.xlarge",
            "i3.16xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.large",
            "i3.metal",
            "i3.xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.large",
            "i3en.metal",
            "i3en.xlarge",
            "i4i.16xlarge",
            "i4i.2xlarge",
            "i4i.32xlarge",
            "i4i.4xlarge",
            "i4i.8xlarge",
            "i4i.large",
            "i4i.metal",
            "i4i.xlarge",
            "im4gn.16xlarge",
            "im4gn.2xlarge",
            "im4gn.4xlarge",
            "im4gn.8xlarge",
            "im4gn.large",
            "im4gn.xlarge",
            "inf1.24xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.xlarge",
            "is4gen.2xlarge",
            "is4gen.4xlarge",
            "is4gen.8xlarge",
            "is4gen.large",
            "is4gen.medium",
            "is4gen.xlarge",
            "m1.large",
            "m1.medium",
            "m1.small",
            "m1.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "m2.xlarge",
            "m3.2xlarge",
            "m3.large",
            "m3.medium",
            "m3.xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.large",
            "m4.xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.large",
            "m5.metal",
            "m5.xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.large",
            "m5a.xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.large",
            "m5ad.xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.large",
            "m5d.metal",
            "m5d.xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.large",
            "m5dn.metal",
            "m5dn.xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.large",
            "m5n.metal",
            "m5n.xlarge",
            "m5zn.12xlarge",
            "m5zn.2xlarge",
            "m5zn.3xlarge",
            "m5zn.6xlarge",
            "m5zn.large",
            "m5zn.metal",
            "m5zn.xlarge",
            "m6a.12xlarge",
            "m6a.16xlarge",
            "m6a.24xlarge",
            "m6a.2xlarge",
            "m6a.32xlarge",
            "m6a.48xlarge",
            "m6a.4xlarge",
            "m6a.8xlarge",
            "m6a.large",
            "m6a.metal",
            "m6a.xlarge",
            "m6g.12xlarge",
            "m6g.16xlarge",
            "m6g.2xlarge",
            "m6g.4xlarge",
            "m6g.8xlarge",
            "m6g.large",
            "m6g.medium",
            "m6g.metal",
            "m6g.xlarge",
            "m6gd.12xlarge",
            "m6gd.16xlarge",
            "m6gd.2xlarge",
            "m6gd.4xlarge",
            "m6gd.8xlarge",
            "m6gd.large",
            "m6gd.medium",
            "m6gd.metal",
            "m6gd.xlarge",
            "m6i.12xlarge",
            "m6i.16xlarge",
            "m6i.24xlarge",
            "m6i.2xlarge",
            "m6i.32xlarge",
            "m6i.4xlarge",
            "m6i.8xlarge",
            "m6i.large",
            "m6i.metal",
            "m6i.xlarge",
            "m6id.12xlarge",
            "m6id.16xlarge",
            "m6id.24xlarge",
            "m6id.2xlarge",
            "m6id.32xlarge",
            "m6id.4xlarge",
            "m6id.8xlarge",
            "m6id.large",
            "m6id.metal",
            "m6id.xlarge",
            "m6idn.12xlarge",
            "m6idn.16xlarge",
            "m6idn.24xlarge",
            "m6idn.2xlarge",
            "m6idn.32xlarge",
            "m6idn.4xlarge",
            "m6idn.8xlarge",
            "m6idn.large",
            "m6idn.xlarge",
            "m6in.12xlarge",
            "m6in.16xlarge",
            "m6in.24xlarge",
            "m6in.2xlarge",
            "m6in.32xlarge",
            "m6in.4xlarge",
            "m6in.8xlarge",
            "m6in.large",
            "m6in.xlarge",
            "mac1.metal",
            "mac2.metal",
            "p2.16xlarge",
            "p2.8xlarge",
            "p2.xlarge",
            "p3.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3dn.24xlarge",
            "p4d.24xlarge",
            "p4de.24xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r4.16xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.large",
            "r5.metal",
            "r5.xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.large",
            "r5a.xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.large",
            "r5ad.xlarge",
            "r5b.12xlarge",
            "r5b.16xlarge",
            "r5b.24xlarge",
            "r5b.2xlarge",
            "r5b.4xlarge",
            "r5b.8xlarge",
            "r5b.large",
            "r5b.metal",
            "r5b.xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.large",
            "r5d.metal",
            "r5d.xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.large",
            "r5dn.metal",
            "r5dn.xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.large",
            "r5n.metal",
            "r5n.xlarge",
            "r6a.12xlarge",
            "r6a.16xlarge",
            "r6a.24xlarge",
            "r6a.2xlarge",
            "r6a.32xlarge",
            "r6a.48xlarge",
            "r6a.4xlarge",
            "r6a.8xlarge",
            "r6a.large",
            "r6a.metal",
            "r6a.xlarge",
            "r6g.12xlarge",
            "r6g.16xlarge",
            "r6g.2xlarge",
            "r6g.4xlarge",
            "r6g.8xlarge",
            "r6g.large",
            "r6g.medium",
            "r6g.metal",
            "r6g.xlarge",
            "r6gd.12xlarge",
            "r6gd.16xlarge",
            "r6gd.2xlarge",
            "r6gd.4xlarge",
            "r6gd.8xlarge",
            "r6gd.large",
            "r6gd.medium",
            "r6gd.metal",
            "r6gd.xlarge",
            "r6i.12xlarge",
            "r6i.16xlarge",
            "r6i.24xlarge",
            "r6i.2xlarge",
            "r6i.32xlarge",
            "r6i.4xlarge",
            "r6i.8xlarge",
            "r6i.large",
            "r6i.metal",
            "r6i.xlarge",
            "r6id.12xlarge",
            "r6id.16xlarge",
            "r6id.24xlarge",
            "r6id.2xlarge",
            "r6id.32xlarge",
            "r6id.4xlarge",
            "r6id.8xlarge",
            "r6id.large",
            "r6id.metal",
            "r6id.xlarge",
            "r6idn.12xlarge",
            "r6idn.16xlarge",
            "r6idn.24xlarge",
            "r6idn.2xlarge",
            "r6idn.32xlarge",
            "r6idn.4xlarge",
            "r6idn.8xlarge",
            "r6idn.large",
            "r6idn.xlarge",
            "r6in.12xlarge",
            "r6in.16xlarge",
            "r6in.24xlarge",
            "r6in.2xlarge",
            "r6in.32xlarge",
            "r6in.4xlarge",
            "r6in.8xlarge",
            "r6in.large",
            "r6in.xlarge",
            "t1.micro",
            "t2.2xlarge",
            "t2.large",
            "t2.medium",
            "t2.micro",
            "t2.nano",
            "t2.small",
            "t2.xlarge",
            "t3.2xlarge",
            "t3.large",
            "t3.medium",
            "t3.micro",
            "t3.nano",
            "t3.small",
            "t3.xlarge",
            "t3a.2xlarge",
            "t3a.large",
            "t3a.medium",
            "t3a.micro",
            "t3a.nano",
            "t3a.small",
            "t3a.xlarge",
            "t4g.2xlarge",
            "t4g.large",
            "t4g.medium",
            "t4g.micro",
            "t4g.nano",
            "t4g.small",
            "t4g.xlarge",
            "trn1.2xlarge",
            "trn1.32xlarge",
            "u-12tb1.112xlarge",
            "u-12tb1.metal",
            "u-18tb1.112xlarge",
            "u-18tb1.metal",
            "u-24tb1.112xlarge",
            "u-24tb1.metal",
            "u-3tb1.56xlarge",
            "u-6tb1.112xlarge",
            "u-6tb1.56xlarge",
            "u-6tb1.metal",
            "u-9tb1.112xlarge",
            "u-9tb1.metal",
            "vt1.24xlarge",
            "vt1.3xlarge",
            "vt1.6xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.16xlarge",
            "x1e.2xlarge",
            "x1e.32xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.xlarge",
            "x2gd.12xlarge",
            "x2gd.16xlarge",
            "x2gd.2xlarge",
            "x2gd.4xlarge",
            "x2gd.8xlarge",
            "x2gd.large",
            "x2gd.medium",
            "x2gd.metal",
            "x2gd.xlarge",
            "x2idn.16xlarge",
            "x2idn.24xlarge",
            "x2idn.32xlarge",
            "x2idn.metal",
            "x2iedn.16xlarge",
            "x2iedn.24xlarge",
            "x2iedn.2xlarge",
            "x2iedn.32xlarge",
            "x2iedn.4xlarge",
            "x2iedn.8xlarge",
            "x2iedn.metal",
            "x2iedn.xlarge",
            "x2iezn.12xlarge",
            "x2iezn.2xlarge",
            "x2iezn.4xlarge",
            "x2iezn.6xlarge",
            "x2iezn.8xlarge",
            "x2iezn.metal",
            "z1d.12xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.large",
            "z1d.metal",
            "z1d.xlarge",
        ]
    ] = Field(default=None, alias="InstanceType")
    instance_platform: Optional[
        Literal[
            "Linux with SQL Server Enterprise",
            "Linux with SQL Server Standard",
            "Linux with SQL Server Web",
            "Linux/UNIX",
            "RHEL with HA",
            "RHEL with HA and SQL Server Enterprise",
            "RHEL with HA and SQL Server Standard",
            "RHEL with SQL Server Enterprise",
            "RHEL with SQL Server Standard",
            "RHEL with SQL Server Web",
            "Red Hat Enterprise Linux",
            "SUSE Linux",
            "Windows",
            "Windows with SQL Server",
            "Windows with SQL Server Enterprise",
            "Windows with SQL Server Standard",
            "Windows with SQL Server Web",
        ]
    ] = Field(default=None, alias="InstancePlatform")
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    total_instance_count: Optional[int] = Field(
        default=None, alias="TotalInstanceCount"
    )
    fulfilled_capacity: Optional[float] = Field(default=None, alias="FulfilledCapacity")
    ebs_optimized: Optional[bool] = Field(default=None, alias="EbsOptimized")
    create_date: Optional[datetime] = Field(default=None, alias="CreateDate")
    weight: Optional[float] = Field(default=None, alias="Weight")
    priority: Optional[int] = Field(default=None, alias="Priority")


class CapacityReservationGroupModel(BaseModel):
    group_arn: Optional[str] = Field(default=None, alias="GroupArn")
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")


class CapacityReservationOptionsRequestModel(BaseModel):
    usage_strategy: Optional[Literal["use-capacity-reservations-first"]] = Field(
        default=None, alias="UsageStrategy"
    )


class CapacityReservationOptionsModel(BaseModel):
    usage_strategy: Optional[Literal["use-capacity-reservations-first"]] = Field(
        default=None, alias="UsageStrategy"
    )


class CapacityReservationTargetResponseModel(BaseModel):
    capacity_reservation_id: Optional[str] = Field(
        default=None, alias="CapacityReservationId"
    )
    capacity_reservation_resource_group_arn: Optional[str] = Field(
        default=None, alias="CapacityReservationResourceGroupArn"
    )


class CapacityReservationTargetModel(BaseModel):
    capacity_reservation_id: Optional[str] = Field(
        default=None, alias="CapacityReservationId"
    )
    capacity_reservation_resource_group_arn: Optional[str] = Field(
        default=None, alias="CapacityReservationResourceGroupArn"
    )


class CertificateAuthenticationRequestModel(BaseModel):
    client_root_certificate_chain_arn: Optional[str] = Field(
        default=None, alias="ClientRootCertificateChainArn"
    )


class CertificateAuthenticationModel(BaseModel):
    client_root_certificate_chain: Optional[str] = Field(
        default=None, alias="ClientRootCertificateChain"
    )


class CidrAuthorizationContextModel(BaseModel):
    message: str = Field(alias="Message")
    signature: str = Field(alias="Signature")


class CidrBlockModel(BaseModel):
    cidr_block: Optional[str] = Field(default=None, alias="CidrBlock")


class ClassicLinkDnsSupportModel(BaseModel):
    classic_link_dns_supported: Optional[bool] = Field(
        default=None, alias="ClassicLinkDnsSupported"
    )
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")


class GroupIdentifierModel(BaseModel):
    group_name: Optional[str] = Field(default=None, alias="GroupName")
    group_id: Optional[str] = Field(default=None, alias="GroupId")


class ClassicLoadBalancerModel(BaseModel):
    name: Optional[str] = Field(default=None, alias="Name")


class ClientCertificateRevocationListStatusModel(BaseModel):
    code: Optional[Literal["active", "pending"]] = Field(default=None, alias="Code")
    message: Optional[str] = Field(default=None, alias="Message")


class ClientConnectOptionsModel(BaseModel):
    enabled: Optional[bool] = Field(default=None, alias="Enabled")
    lambda_function_arn: Optional[str] = Field(default=None, alias="LambdaFunctionArn")


class ClientVpnEndpointAttributeStatusModel(BaseModel):
    code: Optional[Literal["applied", "applying"]] = Field(default=None, alias="Code")
    message: Optional[str] = Field(default=None, alias="Message")


class ClientDataModel(BaseModel):
    comment: Optional[str] = Field(default=None, alias="Comment")
    upload_end: Optional[Union[datetime, str]] = Field(default=None, alias="UploadEnd")
    upload_size: Optional[float] = Field(default=None, alias="UploadSize")
    upload_start: Optional[Union[datetime, str]] = Field(
        default=None, alias="UploadStart"
    )


class ClientLoginBannerOptionsModel(BaseModel):
    enabled: Optional[bool] = Field(default=None, alias="Enabled")
    banner_text: Optional[str] = Field(default=None, alias="BannerText")


class ClientLoginBannerResponseOptionsModel(BaseModel):
    enabled: Optional[bool] = Field(default=None, alias="Enabled")
    banner_text: Optional[str] = Field(default=None, alias="BannerText")


class DirectoryServiceAuthenticationRequestModel(BaseModel):
    directory_id: Optional[str] = Field(default=None, alias="DirectoryId")


class FederatedAuthenticationRequestModel(BaseModel):
    s_aml_provider_arn: Optional[str] = Field(default=None, alias="SAMLProviderArn")
    self_service_s_aml_provider_arn: Optional[str] = Field(
        default=None, alias="SelfServiceSAMLProviderArn"
    )


class DirectoryServiceAuthenticationModel(BaseModel):
    directory_id: Optional[str] = Field(default=None, alias="DirectoryId")


class FederatedAuthenticationModel(BaseModel):
    saml_provider_arn: Optional[str] = Field(default=None, alias="SamlProviderArn")
    self_service_saml_provider_arn: Optional[str] = Field(
        default=None, alias="SelfServiceSamlProviderArn"
    )


class ClientVpnConnectionStatusModel(BaseModel):
    code: Optional[
        Literal["active", "failed-to-terminate", "terminated", "terminating"]
    ] = Field(default=None, alias="Code")
    message: Optional[str] = Field(default=None, alias="Message")


class ClientVpnEndpointStatusModel(BaseModel):
    code: Optional[
        Literal["available", "deleted", "deleting", "pending-associate"]
    ] = Field(default=None, alias="Code")
    message: Optional[str] = Field(default=None, alias="Message")


class ConnectionLogResponseOptionsModel(BaseModel):
    enabled: Optional[bool] = Field(default=None, alias="Enabled")
    cloudwatch_log_group: Optional[str] = Field(
        default=None, alias="CloudwatchLogGroup"
    )
    cloudwatch_log_stream: Optional[str] = Field(
        default=None, alias="CloudwatchLogStream"
    )


class ClientVpnRouteStatusModel(BaseModel):
    code: Optional[Literal["active", "creating", "deleting", "failed"]] = Field(
        default=None, alias="Code"
    )
    message: Optional[str] = Field(default=None, alias="Message")


class CloudWatchLogOptionsSpecificationModel(BaseModel):
    log_enabled: Optional[bool] = Field(default=None, alias="LogEnabled")
    log_group_arn: Optional[str] = Field(default=None, alias="LogGroupArn")
    log_output_format: Optional[str] = Field(default=None, alias="LogOutputFormat")


class CloudWatchLogOptionsModel(BaseModel):
    log_enabled: Optional[bool] = Field(default=None, alias="LogEnabled")
    log_group_arn: Optional[str] = Field(default=None, alias="LogGroupArn")
    log_output_format: Optional[str] = Field(default=None, alias="LogOutputFormat")


class CoipAddressUsageModel(BaseModel):
    allocation_id: Optional[str] = Field(default=None, alias="AllocationId")
    aws_account_id: Optional[str] = Field(default=None, alias="AwsAccountId")
    aws_service: Optional[str] = Field(default=None, alias="AwsService")
    co_ip: Optional[str] = Field(default=None, alias="CoIp")


class CoipCidrModel(BaseModel):
    cidr: Optional[str] = Field(default=None, alias="Cidr")
    coip_pool_id: Optional[str] = Field(default=None, alias="CoipPoolId")
    local_gateway_route_table_id: Optional[str] = Field(
        default=None, alias="LocalGatewayRouteTableId"
    )


class ConfirmProductInstanceRequestModel(BaseModel):
    instance_id: str = Field(alias="InstanceId")
    product_code: str = Field(alias="ProductCode")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ConnectionLogOptionsModel(BaseModel):
    enabled: Optional[bool] = Field(default=None, alias="Enabled")
    cloudwatch_log_group: Optional[str] = Field(
        default=None, alias="CloudwatchLogGroup"
    )
    cloudwatch_log_stream: Optional[str] = Field(
        default=None, alias="CloudwatchLogStream"
    )


class ConnectionNotificationModel(BaseModel):
    connection_notification_id: Optional[str] = Field(
        default=None, alias="ConnectionNotificationId"
    )
    service_id: Optional[str] = Field(default=None, alias="ServiceId")
    vpc_endpoint_id: Optional[str] = Field(default=None, alias="VpcEndpointId")
    connection_notification_type: Optional[Literal["Topic"]] = Field(
        default=None, alias="ConnectionNotificationType"
    )
    connection_notification_arn: Optional[str] = Field(
        default=None, alias="ConnectionNotificationArn"
    )
    connection_events: Optional[List[str]] = Field(
        default=None, alias="ConnectionEvents"
    )
    connection_notification_state: Optional[Literal["Disabled", "Enabled"]] = Field(
        default=None, alias="ConnectionNotificationState"
    )


class CopyFpgaImageRequestModel(BaseModel):
    source_fpga_image_id: str = Field(alias="SourceFpgaImageId")
    source_region: str = Field(alias="SourceRegion")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    description: Optional[str] = Field(default=None, alias="Description")
    name: Optional[str] = Field(default=None, alias="Name")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")


class CopyImageRequestModel(BaseModel):
    name: str = Field(alias="Name")
    source_image_id: str = Field(alias="SourceImageId")
    source_region: str = Field(alias="SourceRegion")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    description: Optional[str] = Field(default=None, alias="Description")
    encrypted: Optional[bool] = Field(default=None, alias="Encrypted")
    kms_key_id: Optional[str] = Field(default=None, alias="KmsKeyId")
    destination_outpost_arn: Optional[str] = Field(
        default=None, alias="DestinationOutpostArn"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    copy_image_tags: Optional[bool] = Field(default=None, alias="CopyImageTags")


class CpuOptionsRequestModel(BaseModel):
    core_count: Optional[int] = Field(default=None, alias="CoreCount")
    threads_per_core: Optional[int] = Field(default=None, alias="ThreadsPerCore")


class CpuOptionsModel(BaseModel):
    core_count: Optional[int] = Field(default=None, alias="CoreCount")
    threads_per_core: Optional[int] = Field(default=None, alias="ThreadsPerCore")


class ReservationFleetInstanceSpecificationModel(BaseModel):
    instance_type: Optional[
        Literal[
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.large",
            "a1.medium",
            "a1.metal",
            "a1.xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c3.large",
            "c3.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.large",
            "c5.metal",
            "c5.xlarge",
            "c5a.12xlarge",
            "c5a.16xlarge",
            "c5a.24xlarge",
            "c5a.2xlarge",
            "c5a.4xlarge",
            "c5a.8xlarge",
            "c5a.large",
            "c5a.xlarge",
            "c5ad.12xlarge",
            "c5ad.16xlarge",
            "c5ad.24xlarge",
            "c5ad.2xlarge",
            "c5ad.4xlarge",
            "c5ad.8xlarge",
            "c5ad.large",
            "c5ad.xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.large",
            "c5d.metal",
            "c5d.xlarge",
            "c5n.18xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.large",
            "c5n.metal",
            "c5n.xlarge",
            "c6a.12xlarge",
            "c6a.16xlarge",
            "c6a.24xlarge",
            "c6a.2xlarge",
            "c6a.32xlarge",
            "c6a.48xlarge",
            "c6a.4xlarge",
            "c6a.8xlarge",
            "c6a.large",
            "c6a.metal",
            "c6a.xlarge",
            "c6g.12xlarge",
            "c6g.16xlarge",
            "c6g.2xlarge",
            "c6g.4xlarge",
            "c6g.8xlarge",
            "c6g.large",
            "c6g.medium",
            "c6g.metal",
            "c6g.xlarge",
            "c6gd.12xlarge",
            "c6gd.16xlarge",
            "c6gd.2xlarge",
            "c6gd.4xlarge",
            "c6gd.8xlarge",
            "c6gd.large",
            "c6gd.medium",
            "c6gd.metal",
            "c6gd.xlarge",
            "c6gn.12xlarge",
            "c6gn.16xlarge",
            "c6gn.2xlarge",
            "c6gn.4xlarge",
            "c6gn.8xlarge",
            "c6gn.large",
            "c6gn.medium",
            "c6gn.xlarge",
            "c6i.12xlarge",
            "c6i.16xlarge",
            "c6i.24xlarge",
            "c6i.2xlarge",
            "c6i.32xlarge",
            "c6i.4xlarge",
            "c6i.8xlarge",
            "c6i.large",
            "c6i.metal",
            "c6i.xlarge",
            "c6id.12xlarge",
            "c6id.16xlarge",
            "c6id.24xlarge",
            "c6id.2xlarge",
            "c6id.32xlarge",
            "c6id.4xlarge",
            "c6id.8xlarge",
            "c6id.large",
            "c6id.metal",
            "c6id.xlarge",
            "c6in.12xlarge",
            "c6in.16xlarge",
            "c6in.24xlarge",
            "c6in.2xlarge",
            "c6in.32xlarge",
            "c6in.4xlarge",
            "c6in.8xlarge",
            "c6in.large",
            "c6in.xlarge",
            "c7g.12xlarge",
            "c7g.16xlarge",
            "c7g.2xlarge",
            "c7g.4xlarge",
            "c7g.8xlarge",
            "c7g.large",
            "c7g.medium",
            "c7g.xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "cg1.4xlarge",
            "cr1.8xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "d2.xlarge",
            "d3.2xlarge",
            "d3.4xlarge",
            "d3.8xlarge",
            "d3.xlarge",
            "d3en.12xlarge",
            "d3en.2xlarge",
            "d3en.4xlarge",
            "d3en.6xlarge",
            "d3en.8xlarge",
            "d3en.xlarge",
            "dl1.24xlarge",
            "f1.16xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.16xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3s.xlarge",
            "g4ad.16xlarge",
            "g4ad.2xlarge",
            "g4ad.4xlarge",
            "g4ad.8xlarge",
            "g4ad.xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.metal",
            "g4dn.xlarge",
            "g5.12xlarge",
            "g5.16xlarge",
            "g5.24xlarge",
            "g5.2xlarge",
            "g5.48xlarge",
            "g5.4xlarge",
            "g5.8xlarge",
            "g5.xlarge",
            "g5g.16xlarge",
            "g5g.2xlarge",
            "g5g.4xlarge",
            "g5g.8xlarge",
            "g5g.metal",
            "g5g.xlarge",
            "h1.16xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "hi1.4xlarge",
            "hpc6a.48xlarge",
            "hpc6id.32xlarge",
            "hs1.8xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i2.xlarge",
            "i3.16xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.large",
            "i3.metal",
            "i3.xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.large",
            "i3en.metal",
            "i3en.xlarge",
            "i4i.16xlarge",
            "i4i.2xlarge",
            "i4i.32xlarge",
            "i4i.4xlarge",
            "i4i.8xlarge",
            "i4i.large",
            "i4i.metal",
            "i4i.xlarge",
            "im4gn.16xlarge",
            "im4gn.2xlarge",
            "im4gn.4xlarge",
            "im4gn.8xlarge",
            "im4gn.large",
            "im4gn.xlarge",
            "inf1.24xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.xlarge",
            "is4gen.2xlarge",
            "is4gen.4xlarge",
            "is4gen.8xlarge",
            "is4gen.large",
            "is4gen.medium",
            "is4gen.xlarge",
            "m1.large",
            "m1.medium",
            "m1.small",
            "m1.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "m2.xlarge",
            "m3.2xlarge",
            "m3.large",
            "m3.medium",
            "m3.xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.large",
            "m4.xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.large",
            "m5.metal",
            "m5.xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.large",
            "m5a.xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.large",
            "m5ad.xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.large",
            "m5d.metal",
            "m5d.xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.large",
            "m5dn.metal",
            "m5dn.xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.large",
            "m5n.metal",
            "m5n.xlarge",
            "m5zn.12xlarge",
            "m5zn.2xlarge",
            "m5zn.3xlarge",
            "m5zn.6xlarge",
            "m5zn.large",
            "m5zn.metal",
            "m5zn.xlarge",
            "m6a.12xlarge",
            "m6a.16xlarge",
            "m6a.24xlarge",
            "m6a.2xlarge",
            "m6a.32xlarge",
            "m6a.48xlarge",
            "m6a.4xlarge",
            "m6a.8xlarge",
            "m6a.large",
            "m6a.metal",
            "m6a.xlarge",
            "m6g.12xlarge",
            "m6g.16xlarge",
            "m6g.2xlarge",
            "m6g.4xlarge",
            "m6g.8xlarge",
            "m6g.large",
            "m6g.medium",
            "m6g.metal",
            "m6g.xlarge",
            "m6gd.12xlarge",
            "m6gd.16xlarge",
            "m6gd.2xlarge",
            "m6gd.4xlarge",
            "m6gd.8xlarge",
            "m6gd.large",
            "m6gd.medium",
            "m6gd.metal",
            "m6gd.xlarge",
            "m6i.12xlarge",
            "m6i.16xlarge",
            "m6i.24xlarge",
            "m6i.2xlarge",
            "m6i.32xlarge",
            "m6i.4xlarge",
            "m6i.8xlarge",
            "m6i.large",
            "m6i.metal",
            "m6i.xlarge",
            "m6id.12xlarge",
            "m6id.16xlarge",
            "m6id.24xlarge",
            "m6id.2xlarge",
            "m6id.32xlarge",
            "m6id.4xlarge",
            "m6id.8xlarge",
            "m6id.large",
            "m6id.metal",
            "m6id.xlarge",
            "m6idn.12xlarge",
            "m6idn.16xlarge",
            "m6idn.24xlarge",
            "m6idn.2xlarge",
            "m6idn.32xlarge",
            "m6idn.4xlarge",
            "m6idn.8xlarge",
            "m6idn.large",
            "m6idn.xlarge",
            "m6in.12xlarge",
            "m6in.16xlarge",
            "m6in.24xlarge",
            "m6in.2xlarge",
            "m6in.32xlarge",
            "m6in.4xlarge",
            "m6in.8xlarge",
            "m6in.large",
            "m6in.xlarge",
            "mac1.metal",
            "mac2.metal",
            "p2.16xlarge",
            "p2.8xlarge",
            "p2.xlarge",
            "p3.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3dn.24xlarge",
            "p4d.24xlarge",
            "p4de.24xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r4.16xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.large",
            "r5.metal",
            "r5.xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.large",
            "r5a.xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.large",
            "r5ad.xlarge",
            "r5b.12xlarge",
            "r5b.16xlarge",
            "r5b.24xlarge",
            "r5b.2xlarge",
            "r5b.4xlarge",
            "r5b.8xlarge",
            "r5b.large",
            "r5b.metal",
            "r5b.xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.large",
            "r5d.metal",
            "r5d.xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.large",
            "r5dn.metal",
            "r5dn.xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.large",
            "r5n.metal",
            "r5n.xlarge",
            "r6a.12xlarge",
            "r6a.16xlarge",
            "r6a.24xlarge",
            "r6a.2xlarge",
            "r6a.32xlarge",
            "r6a.48xlarge",
            "r6a.4xlarge",
            "r6a.8xlarge",
            "r6a.large",
            "r6a.metal",
            "r6a.xlarge",
            "r6g.12xlarge",
            "r6g.16xlarge",
            "r6g.2xlarge",
            "r6g.4xlarge",
            "r6g.8xlarge",
            "r6g.large",
            "r6g.medium",
            "r6g.metal",
            "r6g.xlarge",
            "r6gd.12xlarge",
            "r6gd.16xlarge",
            "r6gd.2xlarge",
            "r6gd.4xlarge",
            "r6gd.8xlarge",
            "r6gd.large",
            "r6gd.medium",
            "r6gd.metal",
            "r6gd.xlarge",
            "r6i.12xlarge",
            "r6i.16xlarge",
            "r6i.24xlarge",
            "r6i.2xlarge",
            "r6i.32xlarge",
            "r6i.4xlarge",
            "r6i.8xlarge",
            "r6i.large",
            "r6i.metal",
            "r6i.xlarge",
            "r6id.12xlarge",
            "r6id.16xlarge",
            "r6id.24xlarge",
            "r6id.2xlarge",
            "r6id.32xlarge",
            "r6id.4xlarge",
            "r6id.8xlarge",
            "r6id.large",
            "r6id.metal",
            "r6id.xlarge",
            "r6idn.12xlarge",
            "r6idn.16xlarge",
            "r6idn.24xlarge",
            "r6idn.2xlarge",
            "r6idn.32xlarge",
            "r6idn.4xlarge",
            "r6idn.8xlarge",
            "r6idn.large",
            "r6idn.xlarge",
            "r6in.12xlarge",
            "r6in.16xlarge",
            "r6in.24xlarge",
            "r6in.2xlarge",
            "r6in.32xlarge",
            "r6in.4xlarge",
            "r6in.8xlarge",
            "r6in.large",
            "r6in.xlarge",
            "t1.micro",
            "t2.2xlarge",
            "t2.large",
            "t2.medium",
            "t2.micro",
            "t2.nano",
            "t2.small",
            "t2.xlarge",
            "t3.2xlarge",
            "t3.large",
            "t3.medium",
            "t3.micro",
            "t3.nano",
            "t3.small",
            "t3.xlarge",
            "t3a.2xlarge",
            "t3a.large",
            "t3a.medium",
            "t3a.micro",
            "t3a.nano",
            "t3a.small",
            "t3a.xlarge",
            "t4g.2xlarge",
            "t4g.large",
            "t4g.medium",
            "t4g.micro",
            "t4g.nano",
            "t4g.small",
            "t4g.xlarge",
            "trn1.2xlarge",
            "trn1.32xlarge",
            "u-12tb1.112xlarge",
            "u-12tb1.metal",
            "u-18tb1.112xlarge",
            "u-18tb1.metal",
            "u-24tb1.112xlarge",
            "u-24tb1.metal",
            "u-3tb1.56xlarge",
            "u-6tb1.112xlarge",
            "u-6tb1.56xlarge",
            "u-6tb1.metal",
            "u-9tb1.112xlarge",
            "u-9tb1.metal",
            "vt1.24xlarge",
            "vt1.3xlarge",
            "vt1.6xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.16xlarge",
            "x1e.2xlarge",
            "x1e.32xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.xlarge",
            "x2gd.12xlarge",
            "x2gd.16xlarge",
            "x2gd.2xlarge",
            "x2gd.4xlarge",
            "x2gd.8xlarge",
            "x2gd.large",
            "x2gd.medium",
            "x2gd.metal",
            "x2gd.xlarge",
            "x2idn.16xlarge",
            "x2idn.24xlarge",
            "x2idn.32xlarge",
            "x2idn.metal",
            "x2iedn.16xlarge",
            "x2iedn.24xlarge",
            "x2iedn.2xlarge",
            "x2iedn.32xlarge",
            "x2iedn.4xlarge",
            "x2iedn.8xlarge",
            "x2iedn.metal",
            "x2iedn.xlarge",
            "x2iezn.12xlarge",
            "x2iezn.2xlarge",
            "x2iezn.4xlarge",
            "x2iezn.6xlarge",
            "x2iezn.8xlarge",
            "x2iezn.metal",
            "z1d.12xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.large",
            "z1d.metal",
            "z1d.xlarge",
        ]
    ] = Field(default=None, alias="InstanceType")
    instance_platform: Optional[
        Literal[
            "Linux with SQL Server Enterprise",
            "Linux with SQL Server Standard",
            "Linux with SQL Server Web",
            "Linux/UNIX",
            "RHEL with HA",
            "RHEL with HA and SQL Server Enterprise",
            "RHEL with HA and SQL Server Standard",
            "RHEL with SQL Server Enterprise",
            "RHEL with SQL Server Standard",
            "RHEL with SQL Server Web",
            "Red Hat Enterprise Linux",
            "SUSE Linux",
            "Windows",
            "Windows with SQL Server",
            "Windows with SQL Server Enterprise",
            "Windows with SQL Server Standard",
            "Windows with SQL Server Web",
        ]
    ] = Field(default=None, alias="InstancePlatform")
    weight: Optional[float] = Field(default=None, alias="Weight")
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    availability_zone_id: Optional[str] = Field(
        default=None, alias="AvailabilityZoneId"
    )
    ebs_optimized: Optional[bool] = Field(default=None, alias="EbsOptimized")
    priority: Optional[int] = Field(default=None, alias="Priority")


class CreateClientVpnRouteRequestModel(BaseModel):
    client_vpn_endpoint_id: str = Field(alias="ClientVpnEndpointId")
    destination_cidr_block: str = Field(alias="DestinationCidrBlock")
    target_vpc_subnet_id: str = Field(alias="TargetVpcSubnetId")
    description: Optional[str] = Field(default=None, alias="Description")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateCoipCidrRequestModel(BaseModel):
    cidr: str = Field(alias="Cidr")
    coip_pool_id: str = Field(alias="CoipPoolId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateDefaultSubnetRequestModel(BaseModel):
    availability_zone: str = Field(alias="AvailabilityZone")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    ipv6_native: Optional[bool] = Field(default=None, alias="Ipv6Native")


class CreateDefaultVpcRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class NewDhcpConfigurationModel(BaseModel):
    key: Optional[str] = Field(default=None, alias="Key")
    values: Optional[Sequence[str]] = Field(default=None, alias="Values")


class TargetCapacitySpecificationRequestModel(BaseModel):
    total_target_capacity: int = Field(alias="TotalTargetCapacity")
    on_demand_target_capacity: Optional[int] = Field(
        default=None, alias="OnDemandTargetCapacity"
    )
    spot_target_capacity: Optional[int] = Field(
        default=None, alias="SpotTargetCapacity"
    )
    default_target_capacity_type: Optional[Literal["on-demand", "spot"]] = Field(
        default=None, alias="DefaultTargetCapacityType"
    )
    target_capacity_unit_type: Optional[Literal["memory-mib", "units", "vcpu"]] = Field(
        default=None, alias="TargetCapacityUnitType"
    )


class DestinationOptionsRequestModel(BaseModel):
    file_format: Optional[Literal["parquet", "plain-text"]] = Field(
        default=None, alias="FileFormat"
    )
    hive_compatible_partitions: Optional[bool] = Field(
        default=None, alias="HiveCompatiblePartitions"
    )
    per_hour_partition: Optional[bool] = Field(default=None, alias="PerHourPartition")


class StorageLocationModel(BaseModel):
    bucket: Optional[str] = Field(default=None, alias="Bucket")
    key: Optional[str] = Field(default=None, alias="Key")


class InstanceEventWindowTimeRangeRequestModel(BaseModel):
    start_week_day: Optional[
        Literal[
            "friday", "monday", "saturday", "sunday", "thursday", "tuesday", "wednesday"
        ]
    ] = Field(default=None, alias="StartWeekDay")
    start_hour: Optional[int] = Field(default=None, alias="StartHour")
    end_week_day: Optional[
        Literal[
            "friday", "monday", "saturday", "sunday", "thursday", "tuesday", "wednesday"
        ]
    ] = Field(default=None, alias="EndWeekDay")
    end_hour: Optional[int] = Field(default=None, alias="EndHour")


class ExportToS3TaskSpecificationModel(BaseModel):
    container_format: Optional[Literal["ova"]] = Field(
        default=None, alias="ContainerFormat"
    )
    disk_image_format: Optional[Literal["RAW", "VHD", "VMDK"]] = Field(
        default=None, alias="DiskImageFormat"
    )
    s3_bucket: Optional[str] = Field(default=None, alias="S3Bucket")
    s3_prefix: Optional[str] = Field(default=None, alias="S3Prefix")


class RequestIpamResourceTagModel(BaseModel):
    key: Optional[str] = Field(default=None, alias="Key")
    value: Optional[str] = Field(default=None, alias="Value")


class CreateLocalGatewayRouteRequestModel(BaseModel):
    local_gateway_route_table_id: str = Field(alias="LocalGatewayRouteTableId")
    destination_cidr_block: Optional[str] = Field(
        default=None, alias="DestinationCidrBlock"
    )
    local_gateway_virtual_interface_group_id: Optional[str] = Field(
        default=None, alias="LocalGatewayVirtualInterfaceGroupId"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    network_interface_id: Optional[str] = Field(
        default=None, alias="NetworkInterfaceId"
    )
    destination_prefix_list_id: Optional[str] = Field(
        default=None, alias="DestinationPrefixListId"
    )


class LocalGatewayRouteModel(BaseModel):
    destination_cidr_block: Optional[str] = Field(
        default=None, alias="DestinationCidrBlock"
    )
    local_gateway_virtual_interface_group_id: Optional[str] = Field(
        default=None, alias="LocalGatewayVirtualInterfaceGroupId"
    )
    type: Optional[Literal["propagated", "static"]] = Field(default=None, alias="Type")
    state: Optional[
        Literal["active", "blackhole", "deleted", "deleting", "pending"]
    ] = Field(default=None, alias="State")
    local_gateway_route_table_id: Optional[str] = Field(
        default=None, alias="LocalGatewayRouteTableId"
    )
    local_gateway_route_table_arn: Optional[str] = Field(
        default=None, alias="LocalGatewayRouteTableArn"
    )
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    subnet_id: Optional[str] = Field(default=None, alias="SubnetId")
    coip_pool_id: Optional[str] = Field(default=None, alias="CoipPoolId")
    network_interface_id: Optional[str] = Field(
        default=None, alias="NetworkInterfaceId"
    )
    destination_prefix_list_id: Optional[str] = Field(
        default=None, alias="DestinationPrefixListId"
    )


class IcmpTypeCodeModel(BaseModel):
    code: Optional[int] = Field(default=None, alias="Code")
    type: Optional[int] = Field(default=None, alias="Type")


class CreateNetworkInterfacePermissionRequestModel(BaseModel):
    network_interface_id: str = Field(alias="NetworkInterfaceId")
    permission: Literal["EIP-ASSOCIATE", "INSTANCE-ATTACH"] = Field(alias="Permission")
    aws_account_id: Optional[str] = Field(default=None, alias="AwsAccountId")
    aws_service: Optional[str] = Field(default=None, alias="AwsService")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class InstanceIpv6AddressModel(BaseModel):
    ipv6_address: Optional[str] = Field(default=None, alias="Ipv6Address")


class Ipv4PrefixSpecificationRequestModel(BaseModel):
    ipv4_prefix: Optional[str] = Field(default=None, alias="Ipv4Prefix")


class Ipv6PrefixSpecificationRequestModel(BaseModel):
    ipv6_prefix: Optional[str] = Field(default=None, alias="Ipv6Prefix")


class PrivateIpAddressSpecificationModel(BaseModel):
    primary: Optional[bool] = Field(default=None, alias="Primary")
    private_ip_address: Optional[str] = Field(default=None, alias="PrivateIpAddress")


class PriceScheduleSpecificationModel(BaseModel):
    currency_code: Optional[Literal["USD"]] = Field(default=None, alias="CurrencyCode")
    price: Optional[float] = Field(default=None, alias="Price")
    term: Optional[int] = Field(default=None, alias="Term")


class CreateRouteRequestModel(BaseModel):
    route_table_id: str = Field(alias="RouteTableId")
    destination_cidr_block: Optional[str] = Field(
        default=None, alias="DestinationCidrBlock"
    )
    destination_ipv6_cidr_block: Optional[str] = Field(
        default=None, alias="DestinationIpv6CidrBlock"
    )
    destination_prefix_list_id: Optional[str] = Field(
        default=None, alias="DestinationPrefixListId"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    vpc_endpoint_id: Optional[str] = Field(default=None, alias="VpcEndpointId")
    egress_only_internet_gateway_id: Optional[str] = Field(
        default=None, alias="EgressOnlyInternetGatewayId"
    )
    gateway_id: Optional[str] = Field(default=None, alias="GatewayId")
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    nat_gateway_id: Optional[str] = Field(default=None, alias="NatGatewayId")
    transit_gateway_id: Optional[str] = Field(default=None, alias="TransitGatewayId")
    local_gateway_id: Optional[str] = Field(default=None, alias="LocalGatewayId")
    carrier_gateway_id: Optional[str] = Field(default=None, alias="CarrierGatewayId")
    network_interface_id: Optional[str] = Field(
        default=None, alias="NetworkInterfaceId"
    )
    vpc_peering_connection_id: Optional[str] = Field(
        default=None, alias="VpcPeeringConnectionId"
    )
    core_network_arn: Optional[str] = Field(default=None, alias="CoreNetworkArn")


class CreateRouteRequestRouteTableCreateRouteModel(BaseModel):
    destination_cidr_block: Optional[str] = Field(
        default=None, alias="DestinationCidrBlock"
    )
    destination_ipv6_cidr_block: Optional[str] = Field(
        default=None, alias="DestinationIpv6CidrBlock"
    )
    destination_prefix_list_id: Optional[str] = Field(
        default=None, alias="DestinationPrefixListId"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    vpc_endpoint_id: Optional[str] = Field(default=None, alias="VpcEndpointId")
    egress_only_internet_gateway_id: Optional[str] = Field(
        default=None, alias="EgressOnlyInternetGatewayId"
    )
    gateway_id: Optional[str] = Field(default=None, alias="GatewayId")
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    nat_gateway_id: Optional[str] = Field(default=None, alias="NatGatewayId")
    transit_gateway_id: Optional[str] = Field(default=None, alias="TransitGatewayId")
    local_gateway_id: Optional[str] = Field(default=None, alias="LocalGatewayId")
    carrier_gateway_id: Optional[str] = Field(default=None, alias="CarrierGatewayId")
    network_interface_id: Optional[str] = Field(
        default=None, alias="NetworkInterfaceId"
    )
    vpc_peering_connection_id: Optional[str] = Field(
        default=None, alias="VpcPeeringConnectionId"
    )
    core_network_arn: Optional[str] = Field(default=None, alias="CoreNetworkArn")


class InstanceSpecificationModel(BaseModel):
    instance_id: str = Field(alias="InstanceId")
    exclude_boot_volume: Optional[bool] = Field(default=None, alias="ExcludeBootVolume")
    exclude_data_volume_ids: Optional[Sequence[str]] = Field(
        default=None, alias="ExcludeDataVolumeIds"
    )


class CreateSpotDatafeedSubscriptionRequestModel(BaseModel):
    bucket: str = Field(alias="Bucket")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    prefix: Optional[str] = Field(default=None, alias="Prefix")


class S3ObjectTagModel(BaseModel):
    key: Optional[str] = Field(default=None, alias="Key")
    value: Optional[str] = Field(default=None, alias="Value")


class TrafficMirrorPortRangeRequestModel(BaseModel):
    from_port: Optional[int] = Field(default=None, alias="FromPort")
    to_port: Optional[int] = Field(default=None, alias="ToPort")


class TransitGatewayConnectRequestBgpOptionsModel(BaseModel):
    peer_asn: Optional[int] = Field(default=None, alias="PeerAsn")


class CreateTransitGatewayConnectRequestOptionsModel(BaseModel):
    protocol: Literal["gre"] = Field(alias="Protocol")


class CreateTransitGatewayMulticastDomainRequestOptionsModel(BaseModel):
    igmpv2_support: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="Igmpv2Support"
    )
    static_sources_support: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="StaticSourcesSupport"
    )
    auto_accept_shared_associations: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="AutoAcceptSharedAssociations"
    )


class CreateTransitGatewayPeeringAttachmentRequestOptionsModel(BaseModel):
    dynamic_routing: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="DynamicRouting"
    )


class CreateTransitGatewayPrefixListReferenceRequestModel(BaseModel):
    transit_gateway_route_table_id: str = Field(alias="TransitGatewayRouteTableId")
    prefix_list_id: str = Field(alias="PrefixListId")
    transit_gateway_attachment_id: Optional[str] = Field(
        default=None, alias="TransitGatewayAttachmentId"
    )
    blackhole: Optional[bool] = Field(default=None, alias="Blackhole")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class TransitGatewayRequestOptionsModel(BaseModel):
    amazon_side_asn: Optional[int] = Field(default=None, alias="AmazonSideAsn")
    auto_accept_shared_attachments: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="AutoAcceptSharedAttachments"
    )
    default_route_table_association: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="DefaultRouteTableAssociation"
    )
    default_route_table_propagation: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="DefaultRouteTablePropagation"
    )
    vpn_ecmp_support: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="VpnEcmpSupport"
    )
    dns_support: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="DnsSupport"
    )
    multicast_support: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="MulticastSupport"
    )
    transit_gateway_cidr_blocks: Optional[Sequence[str]] = Field(
        default=None, alias="TransitGatewayCidrBlocks"
    )


class CreateTransitGatewayRouteRequestModel(BaseModel):
    destination_cidr_block: str = Field(alias="DestinationCidrBlock")
    transit_gateway_route_table_id: str = Field(alias="TransitGatewayRouteTableId")
    transit_gateway_attachment_id: Optional[str] = Field(
        default=None, alias="TransitGatewayAttachmentId"
    )
    blackhole: Optional[bool] = Field(default=None, alias="Blackhole")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateTransitGatewayVpcAttachmentRequestOptionsModel(BaseModel):
    dns_support: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="DnsSupport"
    )
    ipv6_support: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="Ipv6Support"
    )
    appliance_mode_support: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="ApplianceModeSupport"
    )


class CreateVerifiedAccessEndpointEniOptionsModel(BaseModel):
    network_interface_id: Optional[str] = Field(
        default=None, alias="NetworkInterfaceId"
    )
    protocol: Optional[Literal["http", "https"]] = Field(default=None, alias="Protocol")
    port: Optional[int] = Field(default=None, alias="Port")


class CreateVerifiedAccessEndpointLoadBalancerOptionsModel(BaseModel):
    protocol: Optional[Literal["http", "https"]] = Field(default=None, alias="Protocol")
    port: Optional[int] = Field(default=None, alias="Port")
    load_balancer_arn: Optional[str] = Field(default=None, alias="LoadBalancerArn")
    subnet_ids: Optional[Sequence[str]] = Field(default=None, alias="SubnetIds")


class CreateVerifiedAccessTrustProviderDeviceOptionsModel(BaseModel):
    tenant_id: Optional[str] = Field(default=None, alias="TenantId")


class CreateVerifiedAccessTrustProviderOidcOptionsModel(BaseModel):
    issuer: Optional[str] = Field(default=None, alias="Issuer")
    authorization_endpoint: Optional[str] = Field(
        default=None, alias="AuthorizationEndpoint"
    )
    token_endpoint: Optional[str] = Field(default=None, alias="TokenEndpoint")
    user_info_endpoint: Optional[str] = Field(default=None, alias="UserInfoEndpoint")
    client_id: Optional[str] = Field(default=None, alias="ClientId")
    client_secret: Optional[str] = Field(default=None, alias="ClientSecret")
    scope: Optional[str] = Field(default=None, alias="Scope")


class CreateVolumePermissionModel(BaseModel):
    group: Optional[Literal["all"]] = Field(default=None, alias="Group")
    user_id: Optional[str] = Field(default=None, alias="UserId")


class CreateVpcEndpointConnectionNotificationRequestModel(BaseModel):
    connection_notification_arn: str = Field(alias="ConnectionNotificationArn")
    connection_events: Sequence[str] = Field(alias="ConnectionEvents")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    service_id: Optional[str] = Field(default=None, alias="ServiceId")
    vpc_endpoint_id: Optional[str] = Field(default=None, alias="VpcEndpointId")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")


class DnsOptionsSpecificationModel(BaseModel):
    dns_record_ip_type: Optional[
        Literal["dualstack", "ipv4", "ipv6", "service-defined"]
    ] = Field(default=None, alias="DnsRecordIpType")


class CreateVpnConnectionRouteRequestModel(BaseModel):
    destination_cidr_block: str = Field(alias="DestinationCidrBlock")
    vpn_connection_id: str = Field(alias="VpnConnectionId")


class CreditSpecificationRequestModel(BaseModel):
    cpu_credits: str = Field(alias="CpuCredits")


class CreditSpecificationModel(BaseModel):
    cpu_credits: Optional[str] = Field(default=None, alias="CpuCredits")


class DataQueryModel(BaseModel):
    id: Optional[str] = Field(default=None, alias="Id")
    source: Optional[str] = Field(default=None, alias="Source")
    destination: Optional[str] = Field(default=None, alias="Destination")
    metric: Optional[Literal["aggregate-latency"]] = Field(default=None, alias="Metric")
    statistic: Optional[Literal["p50"]] = Field(default=None, alias="Statistic")
    period: Optional[
        Literal[
            "fifteen-minutes",
            "five-minutes",
            "one-day",
            "one-hour",
            "one-week",
            "three-hours",
        ]
    ] = Field(default=None, alias="Period")


class MetricPointModel(BaseModel):
    start_date: Optional[datetime] = Field(default=None, alias="StartDate")
    end_date: Optional[datetime] = Field(default=None, alias="EndDate")
    value: Optional[float] = Field(default=None, alias="Value")
    status: Optional[str] = Field(default=None, alias="Status")


class DeleteCarrierGatewayRequestModel(BaseModel):
    carrier_gateway_id: str = Field(alias="CarrierGatewayId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteClientVpnEndpointRequestModel(BaseModel):
    client_vpn_endpoint_id: str = Field(alias="ClientVpnEndpointId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteClientVpnRouteRequestModel(BaseModel):
    client_vpn_endpoint_id: str = Field(alias="ClientVpnEndpointId")
    destination_cidr_block: str = Field(alias="DestinationCidrBlock")
    target_vpc_subnet_id: Optional[str] = Field(default=None, alias="TargetVpcSubnetId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteCoipCidrRequestModel(BaseModel):
    cidr: str = Field(alias="Cidr")
    coip_pool_id: str = Field(alias="CoipPoolId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteCoipPoolRequestModel(BaseModel):
    coip_pool_id: str = Field(alias="CoipPoolId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteCustomerGatewayRequestModel(BaseModel):
    customer_gateway_id: str = Field(alias="CustomerGatewayId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteDhcpOptionsRequestDhcpOptionsDeleteModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteDhcpOptionsRequestModel(BaseModel):
    dhcp_options_id: str = Field(alias="DhcpOptionsId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteEgressOnlyInternetGatewayRequestModel(BaseModel):
    egress_only_internet_gateway_id: str = Field(alias="EgressOnlyInternetGatewayId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteFleetErrorModel(BaseModel):
    code: Optional[
        Literal[
            "fleetIdDoesNotExist",
            "fleetIdMalformed",
            "fleetNotInDeletableState",
            "unexpectedError",
        ]
    ] = Field(default=None, alias="Code")
    message: Optional[str] = Field(default=None, alias="Message")


class DeleteFleetSuccessItemModel(BaseModel):
    current_fleet_state: Optional[
        Literal[
            "active",
            "deleted",
            "deleted_running",
            "deleted_terminating",
            "failed",
            "modifying",
            "submitted",
        ]
    ] = Field(default=None, alias="CurrentFleetState")
    previous_fleet_state: Optional[
        Literal[
            "active",
            "deleted",
            "deleted_running",
            "deleted_terminating",
            "failed",
            "modifying",
            "submitted",
        ]
    ] = Field(default=None, alias="PreviousFleetState")
    fleet_id: Optional[str] = Field(default=None, alias="FleetId")


class DeleteFleetsRequestModel(BaseModel):
    fleet_ids: Sequence[str] = Field(alias="FleetIds")
    terminate_instances: bool = Field(alias="TerminateInstances")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteFlowLogsRequestModel(BaseModel):
    flow_log_ids: Sequence[str] = Field(alias="FlowLogIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteFpgaImageRequestModel(BaseModel):
    fpga_image_id: str = Field(alias="FpgaImageId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteInstanceEventWindowRequestModel(BaseModel):
    instance_event_window_id: str = Field(alias="InstanceEventWindowId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    force_delete: Optional[bool] = Field(default=None, alias="ForceDelete")


class InstanceEventWindowStateChangeModel(BaseModel):
    instance_event_window_id: Optional[str] = Field(
        default=None, alias="InstanceEventWindowId"
    )
    state: Optional[Literal["active", "creating", "deleted", "deleting"]] = Field(
        default=None, alias="State"
    )


class DeleteInternetGatewayRequestInternetGatewayDeleteModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteInternetGatewayRequestModel(BaseModel):
    internet_gateway_id: str = Field(alias="InternetGatewayId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteIpamPoolRequestModel(BaseModel):
    ipam_pool_id: str = Field(alias="IpamPoolId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteIpamRequestModel(BaseModel):
    ipam_id: str = Field(alias="IpamId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    cascade: Optional[bool] = Field(default=None, alias="Cascade")


class DeleteIpamResourceDiscoveryRequestModel(BaseModel):
    ipam_resource_discovery_id: str = Field(alias="IpamResourceDiscoveryId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteIpamScopeRequestModel(BaseModel):
    ipam_scope_id: str = Field(alias="IpamScopeId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteKeyPairRequestKeyPairDeleteModel(BaseModel):
    key_pair_id: Optional[str] = Field(default=None, alias="KeyPairId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteKeyPairRequestKeyPairInfoDeleteModel(BaseModel):
    key_pair_id: Optional[str] = Field(default=None, alias="KeyPairId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteKeyPairRequestModel(BaseModel):
    key_name: Optional[str] = Field(default=None, alias="KeyName")
    key_pair_id: Optional[str] = Field(default=None, alias="KeyPairId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteLaunchTemplateRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    launch_template_id: Optional[str] = Field(default=None, alias="LaunchTemplateId")
    launch_template_name: Optional[str] = Field(
        default=None, alias="LaunchTemplateName"
    )


class DeleteLaunchTemplateVersionsRequestModel(BaseModel):
    versions: Sequence[str] = Field(alias="Versions")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    launch_template_id: Optional[str] = Field(default=None, alias="LaunchTemplateId")
    launch_template_name: Optional[str] = Field(
        default=None, alias="LaunchTemplateName"
    )


class ResponseErrorModel(BaseModel):
    code: Optional[
        Literal[
            "launchTemplateIdDoesNotExist",
            "launchTemplateIdMalformed",
            "launchTemplateNameDoesNotExist",
            "launchTemplateNameMalformed",
            "launchTemplateVersionDoesNotExist",
            "unexpectedError",
        ]
    ] = Field(default=None, alias="Code")
    message: Optional[str] = Field(default=None, alias="Message")


class DeleteLaunchTemplateVersionsResponseSuccessItemModel(BaseModel):
    launch_template_id: Optional[str] = Field(default=None, alias="LaunchTemplateId")
    launch_template_name: Optional[str] = Field(
        default=None, alias="LaunchTemplateName"
    )
    version_number: Optional[int] = Field(default=None, alias="VersionNumber")


class DeleteLocalGatewayRouteRequestModel(BaseModel):
    local_gateway_route_table_id: str = Field(alias="LocalGatewayRouteTableId")
    destination_cidr_block: Optional[str] = Field(
        default=None, alias="DestinationCidrBlock"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    destination_prefix_list_id: Optional[str] = Field(
        default=None, alias="DestinationPrefixListId"
    )


class DeleteLocalGatewayRouteTableRequestModel(BaseModel):
    local_gateway_route_table_id: str = Field(alias="LocalGatewayRouteTableId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequestModel(
    BaseModel
):
    local_gateway_route_table_virtual_interface_group_association_id: str = Field(
        alias="LocalGatewayRouteTableVirtualInterfaceGroupAssociationId"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteLocalGatewayRouteTableVpcAssociationRequestModel(BaseModel):
    local_gateway_route_table_vpc_association_id: str = Field(
        alias="LocalGatewayRouteTableVpcAssociationId"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteManagedPrefixListRequestModel(BaseModel):
    prefix_list_id: str = Field(alias="PrefixListId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteNatGatewayRequestModel(BaseModel):
    nat_gateway_id: str = Field(alias="NatGatewayId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteNetworkAclEntryRequestNetworkAclDeleteEntryModel(BaseModel):
    egress: bool = Field(alias="Egress")
    rule_number: int = Field(alias="RuleNumber")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteNetworkAclEntryRequestModel(BaseModel):
    egress: bool = Field(alias="Egress")
    network_acl_id: str = Field(alias="NetworkAclId")
    rule_number: int = Field(alias="RuleNumber")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteNetworkAclRequestNetworkAclDeleteModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteNetworkAclRequestModel(BaseModel):
    network_acl_id: str = Field(alias="NetworkAclId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteNetworkInsightsAccessScopeAnalysisRequestModel(BaseModel):
    network_insights_access_scope_analysis_id: str = Field(
        alias="NetworkInsightsAccessScopeAnalysisId"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteNetworkInsightsAccessScopeRequestModel(BaseModel):
    network_insights_access_scope_id: str = Field(alias="NetworkInsightsAccessScopeId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteNetworkInsightsAnalysisRequestModel(BaseModel):
    network_insights_analysis_id: str = Field(alias="NetworkInsightsAnalysisId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteNetworkInsightsPathRequestModel(BaseModel):
    network_insights_path_id: str = Field(alias="NetworkInsightsPathId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteNetworkInterfacePermissionRequestModel(BaseModel):
    network_interface_permission_id: str = Field(alias="NetworkInterfacePermissionId")
    force: Optional[bool] = Field(default=None, alias="Force")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteNetworkInterfaceRequestNetworkInterfaceDeleteModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteNetworkInterfaceRequestModel(BaseModel):
    network_interface_id: str = Field(alias="NetworkInterfaceId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeletePlacementGroupRequestPlacementGroupDeleteModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeletePlacementGroupRequestModel(BaseModel):
    group_name: str = Field(alias="GroupName")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeletePublicIpv4PoolRequestModel(BaseModel):
    pool_id: str = Field(alias="PoolId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteQueuedReservedInstancesErrorModel(BaseModel):
    code: Optional[
        Literal[
            "reserved-instances-id-invalid",
            "reserved-instances-not-in-queued-state",
            "unexpected-error",
        ]
    ] = Field(default=None, alias="Code")
    message: Optional[str] = Field(default=None, alias="Message")


class DeleteQueuedReservedInstancesRequestModel(BaseModel):
    reserved_instances_ids: Sequence[str] = Field(alias="ReservedInstancesIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class SuccessfulQueuedPurchaseDeletionModel(BaseModel):
    reserved_instances_id: Optional[str] = Field(
        default=None, alias="ReservedInstancesId"
    )


class DeleteRouteRequestModel(BaseModel):
    route_table_id: str = Field(alias="RouteTableId")
    destination_cidr_block: Optional[str] = Field(
        default=None, alias="DestinationCidrBlock"
    )
    destination_ipv6_cidr_block: Optional[str] = Field(
        default=None, alias="DestinationIpv6CidrBlock"
    )
    destination_prefix_list_id: Optional[str] = Field(
        default=None, alias="DestinationPrefixListId"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteRouteRequestRouteDeleteModel(BaseModel):
    destination_ipv6_cidr_block: Optional[str] = Field(
        default=None, alias="DestinationIpv6CidrBlock"
    )
    destination_prefix_list_id: Optional[str] = Field(
        default=None, alias="DestinationPrefixListId"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteRouteTableRequestModel(BaseModel):
    route_table_id: str = Field(alias="RouteTableId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteRouteTableRequestRouteTableDeleteModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteSecurityGroupRequestModel(BaseModel):
    group_id: Optional[str] = Field(default=None, alias="GroupId")
    group_name: Optional[str] = Field(default=None, alias="GroupName")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteSecurityGroupRequestSecurityGroupDeleteModel(BaseModel):
    group_name: Optional[str] = Field(default=None, alias="GroupName")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteSnapshotRequestModel(BaseModel):
    snapshot_id: str = Field(alias="SnapshotId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteSnapshotRequestSnapshotDeleteModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteSpotDatafeedSubscriptionRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteSubnetCidrReservationRequestModel(BaseModel):
    subnet_cidr_reservation_id: str = Field(alias="SubnetCidrReservationId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteSubnetRequestModel(BaseModel):
    subnet_id: str = Field(alias="SubnetId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteSubnetRequestSubnetDeleteModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteTagsRequestTagDeleteModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteTrafficMirrorFilterRequestModel(BaseModel):
    traffic_mirror_filter_id: str = Field(alias="TrafficMirrorFilterId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteTrafficMirrorFilterRuleRequestModel(BaseModel):
    traffic_mirror_filter_rule_id: str = Field(alias="TrafficMirrorFilterRuleId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteTrafficMirrorSessionRequestModel(BaseModel):
    traffic_mirror_session_id: str = Field(alias="TrafficMirrorSessionId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteTrafficMirrorTargetRequestModel(BaseModel):
    traffic_mirror_target_id: str = Field(alias="TrafficMirrorTargetId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteTransitGatewayConnectPeerRequestModel(BaseModel):
    transit_gateway_connect_peer_id: str = Field(alias="TransitGatewayConnectPeerId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteTransitGatewayConnectRequestModel(BaseModel):
    transit_gateway_attachment_id: str = Field(alias="TransitGatewayAttachmentId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteTransitGatewayMulticastDomainRequestModel(BaseModel):
    transit_gateway_multicast_domain_id: str = Field(
        alias="TransitGatewayMulticastDomainId"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteTransitGatewayPeeringAttachmentRequestModel(BaseModel):
    transit_gateway_attachment_id: str = Field(alias="TransitGatewayAttachmentId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteTransitGatewayPolicyTableRequestModel(BaseModel):
    transit_gateway_policy_table_id: str = Field(alias="TransitGatewayPolicyTableId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteTransitGatewayPrefixListReferenceRequestModel(BaseModel):
    transit_gateway_route_table_id: str = Field(alias="TransitGatewayRouteTableId")
    prefix_list_id: str = Field(alias="PrefixListId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteTransitGatewayRequestModel(BaseModel):
    transit_gateway_id: str = Field(alias="TransitGatewayId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteTransitGatewayRouteRequestModel(BaseModel):
    transit_gateway_route_table_id: str = Field(alias="TransitGatewayRouteTableId")
    destination_cidr_block: str = Field(alias="DestinationCidrBlock")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteTransitGatewayRouteTableAnnouncementRequestModel(BaseModel):
    transit_gateway_route_table_announcement_id: str = Field(
        alias="TransitGatewayRouteTableAnnouncementId"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteTransitGatewayRouteTableRequestModel(BaseModel):
    transit_gateway_route_table_id: str = Field(alias="TransitGatewayRouteTableId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteTransitGatewayVpcAttachmentRequestModel(BaseModel):
    transit_gateway_attachment_id: str = Field(alias="TransitGatewayAttachmentId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteVerifiedAccessEndpointRequestModel(BaseModel):
    verified_access_endpoint_id: str = Field(alias="VerifiedAccessEndpointId")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteVerifiedAccessGroupRequestModel(BaseModel):
    verified_access_group_id: str = Field(alias="VerifiedAccessGroupId")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteVerifiedAccessInstanceRequestModel(BaseModel):
    verified_access_instance_id: str = Field(alias="VerifiedAccessInstanceId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")


class DeleteVerifiedAccessTrustProviderRequestModel(BaseModel):
    verified_access_trust_provider_id: str = Field(
        alias="VerifiedAccessTrustProviderId"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")


class DeleteVolumeRequestModel(BaseModel):
    volume_id: str = Field(alias="VolumeId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteVolumeRequestVolumeDeleteModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteVpcEndpointConnectionNotificationsRequestModel(BaseModel):
    connection_notification_ids: Sequence[str] = Field(
        alias="ConnectionNotificationIds"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteVpcEndpointServiceConfigurationsRequestModel(BaseModel):
    service_ids: Sequence[str] = Field(alias="ServiceIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteVpcEndpointsRequestModel(BaseModel):
    vpc_endpoint_ids: Sequence[str] = Field(alias="VpcEndpointIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteVpcPeeringConnectionRequestModel(BaseModel):
    vpc_peering_connection_id: str = Field(alias="VpcPeeringConnectionId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteVpcPeeringConnectionRequestVpcPeeringConnectionDeleteModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteVpcRequestModel(BaseModel):
    vpc_id: str = Field(alias="VpcId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteVpcRequestVpcDeleteModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteVpnConnectionRequestModel(BaseModel):
    vpn_connection_id: str = Field(alias="VpnConnectionId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeleteVpnConnectionRouteRequestModel(BaseModel):
    destination_cidr_block: str = Field(alias="DestinationCidrBlock")
    vpn_connection_id: str = Field(alias="VpnConnectionId")


class DeleteVpnGatewayRequestModel(BaseModel):
    vpn_gateway_id: str = Field(alias="VpnGatewayId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeprovisionByoipCidrRequestModel(BaseModel):
    cidr: str = Field(alias="Cidr")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeprovisionIpamPoolCidrRequestModel(BaseModel):
    ipam_pool_id: str = Field(alias="IpamPoolId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    cidr: Optional[str] = Field(default=None, alias="Cidr")


class DeprovisionPublicIpv4PoolCidrRequestModel(BaseModel):
    pool_id: str = Field(alias="PoolId")
    cidr: str = Field(alias="Cidr")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeregisterImageRequestImageDeregisterModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeregisterImageRequestModel(BaseModel):
    image_id: str = Field(alias="ImageId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeregisterInstanceTagAttributeRequestModel(BaseModel):
    include_all_tags_of_instance: Optional[bool] = Field(
        default=None, alias="IncludeAllTagsOfInstance"
    )
    instance_tag_keys: Optional[Sequence[str]] = Field(
        default=None, alias="InstanceTagKeys"
    )


class InstanceTagNotificationAttributeModel(BaseModel):
    instance_tag_keys: Optional[List[str]] = Field(
        default=None, alias="InstanceTagKeys"
    )
    include_all_tags_of_instance: Optional[bool] = Field(
        default=None, alias="IncludeAllTagsOfInstance"
    )


class DeregisterTransitGatewayMulticastGroupMembersRequestModel(BaseModel):
    transit_gateway_multicast_domain_id: Optional[str] = Field(
        default=None, alias="TransitGatewayMulticastDomainId"
    )
    group_ip_address: Optional[str] = Field(default=None, alias="GroupIpAddress")
    network_interface_ids: Optional[Sequence[str]] = Field(
        default=None, alias="NetworkInterfaceIds"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class TransitGatewayMulticastDeregisteredGroupMembersModel(BaseModel):
    transit_gateway_multicast_domain_id: Optional[str] = Field(
        default=None, alias="TransitGatewayMulticastDomainId"
    )
    deregistered_network_interface_ids: Optional[List[str]] = Field(
        default=None, alias="DeregisteredNetworkInterfaceIds"
    )
    group_ip_address: Optional[str] = Field(default=None, alias="GroupIpAddress")


class DeregisterTransitGatewayMulticastGroupSourcesRequestModel(BaseModel):
    transit_gateway_multicast_domain_id: Optional[str] = Field(
        default=None, alias="TransitGatewayMulticastDomainId"
    )
    group_ip_address: Optional[str] = Field(default=None, alias="GroupIpAddress")
    network_interface_ids: Optional[Sequence[str]] = Field(
        default=None, alias="NetworkInterfaceIds"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class TransitGatewayMulticastDeregisteredGroupSourcesModel(BaseModel):
    transit_gateway_multicast_domain_id: Optional[str] = Field(
        default=None, alias="TransitGatewayMulticastDomainId"
    )
    deregistered_network_interface_ids: Optional[List[str]] = Field(
        default=None, alias="DeregisteredNetworkInterfaceIds"
    )
    group_ip_address: Optional[str] = Field(default=None, alias="GroupIpAddress")


class DescribeAccountAttributesRequestModel(BaseModel):
    attribute_names: Optional[
        Sequence[Literal["default-vpc", "supported-platforms"]]
    ] = Field(default=None, alias="AttributeNames")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class PaginatorConfigModel(BaseModel):
    max_items: Optional[int] = Field(default=None, alias="MaxItems")
    page_size: Optional[int] = Field(default=None, alias="PageSize")
    starting_token: Optional[str] = Field(default=None, alias="StartingToken")


class DescribeAddressTransfersRequestModel(BaseModel):
    allocation_ids: Optional[Sequence[str]] = Field(default=None, alias="AllocationIds")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeAddressesAttributeRequestModel(BaseModel):
    allocation_ids: Optional[Sequence[str]] = Field(default=None, alias="AllocationIds")
    attribute: Optional[Literal["domain-name"]] = Field(default=None, alias="Attribute")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class FilterModel(BaseModel):
    name: Optional[str] = Field(default=None, alias="Name")
    values: Optional[Sequence[str]] = Field(default=None, alias="Values")


class DescribeAggregateIdFormatRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class IdFormatModel(BaseModel):
    deadline: Optional[datetime] = Field(default=None, alias="Deadline")
    resource: Optional[str] = Field(default=None, alias="Resource")
    use_long_ids: Optional[bool] = Field(default=None, alias="UseLongIds")


class SubscriptionModel(BaseModel):
    source: Optional[str] = Field(default=None, alias="Source")
    destination: Optional[str] = Field(default=None, alias="Destination")
    metric: Optional[Literal["aggregate-latency"]] = Field(default=None, alias="Metric")
    statistic: Optional[Literal["p50"]] = Field(default=None, alias="Statistic")
    period: Optional[
        Literal[
            "fifteen-minutes",
            "five-minutes",
            "one-day",
            "one-hour",
            "one-week",
            "three-hours",
        ]
    ] = Field(default=None, alias="Period")


class WaiterConfigModel(BaseModel):
    delay: Optional[int] = Field(default=None, alias="Delay")
    max_attempts: Optional[int] = Field(default=None, alias="MaxAttempts")


class DescribeByoipCidrsRequestModel(BaseModel):
    max_results: int = Field(alias="MaxResults")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeConversionTasksRequestModel(BaseModel):
    conversion_task_ids: Optional[Sequence[str]] = Field(
        default=None, alias="ConversionTaskIds"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class FastLaunchLaunchTemplateSpecificationResponseModel(BaseModel):
    launch_template_id: Optional[str] = Field(default=None, alias="LaunchTemplateId")
    launch_template_name: Optional[str] = Field(
        default=None, alias="LaunchTemplateName"
    )
    version: Optional[str] = Field(default=None, alias="Version")


class FastLaunchSnapshotConfigurationResponseModel(BaseModel):
    target_resource_count: Optional[int] = Field(
        default=None, alias="TargetResourceCount"
    )


class DescribeFastSnapshotRestoreSuccessItemModel(BaseModel):
    snapshot_id: Optional[str] = Field(default=None, alias="SnapshotId")
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    state: Optional[
        Literal["disabled", "disabling", "enabled", "enabling", "optimizing"]
    ] = Field(default=None, alias="State")
    state_transition_reason: Optional[str] = Field(
        default=None, alias="StateTransitionReason"
    )
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    owner_alias: Optional[str] = Field(default=None, alias="OwnerAlias")
    enabling_time: Optional[datetime] = Field(default=None, alias="EnablingTime")
    optimizing_time: Optional[datetime] = Field(default=None, alias="OptimizingTime")
    enabled_time: Optional[datetime] = Field(default=None, alias="EnabledTime")
    disabling_time: Optional[datetime] = Field(default=None, alias="DisablingTime")
    disabled_time: Optional[datetime] = Field(default=None, alias="DisabledTime")


class DescribeFleetHistoryRequestModel(BaseModel):
    fleet_id: str = Field(alias="FleetId")
    start_time: Union[datetime, str] = Field(alias="StartTime")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    event_type: Optional[
        Literal["fleet-change", "instance-change", "service-error"]
    ] = Field(default=None, alias="EventType")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeFpgaImageAttributeRequestModel(BaseModel):
    fpga_image_id: str = Field(alias="FpgaImageId")
    attribute: Literal["description", "loadPermission", "name", "productCodes"] = Field(
        alias="Attribute"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class HostOfferingModel(BaseModel):
    currency_code: Optional[Literal["USD"]] = Field(default=None, alias="CurrencyCode")
    duration: Optional[int] = Field(default=None, alias="Duration")
    hourly_price: Optional[str] = Field(default=None, alias="HourlyPrice")
    instance_family: Optional[str] = Field(default=None, alias="InstanceFamily")
    offering_id: Optional[str] = Field(default=None, alias="OfferingId")
    payment_option: Optional[
        Literal["AllUpfront", "NoUpfront", "PartialUpfront"]
    ] = Field(default=None, alias="PaymentOption")
    upfront_price: Optional[str] = Field(default=None, alias="UpfrontPrice")


class DescribeIdFormatRequestModel(BaseModel):
    resource: Optional[str] = Field(default=None, alias="Resource")


class DescribeIdentityIdFormatRequestModel(BaseModel):
    principal_arn: str = Field(alias="PrincipalArn")
    resource: Optional[str] = Field(default=None, alias="Resource")


class DescribeImageAttributeRequestImageDescribeAttributeModel(BaseModel):
    attribute: Literal[
        "blockDeviceMapping",
        "bootMode",
        "description",
        "imdsSupport",
        "kernel",
        "lastLaunchedTime",
        "launchPermission",
        "productCodes",
        "ramdisk",
        "sriovNetSupport",
        "tpmSupport",
        "uefiData",
    ] = Field(alias="Attribute")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeImageAttributeRequestModel(BaseModel):
    attribute: Literal[
        "blockDeviceMapping",
        "bootMode",
        "description",
        "imdsSupport",
        "kernel",
        "lastLaunchedTime",
        "launchPermission",
        "productCodes",
        "ramdisk",
        "sriovNetSupport",
        "tpmSupport",
        "uefiData",
    ] = Field(alias="Attribute")
    image_id: str = Field(alias="ImageId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeInstanceAttributeRequestInstanceDescribeAttributeModel(BaseModel):
    attribute: Literal[
        "blockDeviceMapping",
        "disableApiStop",
        "disableApiTermination",
        "ebsOptimized",
        "enaSupport",
        "enclaveOptions",
        "groupSet",
        "instanceInitiatedShutdownBehavior",
        "instanceType",
        "kernel",
        "productCodes",
        "ramdisk",
        "rootDeviceName",
        "sourceDestCheck",
        "sriovNetSupport",
        "userData",
    ] = Field(alias="Attribute")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeInstanceAttributeRequestModel(BaseModel):
    attribute: Literal[
        "blockDeviceMapping",
        "disableApiStop",
        "disableApiTermination",
        "ebsOptimized",
        "enaSupport",
        "enclaveOptions",
        "groupSet",
        "instanceInitiatedShutdownBehavior",
        "instanceType",
        "kernel",
        "productCodes",
        "ramdisk",
        "rootDeviceName",
        "sourceDestCheck",
        "sriovNetSupport",
        "userData",
    ] = Field(alias="Attribute")
    instance_id: str = Field(alias="InstanceId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class InstanceCreditSpecificationModel(BaseModel):
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    cpu_credits: Optional[str] = Field(default=None, alias="CpuCredits")


class DescribeInstanceEventNotificationAttributesRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class InstanceTypeOfferingModel(BaseModel):
    instance_type: Optional[
        Literal[
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.large",
            "a1.medium",
            "a1.metal",
            "a1.xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c3.large",
            "c3.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.large",
            "c5.metal",
            "c5.xlarge",
            "c5a.12xlarge",
            "c5a.16xlarge",
            "c5a.24xlarge",
            "c5a.2xlarge",
            "c5a.4xlarge",
            "c5a.8xlarge",
            "c5a.large",
            "c5a.xlarge",
            "c5ad.12xlarge",
            "c5ad.16xlarge",
            "c5ad.24xlarge",
            "c5ad.2xlarge",
            "c5ad.4xlarge",
            "c5ad.8xlarge",
            "c5ad.large",
            "c5ad.xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.large",
            "c5d.metal",
            "c5d.xlarge",
            "c5n.18xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.large",
            "c5n.metal",
            "c5n.xlarge",
            "c6a.12xlarge",
            "c6a.16xlarge",
            "c6a.24xlarge",
            "c6a.2xlarge",
            "c6a.32xlarge",
            "c6a.48xlarge",
            "c6a.4xlarge",
            "c6a.8xlarge",
            "c6a.large",
            "c6a.metal",
            "c6a.xlarge",
            "c6g.12xlarge",
            "c6g.16xlarge",
            "c6g.2xlarge",
            "c6g.4xlarge",
            "c6g.8xlarge",
            "c6g.large",
            "c6g.medium",
            "c6g.metal",
            "c6g.xlarge",
            "c6gd.12xlarge",
            "c6gd.16xlarge",
            "c6gd.2xlarge",
            "c6gd.4xlarge",
            "c6gd.8xlarge",
            "c6gd.large",
            "c6gd.medium",
            "c6gd.metal",
            "c6gd.xlarge",
            "c6gn.12xlarge",
            "c6gn.16xlarge",
            "c6gn.2xlarge",
            "c6gn.4xlarge",
            "c6gn.8xlarge",
            "c6gn.large",
            "c6gn.medium",
            "c6gn.xlarge",
            "c6i.12xlarge",
            "c6i.16xlarge",
            "c6i.24xlarge",
            "c6i.2xlarge",
            "c6i.32xlarge",
            "c6i.4xlarge",
            "c6i.8xlarge",
            "c6i.large",
            "c6i.metal",
            "c6i.xlarge",
            "c6id.12xlarge",
            "c6id.16xlarge",
            "c6id.24xlarge",
            "c6id.2xlarge",
            "c6id.32xlarge",
            "c6id.4xlarge",
            "c6id.8xlarge",
            "c6id.large",
            "c6id.metal",
            "c6id.xlarge",
            "c6in.12xlarge",
            "c6in.16xlarge",
            "c6in.24xlarge",
            "c6in.2xlarge",
            "c6in.32xlarge",
            "c6in.4xlarge",
            "c6in.8xlarge",
            "c6in.large",
            "c6in.xlarge",
            "c7g.12xlarge",
            "c7g.16xlarge",
            "c7g.2xlarge",
            "c7g.4xlarge",
            "c7g.8xlarge",
            "c7g.large",
            "c7g.medium",
            "c7g.xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "cg1.4xlarge",
            "cr1.8xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "d2.xlarge",
            "d3.2xlarge",
            "d3.4xlarge",
            "d3.8xlarge",
            "d3.xlarge",
            "d3en.12xlarge",
            "d3en.2xlarge",
            "d3en.4xlarge",
            "d3en.6xlarge",
            "d3en.8xlarge",
            "d3en.xlarge",
            "dl1.24xlarge",
            "f1.16xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.16xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3s.xlarge",
            "g4ad.16xlarge",
            "g4ad.2xlarge",
            "g4ad.4xlarge",
            "g4ad.8xlarge",
            "g4ad.xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.metal",
            "g4dn.xlarge",
            "g5.12xlarge",
            "g5.16xlarge",
            "g5.24xlarge",
            "g5.2xlarge",
            "g5.48xlarge",
            "g5.4xlarge",
            "g5.8xlarge",
            "g5.xlarge",
            "g5g.16xlarge",
            "g5g.2xlarge",
            "g5g.4xlarge",
            "g5g.8xlarge",
            "g5g.metal",
            "g5g.xlarge",
            "h1.16xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "hi1.4xlarge",
            "hpc6a.48xlarge",
            "hpc6id.32xlarge",
            "hs1.8xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i2.xlarge",
            "i3.16xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.large",
            "i3.metal",
            "i3.xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.large",
            "i3en.metal",
            "i3en.xlarge",
            "i4i.16xlarge",
            "i4i.2xlarge",
            "i4i.32xlarge",
            "i4i.4xlarge",
            "i4i.8xlarge",
            "i4i.large",
            "i4i.metal",
            "i4i.xlarge",
            "im4gn.16xlarge",
            "im4gn.2xlarge",
            "im4gn.4xlarge",
            "im4gn.8xlarge",
            "im4gn.large",
            "im4gn.xlarge",
            "inf1.24xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.xlarge",
            "is4gen.2xlarge",
            "is4gen.4xlarge",
            "is4gen.8xlarge",
            "is4gen.large",
            "is4gen.medium",
            "is4gen.xlarge",
            "m1.large",
            "m1.medium",
            "m1.small",
            "m1.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "m2.xlarge",
            "m3.2xlarge",
            "m3.large",
            "m3.medium",
            "m3.xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.large",
            "m4.xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.large",
            "m5.metal",
            "m5.xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.large",
            "m5a.xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.large",
            "m5ad.xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.large",
            "m5d.metal",
            "m5d.xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.large",
            "m5dn.metal",
            "m5dn.xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.large",
            "m5n.metal",
            "m5n.xlarge",
            "m5zn.12xlarge",
            "m5zn.2xlarge",
            "m5zn.3xlarge",
            "m5zn.6xlarge",
            "m5zn.large",
            "m5zn.metal",
            "m5zn.xlarge",
            "m6a.12xlarge",
            "m6a.16xlarge",
            "m6a.24xlarge",
            "m6a.2xlarge",
            "m6a.32xlarge",
            "m6a.48xlarge",
            "m6a.4xlarge",
            "m6a.8xlarge",
            "m6a.large",
            "m6a.metal",
            "m6a.xlarge",
            "m6g.12xlarge",
            "m6g.16xlarge",
            "m6g.2xlarge",
            "m6g.4xlarge",
            "m6g.8xlarge",
            "m6g.large",
            "m6g.medium",
            "m6g.metal",
            "m6g.xlarge",
            "m6gd.12xlarge",
            "m6gd.16xlarge",
            "m6gd.2xlarge",
            "m6gd.4xlarge",
            "m6gd.8xlarge",
            "m6gd.large",
            "m6gd.medium",
            "m6gd.metal",
            "m6gd.xlarge",
            "m6i.12xlarge",
            "m6i.16xlarge",
            "m6i.24xlarge",
            "m6i.2xlarge",
            "m6i.32xlarge",
            "m6i.4xlarge",
            "m6i.8xlarge",
            "m6i.large",
            "m6i.metal",
            "m6i.xlarge",
            "m6id.12xlarge",
            "m6id.16xlarge",
            "m6id.24xlarge",
            "m6id.2xlarge",
            "m6id.32xlarge",
            "m6id.4xlarge",
            "m6id.8xlarge",
            "m6id.large",
            "m6id.metal",
            "m6id.xlarge",
            "m6idn.12xlarge",
            "m6idn.16xlarge",
            "m6idn.24xlarge",
            "m6idn.2xlarge",
            "m6idn.32xlarge",
            "m6idn.4xlarge",
            "m6idn.8xlarge",
            "m6idn.large",
            "m6idn.xlarge",
            "m6in.12xlarge",
            "m6in.16xlarge",
            "m6in.24xlarge",
            "m6in.2xlarge",
            "m6in.32xlarge",
            "m6in.4xlarge",
            "m6in.8xlarge",
            "m6in.large",
            "m6in.xlarge",
            "mac1.metal",
            "mac2.metal",
            "p2.16xlarge",
            "p2.8xlarge",
            "p2.xlarge",
            "p3.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3dn.24xlarge",
            "p4d.24xlarge",
            "p4de.24xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r4.16xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.large",
            "r5.metal",
            "r5.xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.large",
            "r5a.xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.large",
            "r5ad.xlarge",
            "r5b.12xlarge",
            "r5b.16xlarge",
            "r5b.24xlarge",
            "r5b.2xlarge",
            "r5b.4xlarge",
            "r5b.8xlarge",
            "r5b.large",
            "r5b.metal",
            "r5b.xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.large",
            "r5d.metal",
            "r5d.xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.large",
            "r5dn.metal",
            "r5dn.xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.large",
            "r5n.metal",
            "r5n.xlarge",
            "r6a.12xlarge",
            "r6a.16xlarge",
            "r6a.24xlarge",
            "r6a.2xlarge",
            "r6a.32xlarge",
            "r6a.48xlarge",
            "r6a.4xlarge",
            "r6a.8xlarge",
            "r6a.large",
            "r6a.metal",
            "r6a.xlarge",
            "r6g.12xlarge",
            "r6g.16xlarge",
            "r6g.2xlarge",
            "r6g.4xlarge",
            "r6g.8xlarge",
            "r6g.large",
            "r6g.medium",
            "r6g.metal",
            "r6g.xlarge",
            "r6gd.12xlarge",
            "r6gd.16xlarge",
            "r6gd.2xlarge",
            "r6gd.4xlarge",
            "r6gd.8xlarge",
            "r6gd.large",
            "r6gd.medium",
            "r6gd.metal",
            "r6gd.xlarge",
            "r6i.12xlarge",
            "r6i.16xlarge",
            "r6i.24xlarge",
            "r6i.2xlarge",
            "r6i.32xlarge",
            "r6i.4xlarge",
            "r6i.8xlarge",
            "r6i.large",
            "r6i.metal",
            "r6i.xlarge",
            "r6id.12xlarge",
            "r6id.16xlarge",
            "r6id.24xlarge",
            "r6id.2xlarge",
            "r6id.32xlarge",
            "r6id.4xlarge",
            "r6id.8xlarge",
            "r6id.large",
            "r6id.metal",
            "r6id.xlarge",
            "r6idn.12xlarge",
            "r6idn.16xlarge",
            "r6idn.24xlarge",
            "r6idn.2xlarge",
            "r6idn.32xlarge",
            "r6idn.4xlarge",
            "r6idn.8xlarge",
            "r6idn.large",
            "r6idn.xlarge",
            "r6in.12xlarge",
            "r6in.16xlarge",
            "r6in.24xlarge",
            "r6in.2xlarge",
            "r6in.32xlarge",
            "r6in.4xlarge",
            "r6in.8xlarge",
            "r6in.large",
            "r6in.xlarge",
            "t1.micro",
            "t2.2xlarge",
            "t2.large",
            "t2.medium",
            "t2.micro",
            "t2.nano",
            "t2.small",
            "t2.xlarge",
            "t3.2xlarge",
            "t3.large",
            "t3.medium",
            "t3.micro",
            "t3.nano",
            "t3.small",
            "t3.xlarge",
            "t3a.2xlarge",
            "t3a.large",
            "t3a.medium",
            "t3a.micro",
            "t3a.nano",
            "t3a.small",
            "t3a.xlarge",
            "t4g.2xlarge",
            "t4g.large",
            "t4g.medium",
            "t4g.micro",
            "t4g.nano",
            "t4g.small",
            "t4g.xlarge",
            "trn1.2xlarge",
            "trn1.32xlarge",
            "u-12tb1.112xlarge",
            "u-12tb1.metal",
            "u-18tb1.112xlarge",
            "u-18tb1.metal",
            "u-24tb1.112xlarge",
            "u-24tb1.metal",
            "u-3tb1.56xlarge",
            "u-6tb1.112xlarge",
            "u-6tb1.56xlarge",
            "u-6tb1.metal",
            "u-9tb1.112xlarge",
            "u-9tb1.metal",
            "vt1.24xlarge",
            "vt1.3xlarge",
            "vt1.6xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.16xlarge",
            "x1e.2xlarge",
            "x1e.32xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.xlarge",
            "x2gd.12xlarge",
            "x2gd.16xlarge",
            "x2gd.2xlarge",
            "x2gd.4xlarge",
            "x2gd.8xlarge",
            "x2gd.large",
            "x2gd.medium",
            "x2gd.metal",
            "x2gd.xlarge",
            "x2idn.16xlarge",
            "x2idn.24xlarge",
            "x2idn.32xlarge",
            "x2idn.metal",
            "x2iedn.16xlarge",
            "x2iedn.24xlarge",
            "x2iedn.2xlarge",
            "x2iedn.32xlarge",
            "x2iedn.4xlarge",
            "x2iedn.8xlarge",
            "x2iedn.metal",
            "x2iedn.xlarge",
            "x2iezn.12xlarge",
            "x2iezn.2xlarge",
            "x2iezn.4xlarge",
            "x2iezn.6xlarge",
            "x2iezn.8xlarge",
            "x2iezn.metal",
            "z1d.12xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.large",
            "z1d.metal",
            "z1d.xlarge",
        ]
    ] = Field(default=None, alias="InstanceType")
    location_type: Optional[
        Literal["availability-zone", "availability-zone-id", "region"]
    ] = Field(default=None, alias="LocationType")
    location: Optional[str] = Field(default=None, alias="Location")


class MovingAddressStatusModel(BaseModel):
    move_status: Optional[Literal["movingToVpc", "restoringToClassic"]] = Field(
        default=None, alias="MoveStatus"
    )
    public_ip: Optional[str] = Field(default=None, alias="PublicIp")


class DescribeNetworkInterfaceAttributeRequestNetworkInterfaceDescribeAttributeModel(
    BaseModel
):
    attribute: Optional[
        Literal["attachment", "description", "groupSet", "sourceDestCheck"]
    ] = Field(default=None, alias="Attribute")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeNetworkInterfaceAttributeRequestModel(BaseModel):
    network_interface_id: str = Field(alias="NetworkInterfaceId")
    attribute: Optional[
        Literal["attachment", "description", "groupSet", "sourceDestCheck"]
    ] = Field(default=None, alias="Attribute")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class PrefixListModel(BaseModel):
    cidrs: Optional[List[str]] = Field(default=None, alias="Cidrs")
    prefix_list_id: Optional[str] = Field(default=None, alias="PrefixListId")
    prefix_list_name: Optional[str] = Field(default=None, alias="PrefixListName")


class DescribePrincipalIdFormatRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    resources: Optional[Sequence[str]] = Field(default=None, alias="Resources")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class RegionModel(BaseModel):
    endpoint: Optional[str] = Field(default=None, alias="Endpoint")
    region_name: Optional[str] = Field(default=None, alias="RegionName")
    opt_in_status: Optional[str] = Field(default=None, alias="OptInStatus")


class ScheduledInstanceRecurrenceRequestModel(BaseModel):
    frequency: Optional[str] = Field(default=None, alias="Frequency")
    interval: Optional[int] = Field(default=None, alias="Interval")
    occurrence_days: Optional[Sequence[int]] = Field(
        default=None, alias="OccurrenceDays"
    )
    occurrence_relative_to_end: Optional[bool] = Field(
        default=None, alias="OccurrenceRelativeToEnd"
    )
    occurrence_unit: Optional[str] = Field(default=None, alias="OccurrenceUnit")


class SlotDateTimeRangeRequestModel(BaseModel):
    earliest_time: Union[datetime, str] = Field(alias="EarliestTime")
    latest_time: Union[datetime, str] = Field(alias="LatestTime")


class SlotStartTimeRangeRequestModel(BaseModel):
    earliest_time: Optional[Union[datetime, str]] = Field(
        default=None, alias="EarliestTime"
    )
    latest_time: Optional[Union[datetime, str]] = Field(
        default=None, alias="LatestTime"
    )


class DescribeSecurityGroupReferencesRequestModel(BaseModel):
    group_id: Sequence[str] = Field(alias="GroupId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class SecurityGroupReferenceModel(BaseModel):
    group_id: Optional[str] = Field(default=None, alias="GroupId")
    referencing_vpc_id: Optional[str] = Field(default=None, alias="ReferencingVpcId")
    vpc_peering_connection_id: Optional[str] = Field(
        default=None, alias="VpcPeeringConnectionId"
    )


class DescribeSnapshotAttributeRequestModel(BaseModel):
    attribute: Literal["createVolumePermission", "productCodes"] = Field(
        alias="Attribute"
    )
    snapshot_id: str = Field(alias="SnapshotId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeSnapshotAttributeRequestSnapshotDescribeAttributeModel(BaseModel):
    attribute: Literal["createVolumePermission", "productCodes"] = Field(
        alias="Attribute"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ProductCodeModel(BaseModel):
    product_code_id: Optional[str] = Field(default=None, alias="ProductCodeId")
    product_code_type: Optional[Literal["devpay", "marketplace"]] = Field(
        default=None, alias="ProductCodeType"
    )


class DescribeSpotDatafeedSubscriptionRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeSpotFleetInstancesRequestModel(BaseModel):
    spot_fleet_request_id: str = Field(alias="SpotFleetRequestId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeSpotFleetRequestHistoryRequestModel(BaseModel):
    spot_fleet_request_id: str = Field(alias="SpotFleetRequestId")
    start_time: Union[datetime, str] = Field(alias="StartTime")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    event_type: Optional[
        Literal["error", "fleetRequestChange", "information", "instanceChange"]
    ] = Field(default=None, alias="EventType")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeSpotFleetRequestsRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    spot_fleet_request_ids: Optional[Sequence[str]] = Field(
        default=None, alias="SpotFleetRequestIds"
    )


class SpotPriceModel(BaseModel):
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    instance_type: Optional[
        Literal[
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.large",
            "a1.medium",
            "a1.metal",
            "a1.xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c3.large",
            "c3.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.large",
            "c5.metal",
            "c5.xlarge",
            "c5a.12xlarge",
            "c5a.16xlarge",
            "c5a.24xlarge",
            "c5a.2xlarge",
            "c5a.4xlarge",
            "c5a.8xlarge",
            "c5a.large",
            "c5a.xlarge",
            "c5ad.12xlarge",
            "c5ad.16xlarge",
            "c5ad.24xlarge",
            "c5ad.2xlarge",
            "c5ad.4xlarge",
            "c5ad.8xlarge",
            "c5ad.large",
            "c5ad.xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.large",
            "c5d.metal",
            "c5d.xlarge",
            "c5n.18xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.large",
            "c5n.metal",
            "c5n.xlarge",
            "c6a.12xlarge",
            "c6a.16xlarge",
            "c6a.24xlarge",
            "c6a.2xlarge",
            "c6a.32xlarge",
            "c6a.48xlarge",
            "c6a.4xlarge",
            "c6a.8xlarge",
            "c6a.large",
            "c6a.metal",
            "c6a.xlarge",
            "c6g.12xlarge",
            "c6g.16xlarge",
            "c6g.2xlarge",
            "c6g.4xlarge",
            "c6g.8xlarge",
            "c6g.large",
            "c6g.medium",
            "c6g.metal",
            "c6g.xlarge",
            "c6gd.12xlarge",
            "c6gd.16xlarge",
            "c6gd.2xlarge",
            "c6gd.4xlarge",
            "c6gd.8xlarge",
            "c6gd.large",
            "c6gd.medium",
            "c6gd.metal",
            "c6gd.xlarge",
            "c6gn.12xlarge",
            "c6gn.16xlarge",
            "c6gn.2xlarge",
            "c6gn.4xlarge",
            "c6gn.8xlarge",
            "c6gn.large",
            "c6gn.medium",
            "c6gn.xlarge",
            "c6i.12xlarge",
            "c6i.16xlarge",
            "c6i.24xlarge",
            "c6i.2xlarge",
            "c6i.32xlarge",
            "c6i.4xlarge",
            "c6i.8xlarge",
            "c6i.large",
            "c6i.metal",
            "c6i.xlarge",
            "c6id.12xlarge",
            "c6id.16xlarge",
            "c6id.24xlarge",
            "c6id.2xlarge",
            "c6id.32xlarge",
            "c6id.4xlarge",
            "c6id.8xlarge",
            "c6id.large",
            "c6id.metal",
            "c6id.xlarge",
            "c6in.12xlarge",
            "c6in.16xlarge",
            "c6in.24xlarge",
            "c6in.2xlarge",
            "c6in.32xlarge",
            "c6in.4xlarge",
            "c6in.8xlarge",
            "c6in.large",
            "c6in.xlarge",
            "c7g.12xlarge",
            "c7g.16xlarge",
            "c7g.2xlarge",
            "c7g.4xlarge",
            "c7g.8xlarge",
            "c7g.large",
            "c7g.medium",
            "c7g.xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "cg1.4xlarge",
            "cr1.8xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "d2.xlarge",
            "d3.2xlarge",
            "d3.4xlarge",
            "d3.8xlarge",
            "d3.xlarge",
            "d3en.12xlarge",
            "d3en.2xlarge",
            "d3en.4xlarge",
            "d3en.6xlarge",
            "d3en.8xlarge",
            "d3en.xlarge",
            "dl1.24xlarge",
            "f1.16xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.16xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3s.xlarge",
            "g4ad.16xlarge",
            "g4ad.2xlarge",
            "g4ad.4xlarge",
            "g4ad.8xlarge",
            "g4ad.xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.metal",
            "g4dn.xlarge",
            "g5.12xlarge",
            "g5.16xlarge",
            "g5.24xlarge",
            "g5.2xlarge",
            "g5.48xlarge",
            "g5.4xlarge",
            "g5.8xlarge",
            "g5.xlarge",
            "g5g.16xlarge",
            "g5g.2xlarge",
            "g5g.4xlarge",
            "g5g.8xlarge",
            "g5g.metal",
            "g5g.xlarge",
            "h1.16xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "hi1.4xlarge",
            "hpc6a.48xlarge",
            "hpc6id.32xlarge",
            "hs1.8xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i2.xlarge",
            "i3.16xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.large",
            "i3.metal",
            "i3.xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.large",
            "i3en.metal",
            "i3en.xlarge",
            "i4i.16xlarge",
            "i4i.2xlarge",
            "i4i.32xlarge",
            "i4i.4xlarge",
            "i4i.8xlarge",
            "i4i.large",
            "i4i.metal",
            "i4i.xlarge",
            "im4gn.16xlarge",
            "im4gn.2xlarge",
            "im4gn.4xlarge",
            "im4gn.8xlarge",
            "im4gn.large",
            "im4gn.xlarge",
            "inf1.24xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.xlarge",
            "is4gen.2xlarge",
            "is4gen.4xlarge",
            "is4gen.8xlarge",
            "is4gen.large",
            "is4gen.medium",
            "is4gen.xlarge",
            "m1.large",
            "m1.medium",
            "m1.small",
            "m1.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "m2.xlarge",
            "m3.2xlarge",
            "m3.large",
            "m3.medium",
            "m3.xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.large",
            "m4.xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.large",
            "m5.metal",
            "m5.xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.large",
            "m5a.xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.large",
            "m5ad.xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.large",
            "m5d.metal",
            "m5d.xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.large",
            "m5dn.metal",
            "m5dn.xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.large",
            "m5n.metal",
            "m5n.xlarge",
            "m5zn.12xlarge",
            "m5zn.2xlarge",
            "m5zn.3xlarge",
            "m5zn.6xlarge",
            "m5zn.large",
            "m5zn.metal",
            "m5zn.xlarge",
            "m6a.12xlarge",
            "m6a.16xlarge",
            "m6a.24xlarge",
            "m6a.2xlarge",
            "m6a.32xlarge",
            "m6a.48xlarge",
            "m6a.4xlarge",
            "m6a.8xlarge",
            "m6a.large",
            "m6a.metal",
            "m6a.xlarge",
            "m6g.12xlarge",
            "m6g.16xlarge",
            "m6g.2xlarge",
            "m6g.4xlarge",
            "m6g.8xlarge",
            "m6g.large",
            "m6g.medium",
            "m6g.metal",
            "m6g.xlarge",
            "m6gd.12xlarge",
            "m6gd.16xlarge",
            "m6gd.2xlarge",
            "m6gd.4xlarge",
            "m6gd.8xlarge",
            "m6gd.large",
            "m6gd.medium",
            "m6gd.metal",
            "m6gd.xlarge",
            "m6i.12xlarge",
            "m6i.16xlarge",
            "m6i.24xlarge",
            "m6i.2xlarge",
            "m6i.32xlarge",
            "m6i.4xlarge",
            "m6i.8xlarge",
            "m6i.large",
            "m6i.metal",
            "m6i.xlarge",
            "m6id.12xlarge",
            "m6id.16xlarge",
            "m6id.24xlarge",
            "m6id.2xlarge",
            "m6id.32xlarge",
            "m6id.4xlarge",
            "m6id.8xlarge",
            "m6id.large",
            "m6id.metal",
            "m6id.xlarge",
            "m6idn.12xlarge",
            "m6idn.16xlarge",
            "m6idn.24xlarge",
            "m6idn.2xlarge",
            "m6idn.32xlarge",
            "m6idn.4xlarge",
            "m6idn.8xlarge",
            "m6idn.large",
            "m6idn.xlarge",
            "m6in.12xlarge",
            "m6in.16xlarge",
            "m6in.24xlarge",
            "m6in.2xlarge",
            "m6in.32xlarge",
            "m6in.4xlarge",
            "m6in.8xlarge",
            "m6in.large",
            "m6in.xlarge",
            "mac1.metal",
            "mac2.metal",
            "p2.16xlarge",
            "p2.8xlarge",
            "p2.xlarge",
            "p3.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3dn.24xlarge",
            "p4d.24xlarge",
            "p4de.24xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r4.16xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.large",
            "r5.metal",
            "r5.xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.large",
            "r5a.xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.large",
            "r5ad.xlarge",
            "r5b.12xlarge",
            "r5b.16xlarge",
            "r5b.24xlarge",
            "r5b.2xlarge",
            "r5b.4xlarge",
            "r5b.8xlarge",
            "r5b.large",
            "r5b.metal",
            "r5b.xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.large",
            "r5d.metal",
            "r5d.xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.large",
            "r5dn.metal",
            "r5dn.xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.large",
            "r5n.metal",
            "r5n.xlarge",
            "r6a.12xlarge",
            "r6a.16xlarge",
            "r6a.24xlarge",
            "r6a.2xlarge",
            "r6a.32xlarge",
            "r6a.48xlarge",
            "r6a.4xlarge",
            "r6a.8xlarge",
            "r6a.large",
            "r6a.metal",
            "r6a.xlarge",
            "r6g.12xlarge",
            "r6g.16xlarge",
            "r6g.2xlarge",
            "r6g.4xlarge",
            "r6g.8xlarge",
            "r6g.large",
            "r6g.medium",
            "r6g.metal",
            "r6g.xlarge",
            "r6gd.12xlarge",
            "r6gd.16xlarge",
            "r6gd.2xlarge",
            "r6gd.4xlarge",
            "r6gd.8xlarge",
            "r6gd.large",
            "r6gd.medium",
            "r6gd.metal",
            "r6gd.xlarge",
            "r6i.12xlarge",
            "r6i.16xlarge",
            "r6i.24xlarge",
            "r6i.2xlarge",
            "r6i.32xlarge",
            "r6i.4xlarge",
            "r6i.8xlarge",
            "r6i.large",
            "r6i.metal",
            "r6i.xlarge",
            "r6id.12xlarge",
            "r6id.16xlarge",
            "r6id.24xlarge",
            "r6id.2xlarge",
            "r6id.32xlarge",
            "r6id.4xlarge",
            "r6id.8xlarge",
            "r6id.large",
            "r6id.metal",
            "r6id.xlarge",
            "r6idn.12xlarge",
            "r6idn.16xlarge",
            "r6idn.24xlarge",
            "r6idn.2xlarge",
            "r6idn.32xlarge",
            "r6idn.4xlarge",
            "r6idn.8xlarge",
            "r6idn.large",
            "r6idn.xlarge",
            "r6in.12xlarge",
            "r6in.16xlarge",
            "r6in.24xlarge",
            "r6in.2xlarge",
            "r6in.32xlarge",
            "r6in.4xlarge",
            "r6in.8xlarge",
            "r6in.large",
            "r6in.xlarge",
            "t1.micro",
            "t2.2xlarge",
            "t2.large",
            "t2.medium",
            "t2.micro",
            "t2.nano",
            "t2.small",
            "t2.xlarge",
            "t3.2xlarge",
            "t3.large",
            "t3.medium",
            "t3.micro",
            "t3.nano",
            "t3.small",
            "t3.xlarge",
            "t3a.2xlarge",
            "t3a.large",
            "t3a.medium",
            "t3a.micro",
            "t3a.nano",
            "t3a.small",
            "t3a.xlarge",
            "t4g.2xlarge",
            "t4g.large",
            "t4g.medium",
            "t4g.micro",
            "t4g.nano",
            "t4g.small",
            "t4g.xlarge",
            "trn1.2xlarge",
            "trn1.32xlarge",
            "u-12tb1.112xlarge",
            "u-12tb1.metal",
            "u-18tb1.112xlarge",
            "u-18tb1.metal",
            "u-24tb1.112xlarge",
            "u-24tb1.metal",
            "u-3tb1.56xlarge",
            "u-6tb1.112xlarge",
            "u-6tb1.56xlarge",
            "u-6tb1.metal",
            "u-9tb1.112xlarge",
            "u-9tb1.metal",
            "vt1.24xlarge",
            "vt1.3xlarge",
            "vt1.6xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.16xlarge",
            "x1e.2xlarge",
            "x1e.32xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.xlarge",
            "x2gd.12xlarge",
            "x2gd.16xlarge",
            "x2gd.2xlarge",
            "x2gd.4xlarge",
            "x2gd.8xlarge",
            "x2gd.large",
            "x2gd.medium",
            "x2gd.metal",
            "x2gd.xlarge",
            "x2idn.16xlarge",
            "x2idn.24xlarge",
            "x2idn.32xlarge",
            "x2idn.metal",
            "x2iedn.16xlarge",
            "x2iedn.24xlarge",
            "x2iedn.2xlarge",
            "x2iedn.32xlarge",
            "x2iedn.4xlarge",
            "x2iedn.8xlarge",
            "x2iedn.metal",
            "x2iedn.xlarge",
            "x2iezn.12xlarge",
            "x2iezn.2xlarge",
            "x2iezn.4xlarge",
            "x2iezn.6xlarge",
            "x2iezn.8xlarge",
            "x2iezn.metal",
            "z1d.12xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.large",
            "z1d.metal",
            "z1d.xlarge",
        ]
    ] = Field(default=None, alias="InstanceType")
    product_description: Optional[
        Literal[
            "Linux/UNIX", "Linux/UNIX (Amazon VPC)", "Windows", "Windows (Amazon VPC)"
        ]
    ] = Field(default=None, alias="ProductDescription")
    spot_price: Optional[str] = Field(default=None, alias="SpotPrice")
    timestamp: Optional[datetime] = Field(default=None, alias="Timestamp")


class DescribeStaleSecurityGroupsRequestModel(BaseModel):
    vpc_id: str = Field(alias="VpcId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class StoreImageTaskResultModel(BaseModel):
    ami_id: Optional[str] = Field(default=None, alias="AmiId")
    task_start_time: Optional[datetime] = Field(default=None, alias="TaskStartTime")
    bucket: Optional[str] = Field(default=None, alias="Bucket")
    s3object_key: Optional[str] = Field(default=None, alias="S3objectKey")
    progress_percentage: Optional[int] = Field(default=None, alias="ProgressPercentage")
    store_task_state: Optional[str] = Field(default=None, alias="StoreTaskState")
    store_task_failure_reason: Optional[str] = Field(
        default=None, alias="StoreTaskFailureReason"
    )


class TagDescriptionModel(BaseModel):
    key: Optional[str] = Field(default=None, alias="Key")
    resource_id: Optional[str] = Field(default=None, alias="ResourceId")
    resource_type: Optional[
        Literal[
            "capacity-reservation",
            "capacity-reservation-fleet",
            "carrier-gateway",
            "client-vpn-endpoint",
            "coip-pool",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "egress-only-internet-gateway",
            "elastic-gpu",
            "elastic-ip",
            "export-image-task",
            "export-instance-task",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "import-image-task",
            "import-snapshot-task",
            "instance",
            "instance-event-window",
            "internet-gateway",
            "ipam",
            "ipam-pool",
            "ipam-resource-discovery",
            "ipam-resource-discovery-association",
            "ipam-scope",
            "ipv4pool-ec2",
            "ipv6pool-ec2",
            "key-pair",
            "launch-template",
            "local-gateway",
            "local-gateway-route-table",
            "local-gateway-route-table-virtual-interface-group-association",
            "local-gateway-route-table-vpc-association",
            "local-gateway-virtual-interface",
            "local-gateway-virtual-interface-group",
            "natgateway",
            "network-acl",
            "network-insights-access-scope",
            "network-insights-access-scope-analysis",
            "network-insights-analysis",
            "network-insights-path",
            "network-interface",
            "placement-group",
            "prefix-list",
            "replace-root-volume-task",
            "reserved-instances",
            "route-table",
            "security-group",
            "security-group-rule",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "subnet-cidr-reservation",
            "traffic-mirror-filter",
            "traffic-mirror-filter-rule",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-connect-peer",
            "transit-gateway-multicast-domain",
            "transit-gateway-policy-table",
            "transit-gateway-route-table",
            "transit-gateway-route-table-announcement",
            "verified-access-endpoint",
            "verified-access-group",
            "verified-access-instance",
            "verified-access-policy",
            "verified-access-trust-provider",
            "volume",
            "vpc",
            "vpc-block-public-access-exclusion",
            "vpc-endpoint",
            "vpc-endpoint-connection",
            "vpc-endpoint-connection-device-type",
            "vpc-endpoint-service",
            "vpc-endpoint-service-permission",
            "vpc-flow-log",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-connection-device-type",
            "vpn-gateway",
        ]
    ] = Field(default=None, alias="ResourceType")
    value: Optional[str] = Field(default=None, alias="Value")


class DescribeVolumeAttributeRequestModel(BaseModel):
    attribute: Literal["autoEnableIO", "productCodes"] = Field(alias="Attribute")
    volume_id: str = Field(alias="VolumeId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeVolumeAttributeRequestVolumeDescribeAttributeModel(BaseModel):
    attribute: Literal["autoEnableIO", "productCodes"] = Field(alias="Attribute")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class VolumeModificationModel(BaseModel):
    volume_id: Optional[str] = Field(default=None, alias="VolumeId")
    modification_state: Optional[
        Literal["completed", "failed", "modifying", "optimizing"]
    ] = Field(default=None, alias="ModificationState")
    status_message: Optional[str] = Field(default=None, alias="StatusMessage")
    target_size: Optional[int] = Field(default=None, alias="TargetSize")
    target_iops: Optional[int] = Field(default=None, alias="TargetIops")
    target_volume_type: Optional[
        Literal["gp2", "gp3", "io1", "io2", "sc1", "st1", "standard"]
    ] = Field(default=None, alias="TargetVolumeType")
    target_throughput: Optional[int] = Field(default=None, alias="TargetThroughput")
    target_multi_attach_enabled: Optional[bool] = Field(
        default=None, alias="TargetMultiAttachEnabled"
    )
    original_size: Optional[int] = Field(default=None, alias="OriginalSize")
    original_iops: Optional[int] = Field(default=None, alias="OriginalIops")
    original_volume_type: Optional[
        Literal["gp2", "gp3", "io1", "io2", "sc1", "st1", "standard"]
    ] = Field(default=None, alias="OriginalVolumeType")
    original_throughput: Optional[int] = Field(default=None, alias="OriginalThroughput")
    original_multi_attach_enabled: Optional[bool] = Field(
        default=None, alias="OriginalMultiAttachEnabled"
    )
    progress: Optional[int] = Field(default=None, alias="Progress")
    start_time: Optional[datetime] = Field(default=None, alias="StartTime")
    end_time: Optional[datetime] = Field(default=None, alias="EndTime")


class DescribeVpcAttributeRequestModel(BaseModel):
    attribute: Literal[
        "enableDnsHostnames", "enableDnsSupport", "enableNetworkAddressUsageMetrics"
    ] = Field(alias="Attribute")
    vpc_id: str = Field(alias="VpcId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeVpcAttributeRequestVpcDescribeAttributeModel(BaseModel):
    attribute: Literal[
        "enableDnsHostnames", "enableDnsSupport", "enableNetworkAddressUsageMetrics"
    ] = Field(alias="Attribute")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeVpcClassicLinkDnsSupportRequestModel(BaseModel):
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    vpc_ids: Optional[Sequence[str]] = Field(default=None, alias="VpcIds")


class DestinationOptionsResponseModel(BaseModel):
    file_format: Optional[Literal["parquet", "plain-text"]] = Field(
        default=None, alias="FileFormat"
    )
    hive_compatible_partitions: Optional[bool] = Field(
        default=None, alias="HiveCompatiblePartitions"
    )
    per_hour_partition: Optional[bool] = Field(default=None, alias="PerHourPartition")


class DetachClassicLinkVpcRequestInstanceDetachClassicLinkVpcModel(BaseModel):
    vpc_id: str = Field(alias="VpcId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DetachClassicLinkVpcRequestModel(BaseModel):
    instance_id: str = Field(alias="InstanceId")
    vpc_id: str = Field(alias="VpcId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DetachClassicLinkVpcRequestVpcDetachClassicLinkInstanceModel(BaseModel):
    instance_id: str = Field(alias="InstanceId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DetachInternetGatewayRequestInternetGatewayDetachFromVpcModel(BaseModel):
    vpc_id: str = Field(alias="VpcId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DetachInternetGatewayRequestModel(BaseModel):
    internet_gateway_id: str = Field(alias="InternetGatewayId")
    vpc_id: str = Field(alias="VpcId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DetachInternetGatewayRequestVpcDetachInternetGatewayModel(BaseModel):
    internet_gateway_id: str = Field(alias="InternetGatewayId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DetachNetworkInterfaceRequestNetworkInterfaceDetachModel(BaseModel):
    attachment_id: str = Field(alias="AttachmentId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    force: Optional[bool] = Field(default=None, alias="Force")


class DetachNetworkInterfaceRequestModel(BaseModel):
    attachment_id: str = Field(alias="AttachmentId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    force: Optional[bool] = Field(default=None, alias="Force")


class DetachVerifiedAccessTrustProviderRequestModel(BaseModel):
    verified_access_instance_id: str = Field(alias="VerifiedAccessInstanceId")
    verified_access_trust_provider_id: str = Field(
        alias="VerifiedAccessTrustProviderId"
    )
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DetachVolumeRequestInstanceDetachVolumeModel(BaseModel):
    volume_id: str = Field(alias="VolumeId")
    device: Optional[str] = Field(default=None, alias="Device")
    force: Optional[bool] = Field(default=None, alias="Force")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DetachVolumeRequestModel(BaseModel):
    volume_id: str = Field(alias="VolumeId")
    device: Optional[str] = Field(default=None, alias="Device")
    force: Optional[bool] = Field(default=None, alias="Force")
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DetachVolumeRequestVolumeDetachFromInstanceModel(BaseModel):
    device: Optional[str] = Field(default=None, alias="Device")
    force: Optional[bool] = Field(default=None, alias="Force")
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DetachVpnGatewayRequestModel(BaseModel):
    vpc_id: str = Field(alias="VpcId")
    vpn_gateway_id: str = Field(alias="VpnGatewayId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DeviceOptionsModel(BaseModel):
    tenant_id: Optional[str] = Field(default=None, alias="TenantId")


class DisableAddressTransferRequestModel(BaseModel):
    allocation_id: str = Field(alias="AllocationId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DisableAwsNetworkPerformanceMetricSubscriptionRequestModel(BaseModel):
    source: Optional[str] = Field(default=None, alias="Source")
    destination: Optional[str] = Field(default=None, alias="Destination")
    metric: Optional[Literal["aggregate-latency"]] = Field(default=None, alias="Metric")
    statistic: Optional[Literal["p50"]] = Field(default=None, alias="Statistic")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DisableEbsEncryptionByDefaultRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DisableFastLaunchRequestModel(BaseModel):
    image_id: str = Field(alias="ImageId")
    force: Optional[bool] = Field(default=None, alias="Force")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DisableFastSnapshotRestoreStateErrorModel(BaseModel):
    code: Optional[str] = Field(default=None, alias="Code")
    message: Optional[str] = Field(default=None, alias="Message")


class DisableFastSnapshotRestoreSuccessItemModel(BaseModel):
    snapshot_id: Optional[str] = Field(default=None, alias="SnapshotId")
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    state: Optional[
        Literal["disabled", "disabling", "enabled", "enabling", "optimizing"]
    ] = Field(default=None, alias="State")
    state_transition_reason: Optional[str] = Field(
        default=None, alias="StateTransitionReason"
    )
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    owner_alias: Optional[str] = Field(default=None, alias="OwnerAlias")
    enabling_time: Optional[datetime] = Field(default=None, alias="EnablingTime")
    optimizing_time: Optional[datetime] = Field(default=None, alias="OptimizingTime")
    enabled_time: Optional[datetime] = Field(default=None, alias="EnabledTime")
    disabling_time: Optional[datetime] = Field(default=None, alias="DisablingTime")
    disabled_time: Optional[datetime] = Field(default=None, alias="DisabledTime")


class DisableFastSnapshotRestoresRequestModel(BaseModel):
    availability_zones: Sequence[str] = Field(alias="AvailabilityZones")
    source_snapshot_ids: Sequence[str] = Field(alias="SourceSnapshotIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DisableImageDeprecationRequestModel(BaseModel):
    image_id: str = Field(alias="ImageId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DisableIpamOrganizationAdminAccountRequestModel(BaseModel):
    delegated_admin_account_id: str = Field(alias="DelegatedAdminAccountId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DisableSerialConsoleAccessRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DisableTransitGatewayRouteTablePropagationRequestModel(BaseModel):
    transit_gateway_route_table_id: str = Field(alias="TransitGatewayRouteTableId")
    transit_gateway_attachment_id: Optional[str] = Field(
        default=None, alias="TransitGatewayAttachmentId"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    transit_gateway_route_table_announcement_id: Optional[str] = Field(
        default=None, alias="TransitGatewayRouteTableAnnouncementId"
    )


class TransitGatewayPropagationModel(BaseModel):
    transit_gateway_attachment_id: Optional[str] = Field(
        default=None, alias="TransitGatewayAttachmentId"
    )
    resource_id: Optional[str] = Field(default=None, alias="ResourceId")
    resource_type: Optional[
        Literal[
            "connect", "direct-connect-gateway", "peering", "tgw-peering", "vpc", "vpn"
        ]
    ] = Field(default=None, alias="ResourceType")
    transit_gateway_route_table_id: Optional[str] = Field(
        default=None, alias="TransitGatewayRouteTableId"
    )
    state: Optional[Literal["disabled", "disabling", "enabled", "enabling"]] = Field(
        default=None, alias="State"
    )
    transit_gateway_route_table_announcement_id: Optional[str] = Field(
        default=None, alias="TransitGatewayRouteTableAnnouncementId"
    )


class DisableVgwRoutePropagationRequestModel(BaseModel):
    gateway_id: str = Field(alias="GatewayId")
    route_table_id: str = Field(alias="RouteTableId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DisableVpcClassicLinkDnsSupportRequestModel(BaseModel):
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")


class DisableVpcClassicLinkRequestModel(BaseModel):
    vpc_id: str = Field(alias="VpcId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DisableVpcClassicLinkRequestVpcDisableClassicLinkModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DisassociateAddressRequestClassicAddressDisassociateModel(BaseModel):
    association_id: Optional[str] = Field(default=None, alias="AssociationId")
    public_ip: Optional[str] = Field(default=None, alias="PublicIp")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DisassociateAddressRequestNetworkInterfaceAssociationDeleteModel(BaseModel):
    public_ip: Optional[str] = Field(default=None, alias="PublicIp")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DisassociateAddressRequestModel(BaseModel):
    association_id: Optional[str] = Field(default=None, alias="AssociationId")
    public_ip: Optional[str] = Field(default=None, alias="PublicIp")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DisassociateClientVpnTargetNetworkRequestModel(BaseModel):
    client_vpn_endpoint_id: str = Field(alias="ClientVpnEndpointId")
    association_id: str = Field(alias="AssociationId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DisassociateEnclaveCertificateIamRoleRequestModel(BaseModel):
    certificate_arn: str = Field(alias="CertificateArn")
    role_arn: str = Field(alias="RoleArn")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DisassociateIamInstanceProfileRequestModel(BaseModel):
    association_id: str = Field(alias="AssociationId")


class DisassociateIpamResourceDiscoveryRequestModel(BaseModel):
    ipam_resource_discovery_association_id: str = Field(
        alias="IpamResourceDiscoveryAssociationId"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DisassociateNatGatewayAddressRequestModel(BaseModel):
    nat_gateway_id: str = Field(alias="NatGatewayId")
    association_ids: Sequence[str] = Field(alias="AssociationIds")
    max_drain_duration_seconds: Optional[int] = Field(
        default=None, alias="MaxDrainDurationSeconds"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DisassociateRouteTableRequestModel(BaseModel):
    association_id: str = Field(alias="AssociationId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DisassociateRouteTableRequestRouteTableAssociationDeleteModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DisassociateRouteTableRequestServiceResourceDisassociateRouteTableModel(
    BaseModel
):
    association_id: str = Field(alias="AssociationId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DisassociateSubnetCidrBlockRequestModel(BaseModel):
    association_id: str = Field(alias="AssociationId")


class DisassociateTransitGatewayMulticastDomainRequestModel(BaseModel):
    transit_gateway_multicast_domain_id: str = Field(
        alias="TransitGatewayMulticastDomainId"
    )
    transit_gateway_attachment_id: str = Field(alias="TransitGatewayAttachmentId")
    subnet_ids: Sequence[str] = Field(alias="SubnetIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DisassociateTransitGatewayPolicyTableRequestModel(BaseModel):
    transit_gateway_policy_table_id: str = Field(alias="TransitGatewayPolicyTableId")
    transit_gateway_attachment_id: str = Field(alias="TransitGatewayAttachmentId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DisassociateTransitGatewayRouteTableRequestModel(BaseModel):
    transit_gateway_route_table_id: str = Field(alias="TransitGatewayRouteTableId")
    transit_gateway_attachment_id: str = Field(alias="TransitGatewayAttachmentId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DisassociateTrunkInterfaceRequestModel(BaseModel):
    association_id: str = Field(alias="AssociationId")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DisassociateVpcCidrBlockRequestModel(BaseModel):
    association_id: str = Field(alias="AssociationId")


class DiskImageDescriptionModel(BaseModel):
    checksum: Optional[str] = Field(default=None, alias="Checksum")
    format: Optional[Literal["RAW", "VHD", "VMDK"]] = Field(
        default=None, alias="Format"
    )
    import_manifest_url: Optional[str] = Field(default=None, alias="ImportManifestUrl")
    size: Optional[int] = Field(default=None, alias="Size")


class DiskImageDetailModel(BaseModel):
    bytes: int = Field(alias="Bytes")
    format: Literal["RAW", "VHD", "VMDK"] = Field(alias="Format")
    import_manifest_url: str = Field(alias="ImportManifestUrl")


class VolumeDetailModel(BaseModel):
    size: int = Field(alias="Size")


class DiskImageVolumeDescriptionModel(BaseModel):
    id: Optional[str] = Field(default=None, alias="Id")
    size: Optional[int] = Field(default=None, alias="Size")


class DiskInfoModel(BaseModel):
    size_in_gb: Optional[int] = Field(default=None, alias="SizeInGB")
    count: Optional[int] = Field(default=None, alias="Count")
    type: Optional[Literal["hdd", "ssd"]] = Field(default=None, alias="Type")


class DnsEntryModel(BaseModel):
    dns_name: Optional[str] = Field(default=None, alias="DnsName")
    hosted_zone_id: Optional[str] = Field(default=None, alias="HostedZoneId")


class DnsOptionsModel(BaseModel):
    dns_record_ip_type: Optional[
        Literal["dualstack", "ipv4", "ipv6", "service-defined"]
    ] = Field(default=None, alias="DnsRecordIpType")


class DnsServersOptionsModifyStructureModel(BaseModel):
    custom_dns_servers: Optional[Sequence[str]] = Field(
        default=None, alias="CustomDnsServers"
    )
    enabled: Optional[bool] = Field(default=None, alias="Enabled")


class EbsOptimizedInfoModel(BaseModel):
    baseline_bandwidth_in_mbps: Optional[int] = Field(
        default=None, alias="BaselineBandwidthInMbps"
    )
    baseline_throughput_in_mbps: Optional[float] = Field(
        default=None, alias="BaselineThroughputInMBps"
    )
    baseline_iops: Optional[int] = Field(default=None, alias="BaselineIops")
    maximum_bandwidth_in_mbps: Optional[int] = Field(
        default=None, alias="MaximumBandwidthInMbps"
    )
    maximum_throughput_in_mbps: Optional[float] = Field(
        default=None, alias="MaximumThroughputInMBps"
    )
    maximum_iops: Optional[int] = Field(default=None, alias="MaximumIops")


class EbsInstanceBlockDeviceSpecificationModel(BaseModel):
    delete_on_termination: Optional[bool] = Field(
        default=None, alias="DeleteOnTermination"
    )
    volume_id: Optional[str] = Field(default=None, alias="VolumeId")


class EbsInstanceBlockDeviceModel(BaseModel):
    attach_time: Optional[datetime] = Field(default=None, alias="AttachTime")
    delete_on_termination: Optional[bool] = Field(
        default=None, alias="DeleteOnTermination"
    )
    status: Optional[Literal["attached", "attaching", "detached", "detaching"]] = Field(
        default=None, alias="Status"
    )
    volume_id: Optional[str] = Field(default=None, alias="VolumeId")


class EfaInfoModel(BaseModel):
    maximum_efa_interfaces: Optional[int] = Field(
        default=None, alias="MaximumEfaInterfaces"
    )


class InternetGatewayAttachmentModel(BaseModel):
    state: Optional[Literal["attached", "attaching", "detached", "detaching"]] = Field(
        default=None, alias="State"
    )
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")


class ElasticGpuAssociationModel(BaseModel):
    elastic_gpu_id: Optional[str] = Field(default=None, alias="ElasticGpuId")
    elastic_gpu_association_id: Optional[str] = Field(
        default=None, alias="ElasticGpuAssociationId"
    )
    elastic_gpu_association_state: Optional[str] = Field(
        default=None, alias="ElasticGpuAssociationState"
    )
    elastic_gpu_association_time: Optional[str] = Field(
        default=None, alias="ElasticGpuAssociationTime"
    )


class ElasticGpuHealthModel(BaseModel):
    status: Optional[Literal["IMPAIRED", "OK"]] = Field(default=None, alias="Status")


class ElasticGpuSpecificationResponseModel(BaseModel):
    type: Optional[str] = Field(default=None, alias="Type")


class ElasticGpuSpecificationModel(BaseModel):
    type: str = Field(alias="Type")


class ElasticInferenceAcceleratorAssociationModel(BaseModel):
    elastic_inference_accelerator_arn: Optional[str] = Field(
        default=None, alias="ElasticInferenceAcceleratorArn"
    )
    elastic_inference_accelerator_association_id: Optional[str] = Field(
        default=None, alias="ElasticInferenceAcceleratorAssociationId"
    )
    elastic_inference_accelerator_association_state: Optional[str] = Field(
        default=None, alias="ElasticInferenceAcceleratorAssociationState"
    )
    elastic_inference_accelerator_association_time: Optional[datetime] = Field(
        default=None, alias="ElasticInferenceAcceleratorAssociationTime"
    )


class ElasticInferenceAcceleratorModel(BaseModel):
    type: str = Field(alias="Type")
    count: Optional[int] = Field(default=None, alias="Count")


class EnaSrdUdpSpecificationModel(BaseModel):
    ena_srd_udp_enabled: Optional[bool] = Field(default=None, alias="EnaSrdUdpEnabled")


class EnableAddressTransferRequestModel(BaseModel):
    allocation_id: str = Field(alias="AllocationId")
    transfer_account_id: str = Field(alias="TransferAccountId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class EnableAwsNetworkPerformanceMetricSubscriptionRequestModel(BaseModel):
    source: Optional[str] = Field(default=None, alias="Source")
    destination: Optional[str] = Field(default=None, alias="Destination")
    metric: Optional[Literal["aggregate-latency"]] = Field(default=None, alias="Metric")
    statistic: Optional[Literal["p50"]] = Field(default=None, alias="Statistic")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class EnableEbsEncryptionByDefaultRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class FastLaunchLaunchTemplateSpecificationRequestModel(BaseModel):
    version: str = Field(alias="Version")
    launch_template_id: Optional[str] = Field(default=None, alias="LaunchTemplateId")
    launch_template_name: Optional[str] = Field(
        default=None, alias="LaunchTemplateName"
    )


class FastLaunchSnapshotConfigurationRequestModel(BaseModel):
    target_resource_count: Optional[int] = Field(
        default=None, alias="TargetResourceCount"
    )


class EnableFastSnapshotRestoreStateErrorModel(BaseModel):
    code: Optional[str] = Field(default=None, alias="Code")
    message: Optional[str] = Field(default=None, alias="Message")


class EnableFastSnapshotRestoreSuccessItemModel(BaseModel):
    snapshot_id: Optional[str] = Field(default=None, alias="SnapshotId")
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    state: Optional[
        Literal["disabled", "disabling", "enabled", "enabling", "optimizing"]
    ] = Field(default=None, alias="State")
    state_transition_reason: Optional[str] = Field(
        default=None, alias="StateTransitionReason"
    )
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    owner_alias: Optional[str] = Field(default=None, alias="OwnerAlias")
    enabling_time: Optional[datetime] = Field(default=None, alias="EnablingTime")
    optimizing_time: Optional[datetime] = Field(default=None, alias="OptimizingTime")
    enabled_time: Optional[datetime] = Field(default=None, alias="EnabledTime")
    disabling_time: Optional[datetime] = Field(default=None, alias="DisablingTime")
    disabled_time: Optional[datetime] = Field(default=None, alias="DisabledTime")


class EnableFastSnapshotRestoresRequestModel(BaseModel):
    availability_zones: Sequence[str] = Field(alias="AvailabilityZones")
    source_snapshot_ids: Sequence[str] = Field(alias="SourceSnapshotIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class EnableImageDeprecationRequestModel(BaseModel):
    image_id: str = Field(alias="ImageId")
    deprecate_at: Union[datetime, str] = Field(alias="DeprecateAt")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class EnableIpamOrganizationAdminAccountRequestModel(BaseModel):
    delegated_admin_account_id: str = Field(alias="DelegatedAdminAccountId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class EnableReachabilityAnalyzerOrganizationSharingRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class EnableSerialConsoleAccessRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class EnableTransitGatewayRouteTablePropagationRequestModel(BaseModel):
    transit_gateway_route_table_id: str = Field(alias="TransitGatewayRouteTableId")
    transit_gateway_attachment_id: Optional[str] = Field(
        default=None, alias="TransitGatewayAttachmentId"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    transit_gateway_route_table_announcement_id: Optional[str] = Field(
        default=None, alias="TransitGatewayRouteTableAnnouncementId"
    )


class EnableVgwRoutePropagationRequestModel(BaseModel):
    gateway_id: str = Field(alias="GatewayId")
    route_table_id: str = Field(alias="RouteTableId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class EnableVolumeIORequestModel(BaseModel):
    volume_id: str = Field(alias="VolumeId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class EnableVolumeIORequestVolumeEnableIoModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class EnableVpcClassicLinkDnsSupportRequestModel(BaseModel):
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")


class EnableVpcClassicLinkRequestModel(BaseModel):
    vpc_id: str = Field(alias="VpcId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class EnableVpcClassicLinkRequestVpcEnableClassicLinkModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class EnclaveOptionsRequestModel(BaseModel):
    enabled: Optional[bool] = Field(default=None, alias="Enabled")


class EnclaveOptionsModel(BaseModel):
    enabled: Optional[bool] = Field(default=None, alias="Enabled")


class EventInformationModel(BaseModel):
    event_description: Optional[str] = Field(default=None, alias="EventDescription")
    event_sub_type: Optional[str] = Field(default=None, alias="EventSubType")
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")


class TransitGatewayRouteTableRouteModel(BaseModel):
    destination_cidr: Optional[str] = Field(default=None, alias="DestinationCidr")
    state: Optional[str] = Field(default=None, alias="State")
    route_origin: Optional[str] = Field(default=None, alias="RouteOrigin")
    prefix_list_id: Optional[str] = Field(default=None, alias="PrefixListId")
    attachment_id: Optional[str] = Field(default=None, alias="AttachmentId")
    resource_id: Optional[str] = Field(default=None, alias="ResourceId")
    resource_type: Optional[str] = Field(default=None, alias="ResourceType")


class ExportClientVpnClientCertificateRevocationListRequestModel(BaseModel):
    client_vpn_endpoint_id: str = Field(alias="ClientVpnEndpointId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ExportClientVpnClientConfigurationRequestModel(BaseModel):
    client_vpn_endpoint_id: str = Field(alias="ClientVpnEndpointId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ExportTaskS3LocationRequestModel(BaseModel):
    s3_bucket: str = Field(alias="S3Bucket")
    s3_prefix: Optional[str] = Field(default=None, alias="S3Prefix")


class ExportTaskS3LocationModel(BaseModel):
    s3_bucket: Optional[str] = Field(default=None, alias="S3Bucket")
    s3_prefix: Optional[str] = Field(default=None, alias="S3Prefix")


class ExportToS3TaskModel(BaseModel):
    container_format: Optional[Literal["ova"]] = Field(
        default=None, alias="ContainerFormat"
    )
    disk_image_format: Optional[Literal["RAW", "VHD", "VMDK"]] = Field(
        default=None, alias="DiskImageFormat"
    )
    s3_bucket: Optional[str] = Field(default=None, alias="S3Bucket")
    s3_key: Optional[str] = Field(default=None, alias="S3Key")


class InstanceExportDetailsModel(BaseModel):
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    target_environment: Optional[Literal["citrix", "microsoft", "vmware"]] = Field(
        default=None, alias="TargetEnvironment"
    )


class TargetCapacitySpecificationModel(BaseModel):
    total_target_capacity: Optional[int] = Field(
        default=None, alias="TotalTargetCapacity"
    )
    on_demand_target_capacity: Optional[int] = Field(
        default=None, alias="OnDemandTargetCapacity"
    )
    spot_target_capacity: Optional[int] = Field(
        default=None, alias="SpotTargetCapacity"
    )
    default_target_capacity_type: Optional[Literal["on-demand", "spot"]] = Field(
        default=None, alias="DefaultTargetCapacityType"
    )
    target_capacity_unit_type: Optional[Literal["memory-mib", "units", "vcpu"]] = Field(
        default=None, alias="TargetCapacityUnitType"
    )


class FleetLaunchTemplateSpecificationRequestModel(BaseModel):
    launch_template_id: Optional[str] = Field(default=None, alias="LaunchTemplateId")
    launch_template_name: Optional[str] = Field(
        default=None, alias="LaunchTemplateName"
    )
    version: Optional[str] = Field(default=None, alias="Version")


class FleetLaunchTemplateSpecificationModel(BaseModel):
    launch_template_id: Optional[str] = Field(default=None, alias="LaunchTemplateId")
    launch_template_name: Optional[str] = Field(
        default=None, alias="LaunchTemplateName"
    )
    version: Optional[str] = Field(default=None, alias="Version")


class PlacementModel(BaseModel):
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    affinity: Optional[str] = Field(default=None, alias="Affinity")
    group_name: Optional[str] = Field(default=None, alias="GroupName")
    partition_number: Optional[int] = Field(default=None, alias="PartitionNumber")
    host_id: Optional[str] = Field(default=None, alias="HostId")
    tenancy: Optional[Literal["dedicated", "default", "host"]] = Field(
        default=None, alias="Tenancy"
    )
    spread_domain: Optional[str] = Field(default=None, alias="SpreadDomain")
    host_resource_group_arn: Optional[str] = Field(
        default=None, alias="HostResourceGroupArn"
    )
    group_id: Optional[str] = Field(default=None, alias="GroupId")


class PlacementResponseModel(BaseModel):
    group_name: Optional[str] = Field(default=None, alias="GroupName")


class FleetSpotCapacityRebalanceRequestModel(BaseModel):
    replacement_strategy: Optional[
        Literal["launch", "launch-before-terminate"]
    ] = Field(default=None, alias="ReplacementStrategy")
    termination_delay: Optional[int] = Field(default=None, alias="TerminationDelay")


class FleetSpotCapacityRebalanceModel(BaseModel):
    replacement_strategy: Optional[
        Literal["launch", "launch-before-terminate"]
    ] = Field(default=None, alias="ReplacementStrategy")
    termination_delay: Optional[int] = Field(default=None, alias="TerminationDelay")


class FpgaDeviceMemoryInfoModel(BaseModel):
    size_in_mi_b: Optional[int] = Field(default=None, alias="SizeInMiB")


class LoadPermissionModel(BaseModel):
    user_id: Optional[str] = Field(default=None, alias="UserId")
    group: Optional[Literal["all"]] = Field(default=None, alias="Group")


class FpgaImageStateModel(BaseModel):
    code: Optional[Literal["available", "failed", "pending", "unavailable"]] = Field(
        default=None, alias="Code"
    )
    message: Optional[str] = Field(default=None, alias="Message")


class PciIdModel(BaseModel):
    device_id: Optional[str] = Field(default=None, alias="DeviceId")
    vendor_id: Optional[str] = Field(default=None, alias="VendorId")
    subsystem_id: Optional[str] = Field(default=None, alias="SubsystemId")
    subsystem_vendor_id: Optional[str] = Field(default=None, alias="SubsystemVendorId")


class GetAssociatedEnclaveCertificateIamRolesRequestModel(BaseModel):
    certificate_arn: str = Field(alias="CertificateArn")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class GetAssociatedIpv6PoolCidrsRequestModel(BaseModel):
    pool_id: str = Field(alias="PoolId")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class Ipv6CidrAssociationModel(BaseModel):
    ipv6_cidr: Optional[str] = Field(default=None, alias="Ipv6Cidr")
    associated_resource: Optional[str] = Field(default=None, alias="AssociatedResource")


class GetCapacityReservationUsageRequestModel(BaseModel):
    capacity_reservation_id: str = Field(alias="CapacityReservationId")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class InstanceUsageModel(BaseModel):
    account_id: Optional[str] = Field(default=None, alias="AccountId")
    used_instance_count: Optional[int] = Field(default=None, alias="UsedInstanceCount")


class GetConsoleOutputRequestInstanceConsoleOutputModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    latest: Optional[bool] = Field(default=None, alias="Latest")


class GetConsoleOutputRequestModel(BaseModel):
    instance_id: str = Field(alias="InstanceId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    latest: Optional[bool] = Field(default=None, alias="Latest")


class GetConsoleScreenshotRequestModel(BaseModel):
    instance_id: str = Field(alias="InstanceId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    wake_up: Optional[bool] = Field(default=None, alias="WakeUp")


class GetDefaultCreditSpecificationRequestModel(BaseModel):
    instance_family: Literal["t2", "t3", "t3a", "t4g"] = Field(alias="InstanceFamily")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class InstanceFamilyCreditSpecificationModel(BaseModel):
    instance_family: Optional[Literal["t2", "t3", "t3a", "t4g"]] = Field(
        default=None, alias="InstanceFamily"
    )
    cpu_credits: Optional[str] = Field(default=None, alias="CpuCredits")


class GetEbsDefaultKmsKeyIdRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class GetEbsEncryptionByDefaultRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class GetGroupsForCapacityReservationRequestModel(BaseModel):
    capacity_reservation_id: str = Field(alias="CapacityReservationId")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class GetHostReservationPurchasePreviewRequestModel(BaseModel):
    host_id_set: Sequence[str] = Field(alias="HostIdSet")
    offering_id: str = Field(alias="OfferingId")


class PurchaseModel(BaseModel):
    currency_code: Optional[Literal["USD"]] = Field(default=None, alias="CurrencyCode")
    duration: Optional[int] = Field(default=None, alias="Duration")
    host_id_set: Optional[List[str]] = Field(default=None, alias="HostIdSet")
    host_reservation_id: Optional[str] = Field(default=None, alias="HostReservationId")
    hourly_price: Optional[str] = Field(default=None, alias="HourlyPrice")
    instance_family: Optional[str] = Field(default=None, alias="InstanceFamily")
    payment_option: Optional[
        Literal["AllUpfront", "NoUpfront", "PartialUpfront"]
    ] = Field(default=None, alias="PaymentOption")
    upfront_price: Optional[str] = Field(default=None, alias="UpfrontPrice")


class InstanceTypeInfoFromInstanceRequirementsModel(BaseModel):
    instance_type: Optional[str] = Field(default=None, alias="InstanceType")


class GetInstanceUefiDataRequestModel(BaseModel):
    instance_id: str = Field(alias="InstanceId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class GetIpamAddressHistoryRequestModel(BaseModel):
    cidr: str = Field(alias="Cidr")
    ipam_scope_id: str = Field(alias="IpamScopeId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")
    start_time: Optional[Union[datetime, str]] = Field(default=None, alias="StartTime")
    end_time: Optional[Union[datetime, str]] = Field(default=None, alias="EndTime")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class IpamAddressHistoryRecordModel(BaseModel):
    resource_owner_id: Optional[str] = Field(default=None, alias="ResourceOwnerId")
    resource_region: Optional[str] = Field(default=None, alias="ResourceRegion")
    resource_type: Optional[
        Literal["eip", "instance", "network-interface", "subnet", "vpc"]
    ] = Field(default=None, alias="ResourceType")
    resource_id: Optional[str] = Field(default=None, alias="ResourceId")
    resource_cidr: Optional[str] = Field(default=None, alias="ResourceCidr")
    resource_name: Optional[str] = Field(default=None, alias="ResourceName")
    resource_compliance_status: Optional[
        Literal["compliant", "ignored", "noncompliant", "unmanaged"]
    ] = Field(default=None, alias="ResourceComplianceStatus")
    resource_overlap_status: Optional[
        Literal["ignored", "nonoverlapping", "overlapping"]
    ] = Field(default=None, alias="ResourceOverlapStatus")
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")
    sampled_start_time: Optional[datetime] = Field(
        default=None, alias="SampledStartTime"
    )
    sampled_end_time: Optional[datetime] = Field(default=None, alias="SampledEndTime")


class GetLaunchTemplateDataRequestModel(BaseModel):
    instance_id: str = Field(alias="InstanceId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class GetManagedPrefixListAssociationsRequestModel(BaseModel):
    prefix_list_id: str = Field(alias="PrefixListId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class PrefixListAssociationModel(BaseModel):
    resource_id: Optional[str] = Field(default=None, alias="ResourceId")
    resource_owner: Optional[str] = Field(default=None, alias="ResourceOwner")


class GetManagedPrefixListEntriesRequestModel(BaseModel):
    prefix_list_id: str = Field(alias="PrefixListId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    target_version: Optional[int] = Field(default=None, alias="TargetVersion")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class PrefixListEntryModel(BaseModel):
    cidr: Optional[str] = Field(default=None, alias="Cidr")
    description: Optional[str] = Field(default=None, alias="Description")


class GetNetworkInsightsAccessScopeAnalysisFindingsRequestModel(BaseModel):
    network_insights_access_scope_analysis_id: str = Field(
        alias="NetworkInsightsAccessScopeAnalysisId"
    )
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class GetNetworkInsightsAccessScopeContentRequestModel(BaseModel):
    network_insights_access_scope_id: str = Field(alias="NetworkInsightsAccessScopeId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class GetPasswordDataRequestInstancePasswordDataModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class GetPasswordDataRequestModel(BaseModel):
    instance_id: str = Field(alias="InstanceId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ReservationValueModel(BaseModel):
    hourly_price: Optional[str] = Field(default=None, alias="HourlyPrice")
    remaining_total_value: Optional[str] = Field(
        default=None, alias="RemainingTotalValue"
    )
    remaining_upfront_value: Optional[str] = Field(
        default=None, alias="RemainingUpfrontValue"
    )


class GetSerialConsoleAccessStatusRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class SpotPlacementScoreModel(BaseModel):
    region: Optional[str] = Field(default=None, alias="Region")
    availability_zone_id: Optional[str] = Field(
        default=None, alias="AvailabilityZoneId"
    )
    score: Optional[int] = Field(default=None, alias="Score")


class TransitGatewayAttachmentPropagationModel(BaseModel):
    transit_gateway_route_table_id: Optional[str] = Field(
        default=None, alias="TransitGatewayRouteTableId"
    )
    state: Optional[Literal["disabled", "disabling", "enabled", "enabling"]] = Field(
        default=None, alias="State"
    )


class TransitGatewayRouteTableAssociationModel(BaseModel):
    transit_gateway_attachment_id: Optional[str] = Field(
        default=None, alias="TransitGatewayAttachmentId"
    )
    resource_id: Optional[str] = Field(default=None, alias="ResourceId")
    resource_type: Optional[
        Literal[
            "connect", "direct-connect-gateway", "peering", "tgw-peering", "vpc", "vpn"
        ]
    ] = Field(default=None, alias="ResourceType")
    state: Optional[
        Literal["associated", "associating", "disassociated", "disassociating"]
    ] = Field(default=None, alias="State")


class TransitGatewayRouteTablePropagationModel(BaseModel):
    transit_gateway_attachment_id: Optional[str] = Field(
        default=None, alias="TransitGatewayAttachmentId"
    )
    resource_id: Optional[str] = Field(default=None, alias="ResourceId")
    resource_type: Optional[
        Literal[
            "connect", "direct-connect-gateway", "peering", "tgw-peering", "vpc", "vpn"
        ]
    ] = Field(default=None, alias="ResourceType")
    state: Optional[Literal["disabled", "disabling", "enabled", "enabling"]] = Field(
        default=None, alias="State"
    )
    transit_gateway_route_table_announcement_id: Optional[str] = Field(
        default=None, alias="TransitGatewayRouteTableAnnouncementId"
    )


class GetVerifiedAccessEndpointPolicyRequestModel(BaseModel):
    verified_access_endpoint_id: str = Field(alias="VerifiedAccessEndpointId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class GetVerifiedAccessGroupPolicyRequestModel(BaseModel):
    verified_access_group_id: str = Field(alias="VerifiedAccessGroupId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class GetVpnConnectionDeviceSampleConfigurationRequestModel(BaseModel):
    vpn_connection_id: str = Field(alias="VpnConnectionId")
    vpn_connection_device_type_id: str = Field(alias="VpnConnectionDeviceTypeId")
    internet_key_exchange_version: Optional[str] = Field(
        default=None, alias="InternetKeyExchangeVersion"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class GetVpnConnectionDeviceTypesRequestModel(BaseModel):
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class VpnConnectionDeviceTypeModel(BaseModel):
    vpn_connection_device_type_id: Optional[str] = Field(
        default=None, alias="VpnConnectionDeviceTypeId"
    )
    vendor: Optional[str] = Field(default=None, alias="Vendor")
    platform: Optional[str] = Field(default=None, alias="Platform")
    software: Optional[str] = Field(default=None, alias="Software")


class GpuDeviceMemoryInfoModel(BaseModel):
    size_in_mi_b: Optional[int] = Field(default=None, alias="SizeInMiB")


class HibernationOptionsRequestModel(BaseModel):
    configured: Optional[bool] = Field(default=None, alias="Configured")


class HibernationOptionsModel(BaseModel):
    configured: Optional[bool] = Field(default=None, alias="Configured")


class HostInstanceModel(BaseModel):
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    instance_type: Optional[str] = Field(default=None, alias="InstanceType")
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")


class HostPropertiesModel(BaseModel):
    cores: Optional[int] = Field(default=None, alias="Cores")
    instance_type: Optional[str] = Field(default=None, alias="InstanceType")
    instance_family: Optional[str] = Field(default=None, alias="InstanceFamily")
    sockets: Optional[int] = Field(default=None, alias="Sockets")
    total_vcpus: Optional[int] = Field(default=None, alias="TotalVCpus")


class IKEVersionsListValueModel(BaseModel):
    value: Optional[str] = Field(default=None, alias="Value")


class IKEVersionsRequestListValueModel(BaseModel):
    value: Optional[str] = Field(default=None, alias="Value")


class IamInstanceProfileModel(BaseModel):
    arn: Optional[str] = Field(default=None, alias="Arn")
    id: Optional[str] = Field(default=None, alias="Id")


class LaunchPermissionModel(BaseModel):
    group: Optional[Literal["all"]] = Field(default=None, alias="Group")
    user_id: Optional[str] = Field(default=None, alias="UserId")
    organization_arn: Optional[str] = Field(default=None, alias="OrganizationArn")
    organizational_unit_arn: Optional[str] = Field(
        default=None, alias="OrganizationalUnitArn"
    )


class UserBucketModel(BaseModel):
    s3_bucket: Optional[str] = Field(default=None, alias="S3Bucket")
    s3_key: Optional[str] = Field(default=None, alias="S3Key")


class ImageRecycleBinInfoModel(BaseModel):
    image_id: Optional[str] = Field(default=None, alias="ImageId")
    name: Optional[str] = Field(default=None, alias="Name")
    description: Optional[str] = Field(default=None, alias="Description")
    recycle_bin_enter_time: Optional[datetime] = Field(
        default=None, alias="RecycleBinEnterTime"
    )
    recycle_bin_exit_time: Optional[datetime] = Field(
        default=None, alias="RecycleBinExitTime"
    )


class StateReasonModel(BaseModel):
    code: Optional[str] = Field(default=None, alias="Code")
    message: Optional[str] = Field(default=None, alias="Message")


class ImportClientVpnClientCertificateRevocationListRequestModel(BaseModel):
    client_vpn_endpoint_id: str = Field(alias="ClientVpnEndpointId")
    certificate_revocation_list: str = Field(alias="CertificateRevocationList")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ImportImageLicenseConfigurationRequestModel(BaseModel):
    license_configuration_arn: Optional[str] = Field(
        default=None, alias="LicenseConfigurationArn"
    )


class ImportImageLicenseConfigurationResponseModel(BaseModel):
    license_configuration_arn: Optional[str] = Field(
        default=None, alias="LicenseConfigurationArn"
    )


class UserDataModel(BaseModel):
    data: Optional[str] = Field(default=None, alias="Data")


class InferenceDeviceInfoModel(BaseModel):
    count: Optional[int] = Field(default=None, alias="Count")
    name: Optional[str] = Field(default=None, alias="Name")
    manufacturer: Optional[str] = Field(default=None, alias="Manufacturer")


class InstanceCountModel(BaseModel):
    instance_count: Optional[int] = Field(default=None, alias="InstanceCount")
    state: Optional[Literal["available", "cancelled", "pending", "sold"]] = Field(
        default=None, alias="State"
    )


class InstanceCreditSpecificationRequestModel(BaseModel):
    instance_id: str = Field(alias="InstanceId")
    cpu_credits: Optional[str] = Field(default=None, alias="CpuCredits")


class InstanceEventWindowTimeRangeModel(BaseModel):
    start_week_day: Optional[
        Literal[
            "friday", "monday", "saturday", "sunday", "thursday", "tuesday", "wednesday"
        ]
    ] = Field(default=None, alias="StartWeekDay")
    start_hour: Optional[int] = Field(default=None, alias="StartHour")
    end_week_day: Optional[
        Literal[
            "friday", "monday", "saturday", "sunday", "thursday", "tuesday", "wednesday"
        ]
    ] = Field(default=None, alias="EndWeekDay")
    end_hour: Optional[int] = Field(default=None, alias="EndHour")


class InstanceIpv4PrefixModel(BaseModel):
    ipv4_prefix: Optional[str] = Field(default=None, alias="Ipv4Prefix")


class InstanceIpv6AddressRequestModel(BaseModel):
    ipv6_address: Optional[str] = Field(default=None, alias="Ipv6Address")


class InstanceIpv6PrefixModel(BaseModel):
    ipv6_prefix: Optional[str] = Field(default=None, alias="Ipv6Prefix")


class InstanceMaintenanceOptionsRequestModel(BaseModel):
    auto_recovery: Optional[Literal["default", "disabled"]] = Field(
        default=None, alias="AutoRecovery"
    )


class InstanceMaintenanceOptionsModel(BaseModel):
    auto_recovery: Optional[Literal["default", "disabled"]] = Field(
        default=None, alias="AutoRecovery"
    )


class SpotMarketOptionsModel(BaseModel):
    max_price: Optional[str] = Field(default=None, alias="MaxPrice")
    spot_instance_type: Optional[Literal["one-time", "persistent"]] = Field(
        default=None, alias="SpotInstanceType"
    )
    block_duration_minutes: Optional[int] = Field(
        default=None, alias="BlockDurationMinutes"
    )
    valid_until: Optional[Union[datetime, str]] = Field(
        default=None, alias="ValidUntil"
    )
    instance_interruption_behavior: Optional[
        Literal["hibernate", "stop", "terminate"]
    ] = Field(default=None, alias="InstanceInterruptionBehavior")


class InstanceMetadataOptionsRequestModel(BaseModel):
    http_tokens: Optional[Literal["optional", "required"]] = Field(
        default=None, alias="HttpTokens"
    )
    http_put_response_hop_limit: Optional[int] = Field(
        default=None, alias="HttpPutResponseHopLimit"
    )
    http_endpoint: Optional[Literal["disabled", "enabled"]] = Field(
        default=None, alias="HttpEndpoint"
    )
    http_protocol_ipv6: Optional[Literal["disabled", "enabled"]] = Field(
        default=None, alias="HttpProtocolIpv6"
    )
    instance_metadata_tags: Optional[Literal["disabled", "enabled"]] = Field(
        default=None, alias="InstanceMetadataTags"
    )


class InstanceMetadataOptionsResponseModel(BaseModel):
    state: Optional[Literal["applied", "pending"]] = Field(default=None, alias="State")
    http_tokens: Optional[Literal["optional", "required"]] = Field(
        default=None, alias="HttpTokens"
    )
    http_put_response_hop_limit: Optional[int] = Field(
        default=None, alias="HttpPutResponseHopLimit"
    )
    http_endpoint: Optional[Literal["disabled", "enabled"]] = Field(
        default=None, alias="HttpEndpoint"
    )
    http_protocol_ipv6: Optional[Literal["disabled", "enabled"]] = Field(
        default=None, alias="HttpProtocolIpv6"
    )
    instance_metadata_tags: Optional[Literal["disabled", "enabled"]] = Field(
        default=None, alias="InstanceMetadataTags"
    )


class MonitoringModel(BaseModel):
    state: Optional[Literal["disabled", "disabling", "enabled", "pending"]] = Field(
        default=None, alias="State"
    )


class InstanceNetworkInterfaceAssociationModel(BaseModel):
    carrier_ip: Optional[str] = Field(default=None, alias="CarrierIp")
    customer_owned_ip: Optional[str] = Field(default=None, alias="CustomerOwnedIp")
    ip_owner_id: Optional[str] = Field(default=None, alias="IpOwnerId")
    public_dns_name: Optional[str] = Field(default=None, alias="PublicDnsName")
    public_ip: Optional[str] = Field(default=None, alias="PublicIp")


class InstanceNetworkInterfaceAttachmentModel(BaseModel):
    attach_time: Optional[datetime] = Field(default=None, alias="AttachTime")
    attachment_id: Optional[str] = Field(default=None, alias="AttachmentId")
    delete_on_termination: Optional[bool] = Field(
        default=None, alias="DeleteOnTermination"
    )
    device_index: Optional[int] = Field(default=None, alias="DeviceIndex")
    status: Optional[Literal["attached", "attaching", "detached", "detaching"]] = Field(
        default=None, alias="Status"
    )
    network_card_index: Optional[int] = Field(default=None, alias="NetworkCardIndex")


class MemoryGiBPerVCpuRequestModel(BaseModel):
    min: Optional[float] = Field(default=None, alias="Min")
    max: Optional[float] = Field(default=None, alias="Max")


class MemoryMiBRequestModel(BaseModel):
    min: int = Field(alias="Min")
    max: Optional[int] = Field(default=None, alias="Max")


class NetworkBandwidthGbpsRequestModel(BaseModel):
    min: Optional[float] = Field(default=None, alias="Min")
    max: Optional[float] = Field(default=None, alias="Max")


class NetworkInterfaceCountRequestModel(BaseModel):
    min: Optional[int] = Field(default=None, alias="Min")
    max: Optional[int] = Field(default=None, alias="Max")


class TotalLocalStorageGBRequestModel(BaseModel):
    min: Optional[float] = Field(default=None, alias="Min")
    max: Optional[float] = Field(default=None, alias="Max")


class VCpuCountRangeRequestModel(BaseModel):
    min: int = Field(alias="Min")
    max: Optional[int] = Field(default=None, alias="Max")


class MemoryGiBPerVCpuModel(BaseModel):
    min: Optional[float] = Field(default=None, alias="Min")
    max: Optional[float] = Field(default=None, alias="Max")


class MemoryMiBModel(BaseModel):
    min: Optional[int] = Field(default=None, alias="Min")
    max: Optional[int] = Field(default=None, alias="Max")


class NetworkBandwidthGbpsModel(BaseModel):
    min: Optional[float] = Field(default=None, alias="Min")
    max: Optional[float] = Field(default=None, alias="Max")


class NetworkInterfaceCountModel(BaseModel):
    min: Optional[int] = Field(default=None, alias="Min")
    max: Optional[int] = Field(default=None, alias="Max")


class TotalLocalStorageGBModel(BaseModel):
    min: Optional[float] = Field(default=None, alias="Min")
    max: Optional[float] = Field(default=None, alias="Max")


class VCpuCountRangeModel(BaseModel):
    min: Optional[int] = Field(default=None, alias="Min")
    max: Optional[int] = Field(default=None, alias="Max")


class InstanceStateModel(BaseModel):
    code: Optional[int] = Field(default=None, alias="Code")
    name: Optional[
        Literal[
            "pending", "running", "shutting-down", "stopped", "stopping", "terminated"
        ]
    ] = Field(default=None, alias="Name")


class InstanceStatusDetailsModel(BaseModel):
    impaired_since: Optional[datetime] = Field(default=None, alias="ImpairedSince")
    name: Optional[Literal["reachability"]] = Field(default=None, alias="Name")
    status: Optional[
        Literal["failed", "initializing", "insufficient-data", "passed"]
    ] = Field(default=None, alias="Status")


class InstanceStatusEventModel(BaseModel):
    instance_event_id: Optional[str] = Field(default=None, alias="InstanceEventId")
    code: Optional[
        Literal[
            "instance-reboot",
            "instance-retirement",
            "instance-stop",
            "system-maintenance",
            "system-reboot",
        ]
    ] = Field(default=None, alias="Code")
    description: Optional[str] = Field(default=None, alias="Description")
    not_after: Optional[datetime] = Field(default=None, alias="NotAfter")
    not_before: Optional[datetime] = Field(default=None, alias="NotBefore")
    not_before_deadline: Optional[datetime] = Field(
        default=None, alias="NotBeforeDeadline"
    )


class LicenseConfigurationModel(BaseModel):
    license_configuration_arn: Optional[str] = Field(
        default=None, alias="LicenseConfigurationArn"
    )


class PrivateDnsNameOptionsResponseModel(BaseModel):
    hostname_type: Optional[Literal["ip-name", "resource-name"]] = Field(
        default=None, alias="HostnameType"
    )
    enable_resource_name_dns_arecord: Optional[bool] = Field(
        default=None, alias="EnableResourceNameDnsARecord"
    )
    enable_resource_name_dns_aaaarecord: Optional[bool] = Field(
        default=None, alias="EnableResourceNameDnsAAAARecord"
    )


class MemoryInfoModel(BaseModel):
    size_in_mi_b: Optional[int] = Field(default=None, alias="SizeInMiB")


class PlacementGroupInfoModel(BaseModel):
    supported_strategies: Optional[
        List[Literal["cluster", "partition", "spread"]]
    ] = Field(default=None, alias="SupportedStrategies")


class ProcessorInfoModel(BaseModel):
    supported_architectures: Optional[
        List[Literal["arm64", "arm64_mac", "i386", "x86_64", "x86_64_mac"]]
    ] = Field(default=None, alias="SupportedArchitectures")
    sustained_clock_speed_in_ghz: Optional[float] = Field(
        default=None, alias="SustainedClockSpeedInGhz"
    )


class VCpuInfoModel(BaseModel):
    default_vcpus: Optional[int] = Field(default=None, alias="DefaultVCpus")
    default_cores: Optional[int] = Field(default=None, alias="DefaultCores")
    default_threads_per_core: Optional[int] = Field(
        default=None, alias="DefaultThreadsPerCore"
    )
    valid_cores: Optional[List[int]] = Field(default=None, alias="ValidCores")
    valid_threads_per_core: Optional[List[int]] = Field(
        default=None, alias="ValidThreadsPerCore"
    )


class IpRangeModel(BaseModel):
    cidr_ip: Optional[str] = Field(default=None, alias="CidrIp")
    description: Optional[str] = Field(default=None, alias="Description")


class Ipv6RangeModel(BaseModel):
    cidr_ipv6: Optional[str] = Field(default=None, alias="CidrIpv6")
    description: Optional[str] = Field(default=None, alias="Description")


class PrefixListIdModel(BaseModel):
    description: Optional[str] = Field(default=None, alias="Description")
    prefix_list_id: Optional[str] = Field(default=None, alias="PrefixListId")


class UserIdGroupPairModel(BaseModel):
    description: Optional[str] = Field(default=None, alias="Description")
    group_id: Optional[str] = Field(default=None, alias="GroupId")
    group_name: Optional[str] = Field(default=None, alias="GroupName")
    peering_status: Optional[str] = Field(default=None, alias="PeeringStatus")
    user_id: Optional[str] = Field(default=None, alias="UserId")
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")
    vpc_peering_connection_id: Optional[str] = Field(
        default=None, alias="VpcPeeringConnectionId"
    )


class IpamCidrAuthorizationContextModel(BaseModel):
    message: Optional[str] = Field(default=None, alias="Message")
    signature: Optional[str] = Field(default=None, alias="Signature")


class IpamDiscoveryFailureReasonModel(BaseModel):
    code: Optional[
        Literal["assume-role-failure", "throttling-failure", "unauthorized-failure"]
    ] = Field(default=None, alias="Code")
    message: Optional[str] = Field(default=None, alias="Message")


class IpamResourceTagModel(BaseModel):
    key: Optional[str] = Field(default=None, alias="Key")
    value: Optional[str] = Field(default=None, alias="Value")


class IpamOperatingRegionModel(BaseModel):
    region_name: Optional[str] = Field(default=None, alias="RegionName")


class IpamPoolCidrFailureReasonModel(BaseModel):
    code: Optional[Literal["cidr-not-available", "limit-exceeded"]] = Field(
        default=None, alias="Code"
    )
    message: Optional[str] = Field(default=None, alias="Message")


class Ipv4PrefixSpecificationResponseModel(BaseModel):
    ipv4_prefix: Optional[str] = Field(default=None, alias="Ipv4Prefix")


class Ipv6CidrBlockModel(BaseModel):
    ipv6_cidr_block: Optional[str] = Field(default=None, alias="Ipv6CidrBlock")


class PoolCidrBlockModel(BaseModel):
    cidr: Optional[str] = Field(default=None, alias="Cidr")


class Ipv6PrefixSpecificationResponseModel(BaseModel):
    ipv6_prefix: Optional[str] = Field(default=None, alias="Ipv6Prefix")


class Ipv6PrefixSpecificationModel(BaseModel):
    ipv6_prefix: Optional[str] = Field(default=None, alias="Ipv6Prefix")


class LastErrorModel(BaseModel):
    message: Optional[str] = Field(default=None, alias="Message")
    code: Optional[str] = Field(default=None, alias="Code")


class RunInstancesMonitoringEnabledModel(BaseModel):
    enabled: bool = Field(alias="Enabled")


class SpotPlacementModel(BaseModel):
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    group_name: Optional[str] = Field(default=None, alias="GroupName")
    tenancy: Optional[Literal["dedicated", "default", "host"]] = Field(
        default=None, alias="Tenancy"
    )


class LaunchTemplateEbsBlockDeviceRequestModel(BaseModel):
    encrypted: Optional[bool] = Field(default=None, alias="Encrypted")
    delete_on_termination: Optional[bool] = Field(
        default=None, alias="DeleteOnTermination"
    )
    iops: Optional[int] = Field(default=None, alias="Iops")
    kms_key_id: Optional[str] = Field(default=None, alias="KmsKeyId")
    snapshot_id: Optional[str] = Field(default=None, alias="SnapshotId")
    volume_size: Optional[int] = Field(default=None, alias="VolumeSize")
    volume_type: Optional[
        Literal["gp2", "gp3", "io1", "io2", "sc1", "st1", "standard"]
    ] = Field(default=None, alias="VolumeType")
    throughput: Optional[int] = Field(default=None, alias="Throughput")


class LaunchTemplateEbsBlockDeviceModel(BaseModel):
    encrypted: Optional[bool] = Field(default=None, alias="Encrypted")
    delete_on_termination: Optional[bool] = Field(
        default=None, alias="DeleteOnTermination"
    )
    iops: Optional[int] = Field(default=None, alias="Iops")
    kms_key_id: Optional[str] = Field(default=None, alias="KmsKeyId")
    snapshot_id: Optional[str] = Field(default=None, alias="SnapshotId")
    volume_size: Optional[int] = Field(default=None, alias="VolumeSize")
    volume_type: Optional[
        Literal["gp2", "gp3", "io1", "io2", "sc1", "st1", "standard"]
    ] = Field(default=None, alias="VolumeType")
    throughput: Optional[int] = Field(default=None, alias="Throughput")


class LaunchTemplateCpuOptionsRequestModel(BaseModel):
    core_count: Optional[int] = Field(default=None, alias="CoreCount")
    threads_per_core: Optional[int] = Field(default=None, alias="ThreadsPerCore")


class LaunchTemplateCpuOptionsModel(BaseModel):
    core_count: Optional[int] = Field(default=None, alias="CoreCount")
    threads_per_core: Optional[int] = Field(default=None, alias="ThreadsPerCore")


class LaunchTemplateElasticInferenceAcceleratorResponseModel(BaseModel):
    type: Optional[str] = Field(default=None, alias="Type")
    count: Optional[int] = Field(default=None, alias="Count")


class LaunchTemplateElasticInferenceAcceleratorModel(BaseModel):
    type: str = Field(alias="Type")
    count: Optional[int] = Field(default=None, alias="Count")


class LaunchTemplateEnclaveOptionsRequestModel(BaseModel):
    enabled: Optional[bool] = Field(default=None, alias="Enabled")


class LaunchTemplateEnclaveOptionsModel(BaseModel):
    enabled: Optional[bool] = Field(default=None, alias="Enabled")


class LaunchTemplateHibernationOptionsRequestModel(BaseModel):
    configured: Optional[bool] = Field(default=None, alias="Configured")


class LaunchTemplateHibernationOptionsModel(BaseModel):
    configured: Optional[bool] = Field(default=None, alias="Configured")


class LaunchTemplateIamInstanceProfileSpecificationRequestModel(BaseModel):
    arn: Optional[str] = Field(default=None, alias="Arn")
    name: Optional[str] = Field(default=None, alias="Name")


class LaunchTemplateIamInstanceProfileSpecificationModel(BaseModel):
    arn: Optional[str] = Field(default=None, alias="Arn")
    name: Optional[str] = Field(default=None, alias="Name")


class LaunchTemplateInstanceMaintenanceOptionsRequestModel(BaseModel):
    auto_recovery: Optional[Literal["default", "disabled"]] = Field(
        default=None, alias="AutoRecovery"
    )


class LaunchTemplateInstanceMaintenanceOptionsModel(BaseModel):
    auto_recovery: Optional[Literal["default", "disabled"]] = Field(
        default=None, alias="AutoRecovery"
    )


class LaunchTemplateSpotMarketOptionsRequestModel(BaseModel):
    max_price: Optional[str] = Field(default=None, alias="MaxPrice")
    spot_instance_type: Optional[Literal["one-time", "persistent"]] = Field(
        default=None, alias="SpotInstanceType"
    )
    block_duration_minutes: Optional[int] = Field(
        default=None, alias="BlockDurationMinutes"
    )
    valid_until: Optional[Union[datetime, str]] = Field(
        default=None, alias="ValidUntil"
    )
    instance_interruption_behavior: Optional[
        Literal["hibernate", "stop", "terminate"]
    ] = Field(default=None, alias="InstanceInterruptionBehavior")


class LaunchTemplateSpotMarketOptionsModel(BaseModel):
    max_price: Optional[str] = Field(default=None, alias="MaxPrice")
    spot_instance_type: Optional[Literal["one-time", "persistent"]] = Field(
        default=None, alias="SpotInstanceType"
    )
    block_duration_minutes: Optional[int] = Field(
        default=None, alias="BlockDurationMinutes"
    )
    valid_until: Optional[datetime] = Field(default=None, alias="ValidUntil")
    instance_interruption_behavior: Optional[
        Literal["hibernate", "stop", "terminate"]
    ] = Field(default=None, alias="InstanceInterruptionBehavior")


class LaunchTemplateInstanceMetadataOptionsRequestModel(BaseModel):
    http_tokens: Optional[Literal["optional", "required"]] = Field(
        default=None, alias="HttpTokens"
    )
    http_put_response_hop_limit: Optional[int] = Field(
        default=None, alias="HttpPutResponseHopLimit"
    )
    http_endpoint: Optional[Literal["disabled", "enabled"]] = Field(
        default=None, alias="HttpEndpoint"
    )
    http_protocol_ipv6: Optional[Literal["disabled", "enabled"]] = Field(
        default=None, alias="HttpProtocolIpv6"
    )
    instance_metadata_tags: Optional[Literal["disabled", "enabled"]] = Field(
        default=None, alias="InstanceMetadataTags"
    )


class LaunchTemplateInstanceMetadataOptionsModel(BaseModel):
    state: Optional[Literal["applied", "pending"]] = Field(default=None, alias="State")
    http_tokens: Optional[Literal["optional", "required"]] = Field(
        default=None, alias="HttpTokens"
    )
    http_put_response_hop_limit: Optional[int] = Field(
        default=None, alias="HttpPutResponseHopLimit"
    )
    http_endpoint: Optional[Literal["disabled", "enabled"]] = Field(
        default=None, alias="HttpEndpoint"
    )
    http_protocol_ipv6: Optional[Literal["disabled", "enabled"]] = Field(
        default=None, alias="HttpProtocolIpv6"
    )
    instance_metadata_tags: Optional[Literal["disabled", "enabled"]] = Field(
        default=None, alias="InstanceMetadataTags"
    )


class LaunchTemplateLicenseConfigurationRequestModel(BaseModel):
    license_configuration_arn: Optional[str] = Field(
        default=None, alias="LicenseConfigurationArn"
    )


class LaunchTemplateLicenseConfigurationModel(BaseModel):
    license_configuration_arn: Optional[str] = Field(
        default=None, alias="LicenseConfigurationArn"
    )


class LaunchTemplatePlacementRequestModel(BaseModel):
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    affinity: Optional[str] = Field(default=None, alias="Affinity")
    group_name: Optional[str] = Field(default=None, alias="GroupName")
    host_id: Optional[str] = Field(default=None, alias="HostId")
    tenancy: Optional[Literal["dedicated", "default", "host"]] = Field(
        default=None, alias="Tenancy"
    )
    spread_domain: Optional[str] = Field(default=None, alias="SpreadDomain")
    host_resource_group_arn: Optional[str] = Field(
        default=None, alias="HostResourceGroupArn"
    )
    partition_number: Optional[int] = Field(default=None, alias="PartitionNumber")
    group_id: Optional[str] = Field(default=None, alias="GroupId")


class LaunchTemplatePlacementModel(BaseModel):
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    affinity: Optional[str] = Field(default=None, alias="Affinity")
    group_name: Optional[str] = Field(default=None, alias="GroupName")
    host_id: Optional[str] = Field(default=None, alias="HostId")
    tenancy: Optional[Literal["dedicated", "default", "host"]] = Field(
        default=None, alias="Tenancy"
    )
    spread_domain: Optional[str] = Field(default=None, alias="SpreadDomain")
    host_resource_group_arn: Optional[str] = Field(
        default=None, alias="HostResourceGroupArn"
    )
    partition_number: Optional[int] = Field(default=None, alias="PartitionNumber")
    group_id: Optional[str] = Field(default=None, alias="GroupId")


class LaunchTemplatePrivateDnsNameOptionsRequestModel(BaseModel):
    hostname_type: Optional[Literal["ip-name", "resource-name"]] = Field(
        default=None, alias="HostnameType"
    )
    enable_resource_name_dns_arecord: Optional[bool] = Field(
        default=None, alias="EnableResourceNameDnsARecord"
    )
    enable_resource_name_dns_aaaarecord: Optional[bool] = Field(
        default=None, alias="EnableResourceNameDnsAAAARecord"
    )


class LaunchTemplatePrivateDnsNameOptionsModel(BaseModel):
    hostname_type: Optional[Literal["ip-name", "resource-name"]] = Field(
        default=None, alias="HostnameType"
    )
    enable_resource_name_dns_arecord: Optional[bool] = Field(
        default=None, alias="EnableResourceNameDnsARecord"
    )
    enable_resource_name_dns_aaaarecord: Optional[bool] = Field(
        default=None, alias="EnableResourceNameDnsAAAARecord"
    )


class LaunchTemplateSpecificationModel(BaseModel):
    launch_template_id: Optional[str] = Field(default=None, alias="LaunchTemplateId")
    launch_template_name: Optional[str] = Field(
        default=None, alias="LaunchTemplateName"
    )
    version: Optional[str] = Field(default=None, alias="Version")


class LaunchTemplatesMonitoringRequestModel(BaseModel):
    enabled: Optional[bool] = Field(default=None, alias="Enabled")


class LaunchTemplatesMonitoringModel(BaseModel):
    enabled: Optional[bool] = Field(default=None, alias="Enabled")


class LicenseConfigurationRequestModel(BaseModel):
    license_configuration_arn: Optional[str] = Field(
        default=None, alias="LicenseConfigurationArn"
    )


class ListImagesInRecycleBinRequestModel(BaseModel):
    image_ids: Optional[Sequence[str]] = Field(default=None, alias="ImageIds")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ListSnapshotsInRecycleBinRequestModel(BaseModel):
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    snapshot_ids: Optional[Sequence[str]] = Field(default=None, alias="SnapshotIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class SnapshotRecycleBinInfoModel(BaseModel):
    snapshot_id: Optional[str] = Field(default=None, alias="SnapshotId")
    recycle_bin_enter_time: Optional[datetime] = Field(
        default=None, alias="RecycleBinEnterTime"
    )
    recycle_bin_exit_time: Optional[datetime] = Field(
        default=None, alias="RecycleBinExitTime"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    volume_id: Optional[str] = Field(default=None, alias="VolumeId")


class LoadPermissionRequestModel(BaseModel):
    group: Optional[Literal["all"]] = Field(default=None, alias="Group")
    user_id: Optional[str] = Field(default=None, alias="UserId")


class ModifyAddressAttributeRequestModel(BaseModel):
    allocation_id: str = Field(alias="AllocationId")
    domain_name: Optional[str] = Field(default=None, alias="DomainName")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ModifyAvailabilityZoneGroupRequestModel(BaseModel):
    group_name: str = Field(alias="GroupName")
    opt_in_status: Literal["not-opted-in", "opted-in"] = Field(alias="OptInStatus")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ModifyCapacityReservationFleetRequestModel(BaseModel):
    capacity_reservation_fleet_id: str = Field(alias="CapacityReservationFleetId")
    total_target_capacity: Optional[int] = Field(
        default=None, alias="TotalTargetCapacity"
    )
    end_date: Optional[Union[datetime, str]] = Field(default=None, alias="EndDate")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    remove_end_date: Optional[bool] = Field(default=None, alias="RemoveEndDate")


class ModifyCapacityReservationRequestModel(BaseModel):
    capacity_reservation_id: str = Field(alias="CapacityReservationId")
    instance_count: Optional[int] = Field(default=None, alias="InstanceCount")
    end_date: Optional[Union[datetime, str]] = Field(default=None, alias="EndDate")
    end_date_type: Optional[Literal["limited", "unlimited"]] = Field(
        default=None, alias="EndDateType"
    )
    accept: Optional[bool] = Field(default=None, alias="Accept")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    additional_info: Optional[str] = Field(default=None, alias="AdditionalInfo")


class ModifyDefaultCreditSpecificationRequestModel(BaseModel):
    instance_family: Literal["t2", "t3", "t3a", "t4g"] = Field(alias="InstanceFamily")
    cpu_credits: str = Field(alias="CpuCredits")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ModifyEbsDefaultKmsKeyIdRequestModel(BaseModel):
    kms_key_id: str = Field(alias="KmsKeyId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ModifyHostsRequestModel(BaseModel):
    host_ids: Sequence[str] = Field(alias="HostIds")
    auto_placement: Optional[Literal["off", "on"]] = Field(
        default=None, alias="AutoPlacement"
    )
    host_recovery: Optional[Literal["off", "on"]] = Field(
        default=None, alias="HostRecovery"
    )
    instance_type: Optional[str] = Field(default=None, alias="InstanceType")
    instance_family: Optional[str] = Field(default=None, alias="InstanceFamily")
    host_maintenance: Optional[Literal["off", "on"]] = Field(
        default=None, alias="HostMaintenance"
    )


class ModifyIdFormatRequestModel(BaseModel):
    resource: str = Field(alias="Resource")
    use_long_ids: bool = Field(alias="UseLongIds")


class ModifyIdentityIdFormatRequestModel(BaseModel):
    principal_arn: str = Field(alias="PrincipalArn")
    resource: str = Field(alias="Resource")
    use_long_ids: bool = Field(alias="UseLongIds")


class SuccessfulInstanceCreditSpecificationItemModel(BaseModel):
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")


class ModifyInstanceEventStartTimeRequestModel(BaseModel):
    instance_id: str = Field(alias="InstanceId")
    instance_event_id: str = Field(alias="InstanceEventId")
    not_before: Union[datetime, str] = Field(alias="NotBefore")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ModifyInstanceMaintenanceOptionsRequestModel(BaseModel):
    instance_id: str = Field(alias="InstanceId")
    auto_recovery: Optional[Literal["default", "disabled"]] = Field(
        default=None, alias="AutoRecovery"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ModifyInstanceMetadataOptionsRequestModel(BaseModel):
    instance_id: str = Field(alias="InstanceId")
    http_tokens: Optional[Literal["optional", "required"]] = Field(
        default=None, alias="HttpTokens"
    )
    http_put_response_hop_limit: Optional[int] = Field(
        default=None, alias="HttpPutResponseHopLimit"
    )
    http_endpoint: Optional[Literal["disabled", "enabled"]] = Field(
        default=None, alias="HttpEndpoint"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    http_protocol_ipv6: Optional[Literal["disabled", "enabled"]] = Field(
        default=None, alias="HttpProtocolIpv6"
    )
    instance_metadata_tags: Optional[Literal["disabled", "enabled"]] = Field(
        default=None, alias="InstanceMetadataTags"
    )


class ModifyInstancePlacementRequestModel(BaseModel):
    instance_id: str = Field(alias="InstanceId")
    affinity: Optional[Literal["default", "host"]] = Field(
        default=None, alias="Affinity"
    )
    group_name: Optional[str] = Field(default=None, alias="GroupName")
    host_id: Optional[str] = Field(default=None, alias="HostId")
    tenancy: Optional[Literal["dedicated", "host"]] = Field(
        default=None, alias="Tenancy"
    )
    partition_number: Optional[int] = Field(default=None, alias="PartitionNumber")
    host_resource_group_arn: Optional[str] = Field(
        default=None, alias="HostResourceGroupArn"
    )
    group_id: Optional[str] = Field(default=None, alias="GroupId")


class RemoveIpamOperatingRegionModel(BaseModel):
    region_name: Optional[str] = Field(default=None, alias="RegionName")


class ModifyIpamResourceCidrRequestModel(BaseModel):
    resource_id: str = Field(alias="ResourceId")
    resource_cidr: str = Field(alias="ResourceCidr")
    resource_region: str = Field(alias="ResourceRegion")
    current_ipam_scope_id: str = Field(alias="CurrentIpamScopeId")
    monitored: bool = Field(alias="Monitored")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    destination_ipam_scope_id: Optional[str] = Field(
        default=None, alias="DestinationIpamScopeId"
    )


class ModifyIpamScopeRequestModel(BaseModel):
    ipam_scope_id: str = Field(alias="IpamScopeId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    description: Optional[str] = Field(default=None, alias="Description")


class ModifyLaunchTemplateRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    launch_template_id: Optional[str] = Field(default=None, alias="LaunchTemplateId")
    launch_template_name: Optional[str] = Field(
        default=None, alias="LaunchTemplateName"
    )
    default_version: Optional[str] = Field(default=None, alias="DefaultVersion")


class ModifyLocalGatewayRouteRequestModel(BaseModel):
    local_gateway_route_table_id: str = Field(alias="LocalGatewayRouteTableId")
    destination_cidr_block: Optional[str] = Field(
        default=None, alias="DestinationCidrBlock"
    )
    local_gateway_virtual_interface_group_id: Optional[str] = Field(
        default=None, alias="LocalGatewayVirtualInterfaceGroupId"
    )
    network_interface_id: Optional[str] = Field(
        default=None, alias="NetworkInterfaceId"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    destination_prefix_list_id: Optional[str] = Field(
        default=None, alias="DestinationPrefixListId"
    )


class RemovePrefixListEntryModel(BaseModel):
    cidr: str = Field(alias="Cidr")


class NetworkInterfaceAttachmentChangesModel(BaseModel):
    attachment_id: Optional[str] = Field(default=None, alias="AttachmentId")
    delete_on_termination: Optional[bool] = Field(
        default=None, alias="DeleteOnTermination"
    )


class ModifyPrivateDnsNameOptionsRequestModel(BaseModel):
    instance_id: str = Field(alias="InstanceId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    private_dns_hostname_type: Optional[Literal["ip-name", "resource-name"]] = Field(
        default=None, alias="PrivateDnsHostnameType"
    )
    enable_resource_name_dns_arecord: Optional[bool] = Field(
        default=None, alias="EnableResourceNameDnsARecord"
    )
    enable_resource_name_dns_aaaarecord: Optional[bool] = Field(
        default=None, alias="EnableResourceNameDnsAAAARecord"
    )


class ReservedInstancesConfigurationModel(BaseModel):
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    instance_count: Optional[int] = Field(default=None, alias="InstanceCount")
    instance_type: Optional[
        Literal[
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.large",
            "a1.medium",
            "a1.metal",
            "a1.xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c3.large",
            "c3.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.large",
            "c5.metal",
            "c5.xlarge",
            "c5a.12xlarge",
            "c5a.16xlarge",
            "c5a.24xlarge",
            "c5a.2xlarge",
            "c5a.4xlarge",
            "c5a.8xlarge",
            "c5a.large",
            "c5a.xlarge",
            "c5ad.12xlarge",
            "c5ad.16xlarge",
            "c5ad.24xlarge",
            "c5ad.2xlarge",
            "c5ad.4xlarge",
            "c5ad.8xlarge",
            "c5ad.large",
            "c5ad.xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.large",
            "c5d.metal",
            "c5d.xlarge",
            "c5n.18xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.large",
            "c5n.metal",
            "c5n.xlarge",
            "c6a.12xlarge",
            "c6a.16xlarge",
            "c6a.24xlarge",
            "c6a.2xlarge",
            "c6a.32xlarge",
            "c6a.48xlarge",
            "c6a.4xlarge",
            "c6a.8xlarge",
            "c6a.large",
            "c6a.metal",
            "c6a.xlarge",
            "c6g.12xlarge",
            "c6g.16xlarge",
            "c6g.2xlarge",
            "c6g.4xlarge",
            "c6g.8xlarge",
            "c6g.large",
            "c6g.medium",
            "c6g.metal",
            "c6g.xlarge",
            "c6gd.12xlarge",
            "c6gd.16xlarge",
            "c6gd.2xlarge",
            "c6gd.4xlarge",
            "c6gd.8xlarge",
            "c6gd.large",
            "c6gd.medium",
            "c6gd.metal",
            "c6gd.xlarge",
            "c6gn.12xlarge",
            "c6gn.16xlarge",
            "c6gn.2xlarge",
            "c6gn.4xlarge",
            "c6gn.8xlarge",
            "c6gn.large",
            "c6gn.medium",
            "c6gn.xlarge",
            "c6i.12xlarge",
            "c6i.16xlarge",
            "c6i.24xlarge",
            "c6i.2xlarge",
            "c6i.32xlarge",
            "c6i.4xlarge",
            "c6i.8xlarge",
            "c6i.large",
            "c6i.metal",
            "c6i.xlarge",
            "c6id.12xlarge",
            "c6id.16xlarge",
            "c6id.24xlarge",
            "c6id.2xlarge",
            "c6id.32xlarge",
            "c6id.4xlarge",
            "c6id.8xlarge",
            "c6id.large",
            "c6id.metal",
            "c6id.xlarge",
            "c6in.12xlarge",
            "c6in.16xlarge",
            "c6in.24xlarge",
            "c6in.2xlarge",
            "c6in.32xlarge",
            "c6in.4xlarge",
            "c6in.8xlarge",
            "c6in.large",
            "c6in.xlarge",
            "c7g.12xlarge",
            "c7g.16xlarge",
            "c7g.2xlarge",
            "c7g.4xlarge",
            "c7g.8xlarge",
            "c7g.large",
            "c7g.medium",
            "c7g.xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "cg1.4xlarge",
            "cr1.8xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "d2.xlarge",
            "d3.2xlarge",
            "d3.4xlarge",
            "d3.8xlarge",
            "d3.xlarge",
            "d3en.12xlarge",
            "d3en.2xlarge",
            "d3en.4xlarge",
            "d3en.6xlarge",
            "d3en.8xlarge",
            "d3en.xlarge",
            "dl1.24xlarge",
            "f1.16xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.16xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3s.xlarge",
            "g4ad.16xlarge",
            "g4ad.2xlarge",
            "g4ad.4xlarge",
            "g4ad.8xlarge",
            "g4ad.xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.metal",
            "g4dn.xlarge",
            "g5.12xlarge",
            "g5.16xlarge",
            "g5.24xlarge",
            "g5.2xlarge",
            "g5.48xlarge",
            "g5.4xlarge",
            "g5.8xlarge",
            "g5.xlarge",
            "g5g.16xlarge",
            "g5g.2xlarge",
            "g5g.4xlarge",
            "g5g.8xlarge",
            "g5g.metal",
            "g5g.xlarge",
            "h1.16xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "hi1.4xlarge",
            "hpc6a.48xlarge",
            "hpc6id.32xlarge",
            "hs1.8xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i2.xlarge",
            "i3.16xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.large",
            "i3.metal",
            "i3.xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.large",
            "i3en.metal",
            "i3en.xlarge",
            "i4i.16xlarge",
            "i4i.2xlarge",
            "i4i.32xlarge",
            "i4i.4xlarge",
            "i4i.8xlarge",
            "i4i.large",
            "i4i.metal",
            "i4i.xlarge",
            "im4gn.16xlarge",
            "im4gn.2xlarge",
            "im4gn.4xlarge",
            "im4gn.8xlarge",
            "im4gn.large",
            "im4gn.xlarge",
            "inf1.24xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.xlarge",
            "is4gen.2xlarge",
            "is4gen.4xlarge",
            "is4gen.8xlarge",
            "is4gen.large",
            "is4gen.medium",
            "is4gen.xlarge",
            "m1.large",
            "m1.medium",
            "m1.small",
            "m1.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "m2.xlarge",
            "m3.2xlarge",
            "m3.large",
            "m3.medium",
            "m3.xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.large",
            "m4.xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.large",
            "m5.metal",
            "m5.xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.large",
            "m5a.xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.large",
            "m5ad.xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.large",
            "m5d.metal",
            "m5d.xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.large",
            "m5dn.metal",
            "m5dn.xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.large",
            "m5n.metal",
            "m5n.xlarge",
            "m5zn.12xlarge",
            "m5zn.2xlarge",
            "m5zn.3xlarge",
            "m5zn.6xlarge",
            "m5zn.large",
            "m5zn.metal",
            "m5zn.xlarge",
            "m6a.12xlarge",
            "m6a.16xlarge",
            "m6a.24xlarge",
            "m6a.2xlarge",
            "m6a.32xlarge",
            "m6a.48xlarge",
            "m6a.4xlarge",
            "m6a.8xlarge",
            "m6a.large",
            "m6a.metal",
            "m6a.xlarge",
            "m6g.12xlarge",
            "m6g.16xlarge",
            "m6g.2xlarge",
            "m6g.4xlarge",
            "m6g.8xlarge",
            "m6g.large",
            "m6g.medium",
            "m6g.metal",
            "m6g.xlarge",
            "m6gd.12xlarge",
            "m6gd.16xlarge",
            "m6gd.2xlarge",
            "m6gd.4xlarge",
            "m6gd.8xlarge",
            "m6gd.large",
            "m6gd.medium",
            "m6gd.metal",
            "m6gd.xlarge",
            "m6i.12xlarge",
            "m6i.16xlarge",
            "m6i.24xlarge",
            "m6i.2xlarge",
            "m6i.32xlarge",
            "m6i.4xlarge",
            "m6i.8xlarge",
            "m6i.large",
            "m6i.metal",
            "m6i.xlarge",
            "m6id.12xlarge",
            "m6id.16xlarge",
            "m6id.24xlarge",
            "m6id.2xlarge",
            "m6id.32xlarge",
            "m6id.4xlarge",
            "m6id.8xlarge",
            "m6id.large",
            "m6id.metal",
            "m6id.xlarge",
            "m6idn.12xlarge",
            "m6idn.16xlarge",
            "m6idn.24xlarge",
            "m6idn.2xlarge",
            "m6idn.32xlarge",
            "m6idn.4xlarge",
            "m6idn.8xlarge",
            "m6idn.large",
            "m6idn.xlarge",
            "m6in.12xlarge",
            "m6in.16xlarge",
            "m6in.24xlarge",
            "m6in.2xlarge",
            "m6in.32xlarge",
            "m6in.4xlarge",
            "m6in.8xlarge",
            "m6in.large",
            "m6in.xlarge",
            "mac1.metal",
            "mac2.metal",
            "p2.16xlarge",
            "p2.8xlarge",
            "p2.xlarge",
            "p3.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3dn.24xlarge",
            "p4d.24xlarge",
            "p4de.24xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r4.16xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.large",
            "r5.metal",
            "r5.xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.large",
            "r5a.xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.large",
            "r5ad.xlarge",
            "r5b.12xlarge",
            "r5b.16xlarge",
            "r5b.24xlarge",
            "r5b.2xlarge",
            "r5b.4xlarge",
            "r5b.8xlarge",
            "r5b.large",
            "r5b.metal",
            "r5b.xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.large",
            "r5d.metal",
            "r5d.xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.large",
            "r5dn.metal",
            "r5dn.xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.large",
            "r5n.metal",
            "r5n.xlarge",
            "r6a.12xlarge",
            "r6a.16xlarge",
            "r6a.24xlarge",
            "r6a.2xlarge",
            "r6a.32xlarge",
            "r6a.48xlarge",
            "r6a.4xlarge",
            "r6a.8xlarge",
            "r6a.large",
            "r6a.metal",
            "r6a.xlarge",
            "r6g.12xlarge",
            "r6g.16xlarge",
            "r6g.2xlarge",
            "r6g.4xlarge",
            "r6g.8xlarge",
            "r6g.large",
            "r6g.medium",
            "r6g.metal",
            "r6g.xlarge",
            "r6gd.12xlarge",
            "r6gd.16xlarge",
            "r6gd.2xlarge",
            "r6gd.4xlarge",
            "r6gd.8xlarge",
            "r6gd.large",
            "r6gd.medium",
            "r6gd.metal",
            "r6gd.xlarge",
            "r6i.12xlarge",
            "r6i.16xlarge",
            "r6i.24xlarge",
            "r6i.2xlarge",
            "r6i.32xlarge",
            "r6i.4xlarge",
            "r6i.8xlarge",
            "r6i.large",
            "r6i.metal",
            "r6i.xlarge",
            "r6id.12xlarge",
            "r6id.16xlarge",
            "r6id.24xlarge",
            "r6id.2xlarge",
            "r6id.32xlarge",
            "r6id.4xlarge",
            "r6id.8xlarge",
            "r6id.large",
            "r6id.metal",
            "r6id.xlarge",
            "r6idn.12xlarge",
            "r6idn.16xlarge",
            "r6idn.24xlarge",
            "r6idn.2xlarge",
            "r6idn.32xlarge",
            "r6idn.4xlarge",
            "r6idn.8xlarge",
            "r6idn.large",
            "r6idn.xlarge",
            "r6in.12xlarge",
            "r6in.16xlarge",
            "r6in.24xlarge",
            "r6in.2xlarge",
            "r6in.32xlarge",
            "r6in.4xlarge",
            "r6in.8xlarge",
            "r6in.large",
            "r6in.xlarge",
            "t1.micro",
            "t2.2xlarge",
            "t2.large",
            "t2.medium",
            "t2.micro",
            "t2.nano",
            "t2.small",
            "t2.xlarge",
            "t3.2xlarge",
            "t3.large",
            "t3.medium",
            "t3.micro",
            "t3.nano",
            "t3.small",
            "t3.xlarge",
            "t3a.2xlarge",
            "t3a.large",
            "t3a.medium",
            "t3a.micro",
            "t3a.nano",
            "t3a.small",
            "t3a.xlarge",
            "t4g.2xlarge",
            "t4g.large",
            "t4g.medium",
            "t4g.micro",
            "t4g.nano",
            "t4g.small",
            "t4g.xlarge",
            "trn1.2xlarge",
            "trn1.32xlarge",
            "u-12tb1.112xlarge",
            "u-12tb1.metal",
            "u-18tb1.112xlarge",
            "u-18tb1.metal",
            "u-24tb1.112xlarge",
            "u-24tb1.metal",
            "u-3tb1.56xlarge",
            "u-6tb1.112xlarge",
            "u-6tb1.56xlarge",
            "u-6tb1.metal",
            "u-9tb1.112xlarge",
            "u-9tb1.metal",
            "vt1.24xlarge",
            "vt1.3xlarge",
            "vt1.6xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.16xlarge",
            "x1e.2xlarge",
            "x1e.32xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.xlarge",
            "x2gd.12xlarge",
            "x2gd.16xlarge",
            "x2gd.2xlarge",
            "x2gd.4xlarge",
            "x2gd.8xlarge",
            "x2gd.large",
            "x2gd.medium",
            "x2gd.metal",
            "x2gd.xlarge",
            "x2idn.16xlarge",
            "x2idn.24xlarge",
            "x2idn.32xlarge",
            "x2idn.metal",
            "x2iedn.16xlarge",
            "x2iedn.24xlarge",
            "x2iedn.2xlarge",
            "x2iedn.32xlarge",
            "x2iedn.4xlarge",
            "x2iedn.8xlarge",
            "x2iedn.metal",
            "x2iedn.xlarge",
            "x2iezn.12xlarge",
            "x2iezn.2xlarge",
            "x2iezn.4xlarge",
            "x2iezn.6xlarge",
            "x2iezn.8xlarge",
            "x2iezn.metal",
            "z1d.12xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.large",
            "z1d.metal",
            "z1d.xlarge",
        ]
    ] = Field(default=None, alias="InstanceType")
    platform: Optional[str] = Field(default=None, alias="Platform")
    scope: Optional[Literal["Availability Zone", "Region"]] = Field(
        default=None, alias="Scope"
    )


class ModifySnapshotTierRequestModel(BaseModel):
    snapshot_id: str = Field(alias="SnapshotId")
    storage_tier: Optional[Literal["archive"]] = Field(
        default=None, alias="StorageTier"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ModifyTrafficMirrorFilterNetworkServicesRequestModel(BaseModel):
    traffic_mirror_filter_id: str = Field(alias="TrafficMirrorFilterId")
    add_network_services: Optional[Sequence[Literal["amazon-dns"]]] = Field(
        default=None, alias="AddNetworkServices"
    )
    remove_network_services: Optional[Sequence[Literal["amazon-dns"]]] = Field(
        default=None, alias="RemoveNetworkServices"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ModifyTrafficMirrorSessionRequestModel(BaseModel):
    traffic_mirror_session_id: str = Field(alias="TrafficMirrorSessionId")
    traffic_mirror_target_id: Optional[str] = Field(
        default=None, alias="TrafficMirrorTargetId"
    )
    traffic_mirror_filter_id: Optional[str] = Field(
        default=None, alias="TrafficMirrorFilterId"
    )
    packet_length: Optional[int] = Field(default=None, alias="PacketLength")
    session_number: Optional[int] = Field(default=None, alias="SessionNumber")
    virtual_network_id: Optional[int] = Field(default=None, alias="VirtualNetworkId")
    description: Optional[str] = Field(default=None, alias="Description")
    remove_fields: Optional[
        Sequence[Literal["description", "packet-length", "virtual-network-id"]]
    ] = Field(default=None, alias="RemoveFields")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ModifyTransitGatewayOptionsModel(BaseModel):
    add_transit_gateway_cidr_blocks: Optional[Sequence[str]] = Field(
        default=None, alias="AddTransitGatewayCidrBlocks"
    )
    remove_transit_gateway_cidr_blocks: Optional[Sequence[str]] = Field(
        default=None, alias="RemoveTransitGatewayCidrBlocks"
    )
    vpn_ecmp_support: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="VpnEcmpSupport"
    )
    dns_support: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="DnsSupport"
    )
    auto_accept_shared_attachments: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="AutoAcceptSharedAttachments"
    )
    default_route_table_association: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="DefaultRouteTableAssociation"
    )
    association_default_route_table_id: Optional[str] = Field(
        default=None, alias="AssociationDefaultRouteTableId"
    )
    default_route_table_propagation: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="DefaultRouteTablePropagation"
    )
    propagation_default_route_table_id: Optional[str] = Field(
        default=None, alias="PropagationDefaultRouteTableId"
    )
    amazon_side_asn: Optional[int] = Field(default=None, alias="AmazonSideAsn")


class ModifyTransitGatewayPrefixListReferenceRequestModel(BaseModel):
    transit_gateway_route_table_id: str = Field(alias="TransitGatewayRouteTableId")
    prefix_list_id: str = Field(alias="PrefixListId")
    transit_gateway_attachment_id: Optional[str] = Field(
        default=None, alias="TransitGatewayAttachmentId"
    )
    blackhole: Optional[bool] = Field(default=None, alias="Blackhole")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ModifyTransitGatewayVpcAttachmentRequestOptionsModel(BaseModel):
    dns_support: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="DnsSupport"
    )
    ipv6_support: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="Ipv6Support"
    )
    appliance_mode_support: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="ApplianceModeSupport"
    )


class ModifyVerifiedAccessEndpointEniOptionsModel(BaseModel):
    protocol: Optional[Literal["http", "https"]] = Field(default=None, alias="Protocol")
    port: Optional[int] = Field(default=None, alias="Port")


class ModifyVerifiedAccessEndpointLoadBalancerOptionsModel(BaseModel):
    subnet_ids: Optional[Sequence[str]] = Field(default=None, alias="SubnetIds")
    protocol: Optional[Literal["http", "https"]] = Field(default=None, alias="Protocol")
    port: Optional[int] = Field(default=None, alias="Port")


class ModifyVerifiedAccessEndpointPolicyRequestModel(BaseModel):
    verified_access_endpoint_id: str = Field(alias="VerifiedAccessEndpointId")
    policy_enabled: bool = Field(alias="PolicyEnabled")
    policy_document: Optional[str] = Field(default=None, alias="PolicyDocument")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ModifyVerifiedAccessGroupPolicyRequestModel(BaseModel):
    verified_access_group_id: str = Field(alias="VerifiedAccessGroupId")
    policy_enabled: bool = Field(alias="PolicyEnabled")
    policy_document: Optional[str] = Field(default=None, alias="PolicyDocument")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ModifyVerifiedAccessGroupRequestModel(BaseModel):
    verified_access_group_id: str = Field(alias="VerifiedAccessGroupId")
    verified_access_instance_id: Optional[str] = Field(
        default=None, alias="VerifiedAccessInstanceId"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ModifyVerifiedAccessInstanceRequestModel(BaseModel):
    verified_access_instance_id: str = Field(alias="VerifiedAccessInstanceId")
    description: Optional[str] = Field(default=None, alias="Description")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")


class ModifyVerifiedAccessTrustProviderOidcOptionsModel(BaseModel):
    scope: Optional[str] = Field(default=None, alias="Scope")


class ModifyVolumeRequestModel(BaseModel):
    volume_id: str = Field(alias="VolumeId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    size: Optional[int] = Field(default=None, alias="Size")
    volume_type: Optional[
        Literal["gp2", "gp3", "io1", "io2", "sc1", "st1", "standard"]
    ] = Field(default=None, alias="VolumeType")
    iops: Optional[int] = Field(default=None, alias="Iops")
    throughput: Optional[int] = Field(default=None, alias="Throughput")
    multi_attach_enabled: Optional[bool] = Field(
        default=None, alias="MultiAttachEnabled"
    )


class ModifyVpcEndpointConnectionNotificationRequestModel(BaseModel):
    connection_notification_id: str = Field(alias="ConnectionNotificationId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    connection_notification_arn: Optional[str] = Field(
        default=None, alias="ConnectionNotificationArn"
    )
    connection_events: Optional[Sequence[str]] = Field(
        default=None, alias="ConnectionEvents"
    )


class ModifyVpcEndpointServiceConfigurationRequestModel(BaseModel):
    service_id: str = Field(alias="ServiceId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    private_dns_name: Optional[str] = Field(default=None, alias="PrivateDnsName")
    remove_private_dns_name: Optional[bool] = Field(
        default=None, alias="RemovePrivateDnsName"
    )
    acceptance_required: Optional[bool] = Field(
        default=None, alias="AcceptanceRequired"
    )
    add_network_load_balancer_arns: Optional[Sequence[str]] = Field(
        default=None, alias="AddNetworkLoadBalancerArns"
    )
    remove_network_load_balancer_arns: Optional[Sequence[str]] = Field(
        default=None, alias="RemoveNetworkLoadBalancerArns"
    )
    add_gateway_load_balancer_arns: Optional[Sequence[str]] = Field(
        default=None, alias="AddGatewayLoadBalancerArns"
    )
    remove_gateway_load_balancer_arns: Optional[Sequence[str]] = Field(
        default=None, alias="RemoveGatewayLoadBalancerArns"
    )
    add_supported_ip_address_types: Optional[Sequence[str]] = Field(
        default=None, alias="AddSupportedIpAddressTypes"
    )
    remove_supported_ip_address_types: Optional[Sequence[str]] = Field(
        default=None, alias="RemoveSupportedIpAddressTypes"
    )


class ModifyVpcEndpointServicePayerResponsibilityRequestModel(BaseModel):
    service_id: str = Field(alias="ServiceId")
    payer_responsibility: Literal["ServiceOwner"] = Field(alias="PayerResponsibility")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ModifyVpcEndpointServicePermissionsRequestModel(BaseModel):
    service_id: str = Field(alias="ServiceId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    add_allowed_principals: Optional[Sequence[str]] = Field(
        default=None, alias="AddAllowedPrincipals"
    )
    remove_allowed_principals: Optional[Sequence[str]] = Field(
        default=None, alias="RemoveAllowedPrincipals"
    )


class PeeringConnectionOptionsRequestModel(BaseModel):
    allow_dns_resolution_from_remote_vpc: Optional[bool] = Field(
        default=None, alias="AllowDnsResolutionFromRemoteVpc"
    )
    allow_egress_from_local_classic_link_to_remote_vpc: Optional[bool] = Field(
        default=None, alias="AllowEgressFromLocalClassicLinkToRemoteVpc"
    )
    allow_egress_from_local_vpc_to_remote_classic_link: Optional[bool] = Field(
        default=None, alias="AllowEgressFromLocalVpcToRemoteClassicLink"
    )


class PeeringConnectionOptionsModel(BaseModel):
    allow_dns_resolution_from_remote_vpc: Optional[bool] = Field(
        default=None, alias="AllowDnsResolutionFromRemoteVpc"
    )
    allow_egress_from_local_classic_link_to_remote_vpc: Optional[bool] = Field(
        default=None, alias="AllowEgressFromLocalClassicLinkToRemoteVpc"
    )
    allow_egress_from_local_vpc_to_remote_classic_link: Optional[bool] = Field(
        default=None, alias="AllowEgressFromLocalVpcToRemoteClassicLink"
    )


class ModifyVpcTenancyRequestModel(BaseModel):
    vpc_id: str = Field(alias="VpcId")
    instance_tenancy: Literal["default"] = Field(alias="InstanceTenancy")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ModifyVpnConnectionOptionsRequestModel(BaseModel):
    vpn_connection_id: str = Field(alias="VpnConnectionId")
    local_ipv4_network_cidr: Optional[str] = Field(
        default=None, alias="LocalIpv4NetworkCidr"
    )
    remote_ipv4_network_cidr: Optional[str] = Field(
        default=None, alias="RemoteIpv4NetworkCidr"
    )
    local_ipv6_network_cidr: Optional[str] = Field(
        default=None, alias="LocalIpv6NetworkCidr"
    )
    remote_ipv6_network_cidr: Optional[str] = Field(
        default=None, alias="RemoteIpv6NetworkCidr"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ModifyVpnConnectionRequestModel(BaseModel):
    vpn_connection_id: str = Field(alias="VpnConnectionId")
    transit_gateway_id: Optional[str] = Field(default=None, alias="TransitGatewayId")
    customer_gateway_id: Optional[str] = Field(default=None, alias="CustomerGatewayId")
    vpn_gateway_id: Optional[str] = Field(default=None, alias="VpnGatewayId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ModifyVpnTunnelCertificateRequestModel(BaseModel):
    vpn_connection_id: str = Field(alias="VpnConnectionId")
    vpn_tunnel_outside_ip_address: str = Field(alias="VpnTunnelOutsideIpAddress")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class Phase1DHGroupNumbersRequestListValueModel(BaseModel):
    value: Optional[int] = Field(default=None, alias="Value")


class Phase1EncryptionAlgorithmsRequestListValueModel(BaseModel):
    value: Optional[str] = Field(default=None, alias="Value")


class Phase1IntegrityAlgorithmsRequestListValueModel(BaseModel):
    value: Optional[str] = Field(default=None, alias="Value")


class Phase2DHGroupNumbersRequestListValueModel(BaseModel):
    value: Optional[int] = Field(default=None, alias="Value")


class Phase2EncryptionAlgorithmsRequestListValueModel(BaseModel):
    value: Optional[str] = Field(default=None, alias="Value")


class Phase2IntegrityAlgorithmsRequestListValueModel(BaseModel):
    value: Optional[str] = Field(default=None, alias="Value")


class MonitorInstancesRequestInstanceMonitorModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class MonitorInstancesRequestModel(BaseModel):
    instance_ids: Sequence[str] = Field(alias="InstanceIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class MoveAddressToVpcRequestModel(BaseModel):
    public_ip: str = Field(alias="PublicIp")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class MoveByoipCidrToIpamRequestModel(BaseModel):
    cidr: str = Field(alias="Cidr")
    ipam_pool_id: str = Field(alias="IpamPoolId")
    ipam_pool_owner: str = Field(alias="IpamPoolOwner")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ProvisionedBandwidthModel(BaseModel):
    provision_time: Optional[datetime] = Field(default=None, alias="ProvisionTime")
    provisioned: Optional[str] = Field(default=None, alias="Provisioned")
    request_time: Optional[datetime] = Field(default=None, alias="RequestTime")
    requested: Optional[str] = Field(default=None, alias="Requested")
    status: Optional[str] = Field(default=None, alias="Status")


class NetworkAclAssociationModel(BaseModel):
    network_acl_association_id: Optional[str] = Field(
        default=None, alias="NetworkAclAssociationId"
    )
    network_acl_id: Optional[str] = Field(default=None, alias="NetworkAclId")
    subnet_id: Optional[str] = Field(default=None, alias="SubnetId")


class NetworkCardInfoModel(BaseModel):
    network_card_index: Optional[int] = Field(default=None, alias="NetworkCardIndex")
    network_performance: Optional[str] = Field(default=None, alias="NetworkPerformance")
    maximum_network_interfaces: Optional[int] = Field(
        default=None, alias="MaximumNetworkInterfaces"
    )


class NetworkInterfaceAssociationModel(BaseModel):
    allocation_id: Optional[str] = Field(default=None, alias="AllocationId")
    association_id: Optional[str] = Field(default=None, alias="AssociationId")
    ip_owner_id: Optional[str] = Field(default=None, alias="IpOwnerId")
    public_dns_name: Optional[str] = Field(default=None, alias="PublicDnsName")
    public_ip: Optional[str] = Field(default=None, alias="PublicIp")
    customer_owned_ip: Optional[str] = Field(default=None, alias="CustomerOwnedIp")
    carrier_ip: Optional[str] = Field(default=None, alias="CarrierIp")


class NetworkInterfaceIpv6AddressModel(BaseModel):
    ipv6_address: Optional[str] = Field(default=None, alias="Ipv6Address")


class NetworkInterfacePermissionStateModel(BaseModel):
    state: Optional[Literal["granted", "pending", "revoked", "revoking"]] = Field(
        default=None, alias="State"
    )
    status_message: Optional[str] = Field(default=None, alias="StatusMessage")


class OidcOptionsModel(BaseModel):
    issuer: Optional[str] = Field(default=None, alias="Issuer")
    authorization_endpoint: Optional[str] = Field(
        default=None, alias="AuthorizationEndpoint"
    )
    token_endpoint: Optional[str] = Field(default=None, alias="TokenEndpoint")
    user_info_endpoint: Optional[str] = Field(default=None, alias="UserInfoEndpoint")
    client_id: Optional[str] = Field(default=None, alias="ClientId")
    client_secret: Optional[str] = Field(default=None, alias="ClientSecret")
    scope: Optional[str] = Field(default=None, alias="Scope")


class PacketHeaderStatementRequestModel(BaseModel):
    source_addresses: Optional[Sequence[str]] = Field(
        default=None, alias="SourceAddresses"
    )
    destination_addresses: Optional[Sequence[str]] = Field(
        default=None, alias="DestinationAddresses"
    )
    source_ports: Optional[Sequence[str]] = Field(default=None, alias="SourcePorts")
    destination_ports: Optional[Sequence[str]] = Field(
        default=None, alias="DestinationPorts"
    )
    source_prefix_lists: Optional[Sequence[str]] = Field(
        default=None, alias="SourcePrefixLists"
    )
    destination_prefix_lists: Optional[Sequence[str]] = Field(
        default=None, alias="DestinationPrefixLists"
    )
    protocols: Optional[Sequence[Literal["tcp", "udp"]]] = Field(
        default=None, alias="Protocols"
    )


class PacketHeaderStatementModel(BaseModel):
    source_addresses: Optional[List[str]] = Field(default=None, alias="SourceAddresses")
    destination_addresses: Optional[List[str]] = Field(
        default=None, alias="DestinationAddresses"
    )
    source_ports: Optional[List[str]] = Field(default=None, alias="SourcePorts")
    destination_ports: Optional[List[str]] = Field(
        default=None, alias="DestinationPorts"
    )
    source_prefix_lists: Optional[List[str]] = Field(
        default=None, alias="SourcePrefixLists"
    )
    destination_prefix_lists: Optional[List[str]] = Field(
        default=None, alias="DestinationPrefixLists"
    )
    protocols: Optional[List[Literal["tcp", "udp"]]] = Field(
        default=None, alias="Protocols"
    )


class ResourceStatementRequestModel(BaseModel):
    resources: Optional[Sequence[str]] = Field(default=None, alias="Resources")
    resource_types: Optional[Sequence[str]] = Field(default=None, alias="ResourceTypes")


class ResourceStatementModel(BaseModel):
    resources: Optional[List[str]] = Field(default=None, alias="Resources")
    resource_types: Optional[List[str]] = Field(default=None, alias="ResourceTypes")


class PeeringAttachmentStatusModel(BaseModel):
    code: Optional[str] = Field(default=None, alias="Code")
    message: Optional[str] = Field(default=None, alias="Message")


class PeeringTgwInfoModel(BaseModel):
    transit_gateway_id: Optional[str] = Field(default=None, alias="TransitGatewayId")
    core_network_id: Optional[str] = Field(default=None, alias="CoreNetworkId")
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    region: Optional[str] = Field(default=None, alias="Region")


class Phase1DHGroupNumbersListValueModel(BaseModel):
    value: Optional[int] = Field(default=None, alias="Value")


class Phase1EncryptionAlgorithmsListValueModel(BaseModel):
    value: Optional[str] = Field(default=None, alias="Value")


class Phase1IntegrityAlgorithmsListValueModel(BaseModel):
    value: Optional[str] = Field(default=None, alias="Value")


class Phase2DHGroupNumbersListValueModel(BaseModel):
    value: Optional[int] = Field(default=None, alias="Value")


class Phase2EncryptionAlgorithmsListValueModel(BaseModel):
    value: Optional[str] = Field(default=None, alias="Value")


class Phase2IntegrityAlgorithmsListValueModel(BaseModel):
    value: Optional[str] = Field(default=None, alias="Value")


class PriceScheduleModel(BaseModel):
    active: Optional[bool] = Field(default=None, alias="Active")
    currency_code: Optional[Literal["USD"]] = Field(default=None, alias="CurrencyCode")
    price: Optional[float] = Field(default=None, alias="Price")
    term: Optional[int] = Field(default=None, alias="Term")


class PricingDetailModel(BaseModel):
    count: Optional[int] = Field(default=None, alias="Count")
    price: Optional[float] = Field(default=None, alias="Price")


class PrivateDnsDetailsModel(BaseModel):
    private_dns_name: Optional[str] = Field(default=None, alias="PrivateDnsName")


class PrivateDnsNameConfigurationModel(BaseModel):
    state: Optional[Literal["failed", "pendingVerification", "verified"]] = Field(
        default=None, alias="State"
    )
    type: Optional[str] = Field(default=None, alias="Type")
    value: Optional[str] = Field(default=None, alias="Value")
    name: Optional[str] = Field(default=None, alias="Name")


class PrivateDnsNameOptionsOnLaunchModel(BaseModel):
    hostname_type: Optional[Literal["ip-name", "resource-name"]] = Field(
        default=None, alias="HostnameType"
    )
    enable_resource_name_dns_arecord: Optional[bool] = Field(
        default=None, alias="EnableResourceNameDnsARecord"
    )
    enable_resource_name_dns_aaaarecord: Optional[bool] = Field(
        default=None, alias="EnableResourceNameDnsAAAARecord"
    )


class PrivateDnsNameOptionsRequestModel(BaseModel):
    hostname_type: Optional[Literal["ip-name", "resource-name"]] = Field(
        default=None, alias="HostnameType"
    )
    enable_resource_name_dns_arecord: Optional[bool] = Field(
        default=None, alias="EnableResourceNameDnsARecord"
    )
    enable_resource_name_dns_aaaarecord: Optional[bool] = Field(
        default=None, alias="EnableResourceNameDnsAAAARecord"
    )


class PropagatingVgwModel(BaseModel):
    gateway_id: Optional[str] = Field(default=None, alias="GatewayId")


class ProvisionPublicIpv4PoolCidrRequestModel(BaseModel):
    ipam_pool_id: str = Field(alias="IpamPoolId")
    pool_id: str = Field(alias="PoolId")
    netmask_length: int = Field(alias="NetmaskLength")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class PublicIpv4PoolRangeModel(BaseModel):
    first_address: Optional[str] = Field(default=None, alias="FirstAddress")
    last_address: Optional[str] = Field(default=None, alias="LastAddress")
    address_count: Optional[int] = Field(default=None, alias="AddressCount")
    available_address_count: Optional[int] = Field(
        default=None, alias="AvailableAddressCount"
    )


class PurchaseRequestModel(BaseModel):
    instance_count: int = Field(alias="InstanceCount")
    purchase_token: str = Field(alias="PurchaseToken")


class ReservedInstanceLimitPriceModel(BaseModel):
    amount: Optional[float] = Field(default=None, alias="Amount")
    currency_code: Optional[Literal["USD"]] = Field(default=None, alias="CurrencyCode")


class RebootInstancesRequestInstanceRebootModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class RebootInstancesRequestModel(BaseModel):
    instance_ids: Sequence[str] = Field(alias="InstanceIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class RecurringChargeModel(BaseModel):
    amount: Optional[float] = Field(default=None, alias="Amount")
    frequency: Optional[Literal["Hourly"]] = Field(default=None, alias="Frequency")


class ReferencedSecurityGroupModel(BaseModel):
    group_id: Optional[str] = Field(default=None, alias="GroupId")
    peering_status: Optional[str] = Field(default=None, alias="PeeringStatus")
    user_id: Optional[str] = Field(default=None, alias="UserId")
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")
    vpc_peering_connection_id: Optional[str] = Field(
        default=None, alias="VpcPeeringConnectionId"
    )


class RegisterInstanceTagAttributeRequestModel(BaseModel):
    include_all_tags_of_instance: Optional[bool] = Field(
        default=None, alias="IncludeAllTagsOfInstance"
    )
    instance_tag_keys: Optional[Sequence[str]] = Field(
        default=None, alias="InstanceTagKeys"
    )


class RegisterTransitGatewayMulticastGroupMembersRequestModel(BaseModel):
    transit_gateway_multicast_domain_id: str = Field(
        alias="TransitGatewayMulticastDomainId"
    )
    network_interface_ids: Sequence[str] = Field(alias="NetworkInterfaceIds")
    group_ip_address: Optional[str] = Field(default=None, alias="GroupIpAddress")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class TransitGatewayMulticastRegisteredGroupMembersModel(BaseModel):
    transit_gateway_multicast_domain_id: Optional[str] = Field(
        default=None, alias="TransitGatewayMulticastDomainId"
    )
    registered_network_interface_ids: Optional[List[str]] = Field(
        default=None, alias="RegisteredNetworkInterfaceIds"
    )
    group_ip_address: Optional[str] = Field(default=None, alias="GroupIpAddress")


class RegisterTransitGatewayMulticastGroupSourcesRequestModel(BaseModel):
    transit_gateway_multicast_domain_id: str = Field(
        alias="TransitGatewayMulticastDomainId"
    )
    network_interface_ids: Sequence[str] = Field(alias="NetworkInterfaceIds")
    group_ip_address: Optional[str] = Field(default=None, alias="GroupIpAddress")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class TransitGatewayMulticastRegisteredGroupSourcesModel(BaseModel):
    transit_gateway_multicast_domain_id: Optional[str] = Field(
        default=None, alias="TransitGatewayMulticastDomainId"
    )
    registered_network_interface_ids: Optional[List[str]] = Field(
        default=None, alias="RegisteredNetworkInterfaceIds"
    )
    group_ip_address: Optional[str] = Field(default=None, alias="GroupIpAddress")


class RejectTransitGatewayMulticastDomainAssociationsRequestModel(BaseModel):
    transit_gateway_multicast_domain_id: Optional[str] = Field(
        default=None, alias="TransitGatewayMulticastDomainId"
    )
    transit_gateway_attachment_id: Optional[str] = Field(
        default=None, alias="TransitGatewayAttachmentId"
    )
    subnet_ids: Optional[Sequence[str]] = Field(default=None, alias="SubnetIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class RejectTransitGatewayPeeringAttachmentRequestModel(BaseModel):
    transit_gateway_attachment_id: str = Field(alias="TransitGatewayAttachmentId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class RejectTransitGatewayVpcAttachmentRequestModel(BaseModel):
    transit_gateway_attachment_id: str = Field(alias="TransitGatewayAttachmentId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class RejectVpcEndpointConnectionsRequestModel(BaseModel):
    service_id: str = Field(alias="ServiceId")
    vpc_endpoint_ids: Sequence[str] = Field(alias="VpcEndpointIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class RejectVpcPeeringConnectionRequestModel(BaseModel):
    vpc_peering_connection_id: str = Field(alias="VpcPeeringConnectionId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class RejectVpcPeeringConnectionRequestVpcPeeringConnectionRejectModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ReleaseAddressRequestClassicAddressReleaseModel(BaseModel):
    allocation_id: Optional[str] = Field(default=None, alias="AllocationId")
    public_ip: Optional[str] = Field(default=None, alias="PublicIp")
    network_border_group: Optional[str] = Field(
        default=None, alias="NetworkBorderGroup"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ReleaseAddressRequestModel(BaseModel):
    allocation_id: Optional[str] = Field(default=None, alias="AllocationId")
    public_ip: Optional[str] = Field(default=None, alias="PublicIp")
    network_border_group: Optional[str] = Field(
        default=None, alias="NetworkBorderGroup"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ReleaseAddressRequestVpcAddressReleaseModel(BaseModel):
    allocation_id: Optional[str] = Field(default=None, alias="AllocationId")
    public_ip: Optional[str] = Field(default=None, alias="PublicIp")
    network_border_group: Optional[str] = Field(
        default=None, alias="NetworkBorderGroup"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ReleaseHostsRequestModel(BaseModel):
    host_ids: Sequence[str] = Field(alias="HostIds")


class ReleaseIpamPoolAllocationRequestModel(BaseModel):
    ipam_pool_id: str = Field(alias="IpamPoolId")
    cidr: str = Field(alias="Cidr")
    ipam_pool_allocation_id: str = Field(alias="IpamPoolAllocationId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ReplaceNetworkAclAssociationRequestNetworkAclReplaceAssociationModel(BaseModel):
    association_id: str = Field(alias="AssociationId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ReplaceNetworkAclAssociationRequestModel(BaseModel):
    association_id: str = Field(alias="AssociationId")
    network_acl_id: str = Field(alias="NetworkAclId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ReplaceRouteRequestModel(BaseModel):
    route_table_id: str = Field(alias="RouteTableId")
    destination_cidr_block: Optional[str] = Field(
        default=None, alias="DestinationCidrBlock"
    )
    destination_ipv6_cidr_block: Optional[str] = Field(
        default=None, alias="DestinationIpv6CidrBlock"
    )
    destination_prefix_list_id: Optional[str] = Field(
        default=None, alias="DestinationPrefixListId"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    vpc_endpoint_id: Optional[str] = Field(default=None, alias="VpcEndpointId")
    egress_only_internet_gateway_id: Optional[str] = Field(
        default=None, alias="EgressOnlyInternetGatewayId"
    )
    gateway_id: Optional[str] = Field(default=None, alias="GatewayId")
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    local_target: Optional[bool] = Field(default=None, alias="LocalTarget")
    nat_gateway_id: Optional[str] = Field(default=None, alias="NatGatewayId")
    transit_gateway_id: Optional[str] = Field(default=None, alias="TransitGatewayId")
    local_gateway_id: Optional[str] = Field(default=None, alias="LocalGatewayId")
    carrier_gateway_id: Optional[str] = Field(default=None, alias="CarrierGatewayId")
    network_interface_id: Optional[str] = Field(
        default=None, alias="NetworkInterfaceId"
    )
    vpc_peering_connection_id: Optional[str] = Field(
        default=None, alias="VpcPeeringConnectionId"
    )
    core_network_arn: Optional[str] = Field(default=None, alias="CoreNetworkArn")


class ReplaceRouteRequestRouteReplaceModel(BaseModel):
    destination_ipv6_cidr_block: Optional[str] = Field(
        default=None, alias="DestinationIpv6CidrBlock"
    )
    destination_prefix_list_id: Optional[str] = Field(
        default=None, alias="DestinationPrefixListId"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    vpc_endpoint_id: Optional[str] = Field(default=None, alias="VpcEndpointId")
    egress_only_internet_gateway_id: Optional[str] = Field(
        default=None, alias="EgressOnlyInternetGatewayId"
    )
    gateway_id: Optional[str] = Field(default=None, alias="GatewayId")
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    local_target: Optional[bool] = Field(default=None, alias="LocalTarget")
    nat_gateway_id: Optional[str] = Field(default=None, alias="NatGatewayId")
    transit_gateway_id: Optional[str] = Field(default=None, alias="TransitGatewayId")
    local_gateway_id: Optional[str] = Field(default=None, alias="LocalGatewayId")
    carrier_gateway_id: Optional[str] = Field(default=None, alias="CarrierGatewayId")
    network_interface_id: Optional[str] = Field(
        default=None, alias="NetworkInterfaceId"
    )
    vpc_peering_connection_id: Optional[str] = Field(
        default=None, alias="VpcPeeringConnectionId"
    )
    core_network_arn: Optional[str] = Field(default=None, alias="CoreNetworkArn")


class ReplaceRouteTableAssociationRequestModel(BaseModel):
    association_id: str = Field(alias="AssociationId")
    route_table_id: str = Field(alias="RouteTableId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ReplaceRouteTableAssociationRequestRouteTableAssociationReplaceSubnetModel(
    BaseModel
):
    route_table_id: str = Field(alias="RouteTableId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ReplaceTransitGatewayRouteRequestModel(BaseModel):
    destination_cidr_block: str = Field(alias="DestinationCidrBlock")
    transit_gateway_route_table_id: str = Field(alias="TransitGatewayRouteTableId")
    transit_gateway_attachment_id: Optional[str] = Field(
        default=None, alias="TransitGatewayAttachmentId"
    )
    blackhole: Optional[bool] = Field(default=None, alias="Blackhole")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ReportInstanceStatusRequestInstanceReportStatusModel(BaseModel):
    reason_codes: Sequence[
        Literal[
            "instance-stuck-in-state",
            "not-accepting-credentials",
            "other",
            "password-not-available",
            "performance-ebs-volume",
            "performance-instance-store",
            "performance-network",
            "performance-other",
            "unresponsive",
        ]
    ] = Field(alias="ReasonCodes")
    status: Literal["impaired", "ok"] = Field(alias="Status")
    description: Optional[str] = Field(default=None, alias="Description")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    end_time: Optional[Union[datetime, str]] = Field(default=None, alias="EndTime")
    start_time: Optional[Union[datetime, str]] = Field(default=None, alias="StartTime")


class ReportInstanceStatusRequestModel(BaseModel):
    instances: Sequence[str] = Field(alias="Instances")
    reason_codes: Sequence[
        Literal[
            "instance-stuck-in-state",
            "not-accepting-credentials",
            "other",
            "password-not-available",
            "performance-ebs-volume",
            "performance-instance-store",
            "performance-network",
            "performance-other",
            "unresponsive",
        ]
    ] = Field(alias="ReasonCodes")
    status: Literal["impaired", "ok"] = Field(alias="Status")
    description: Optional[str] = Field(default=None, alias="Description")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    end_time: Optional[Union[datetime, str]] = Field(default=None, alias="EndTime")
    start_time: Optional[Union[datetime, str]] = Field(default=None, alias="StartTime")


class ReservedInstancesIdModel(BaseModel):
    reserved_instances_id: Optional[str] = Field(
        default=None, alias="ReservedInstancesId"
    )


class ResetAddressAttributeRequestModel(BaseModel):
    allocation_id: str = Field(alias="AllocationId")
    attribute: Literal["domain-name"] = Field(alias="Attribute")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ResetEbsDefaultKmsKeyIdRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ResetFpgaImageAttributeRequestModel(BaseModel):
    fpga_image_id: str = Field(alias="FpgaImageId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    attribute: Optional[Literal["loadPermission"]] = Field(
        default=None, alias="Attribute"
    )


class ResetImageAttributeRequestImageResetAttributeModel(BaseModel):
    attribute: Literal["launchPermission"] = Field(alias="Attribute")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ResetImageAttributeRequestModel(BaseModel):
    attribute: Literal["launchPermission"] = Field(alias="Attribute")
    image_id: str = Field(alias="ImageId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ResetInstanceAttributeRequestInstanceResetAttributeModel(BaseModel):
    attribute: Literal[
        "blockDeviceMapping",
        "disableApiStop",
        "disableApiTermination",
        "ebsOptimized",
        "enaSupport",
        "enclaveOptions",
        "groupSet",
        "instanceInitiatedShutdownBehavior",
        "instanceType",
        "kernel",
        "productCodes",
        "ramdisk",
        "rootDeviceName",
        "sourceDestCheck",
        "sriovNetSupport",
        "userData",
    ] = Field(alias="Attribute")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ResetInstanceAttributeRequestInstanceResetKernelModel(BaseModel):
    attribute: Optional[
        Literal[
            "blockDeviceMapping",
            "disableApiStop",
            "disableApiTermination",
            "ebsOptimized",
            "enaSupport",
            "enclaveOptions",
            "groupSet",
            "instanceInitiatedShutdownBehavior",
            "instanceType",
            "kernel",
            "productCodes",
            "ramdisk",
            "rootDeviceName",
            "sourceDestCheck",
            "sriovNetSupport",
            "userData",
        ]
    ] = Field(default=None, alias="Attribute")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ResetInstanceAttributeRequestInstanceResetRamdiskModel(BaseModel):
    attribute: Optional[
        Literal[
            "blockDeviceMapping",
            "disableApiStop",
            "disableApiTermination",
            "ebsOptimized",
            "enaSupport",
            "enclaveOptions",
            "groupSet",
            "instanceInitiatedShutdownBehavior",
            "instanceType",
            "kernel",
            "productCodes",
            "ramdisk",
            "rootDeviceName",
            "sourceDestCheck",
            "sriovNetSupport",
            "userData",
        ]
    ] = Field(default=None, alias="Attribute")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ResetInstanceAttributeRequestInstanceResetSourceDestCheckModel(BaseModel):
    attribute: Optional[
        Literal[
            "blockDeviceMapping",
            "disableApiStop",
            "disableApiTermination",
            "ebsOptimized",
            "enaSupport",
            "enclaveOptions",
            "groupSet",
            "instanceInitiatedShutdownBehavior",
            "instanceType",
            "kernel",
            "productCodes",
            "ramdisk",
            "rootDeviceName",
            "sourceDestCheck",
            "sriovNetSupport",
            "userData",
        ]
    ] = Field(default=None, alias="Attribute")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ResetInstanceAttributeRequestModel(BaseModel):
    attribute: Literal[
        "blockDeviceMapping",
        "disableApiStop",
        "disableApiTermination",
        "ebsOptimized",
        "enaSupport",
        "enclaveOptions",
        "groupSet",
        "instanceInitiatedShutdownBehavior",
        "instanceType",
        "kernel",
        "productCodes",
        "ramdisk",
        "rootDeviceName",
        "sourceDestCheck",
        "sriovNetSupport",
        "userData",
    ] = Field(alias="Attribute")
    instance_id: str = Field(alias="InstanceId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ResetNetworkInterfaceAttributeRequestNetworkInterfaceResetAttributeModel(
    BaseModel
):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    source_dest_check: Optional[str] = Field(default=None, alias="SourceDestCheck")


class ResetNetworkInterfaceAttributeRequestModel(BaseModel):
    network_interface_id: str = Field(alias="NetworkInterfaceId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    source_dest_check: Optional[str] = Field(default=None, alias="SourceDestCheck")


class ResetSnapshotAttributeRequestModel(BaseModel):
    attribute: Literal["createVolumePermission", "productCodes"] = Field(
        alias="Attribute"
    )
    snapshot_id: str = Field(alias="SnapshotId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ResetSnapshotAttributeRequestSnapshotResetAttributeModel(BaseModel):
    attribute: Literal["createVolumePermission", "productCodes"] = Field(
        alias="Attribute"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class RestoreAddressToClassicRequestModel(BaseModel):
    public_ip: str = Field(alias="PublicIp")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class RestoreImageFromRecycleBinRequestModel(BaseModel):
    image_id: str = Field(alias="ImageId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class RestoreManagedPrefixListVersionRequestModel(BaseModel):
    prefix_list_id: str = Field(alias="PrefixListId")
    previous_version: int = Field(alias="PreviousVersion")
    current_version: int = Field(alias="CurrentVersion")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class RestoreSnapshotFromRecycleBinRequestModel(BaseModel):
    snapshot_id: str = Field(alias="SnapshotId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class RestoreSnapshotTierRequestModel(BaseModel):
    snapshot_id: str = Field(alias="SnapshotId")
    temporary_restore_days: Optional[int] = Field(
        default=None, alias="TemporaryRestoreDays"
    )
    permanent_restore: Optional[bool] = Field(default=None, alias="PermanentRestore")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class RevokeClientVpnIngressRequestModel(BaseModel):
    client_vpn_endpoint_id: str = Field(alias="ClientVpnEndpointId")
    target_network_cidr: str = Field(alias="TargetNetworkCidr")
    access_group_id: Optional[str] = Field(default=None, alias="AccessGroupId")
    revoke_all_groups: Optional[bool] = Field(default=None, alias="RevokeAllGroups")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class RouteModel(BaseModel):
    destination_cidr_block: Optional[str] = Field(
        default=None, alias="DestinationCidrBlock"
    )
    destination_ipv6_cidr_block: Optional[str] = Field(
        default=None, alias="DestinationIpv6CidrBlock"
    )
    destination_prefix_list_id: Optional[str] = Field(
        default=None, alias="DestinationPrefixListId"
    )
    egress_only_internet_gateway_id: Optional[str] = Field(
        default=None, alias="EgressOnlyInternetGatewayId"
    )
    gateway_id: Optional[str] = Field(default=None, alias="GatewayId")
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    instance_owner_id: Optional[str] = Field(default=None, alias="InstanceOwnerId")
    nat_gateway_id: Optional[str] = Field(default=None, alias="NatGatewayId")
    transit_gateway_id: Optional[str] = Field(default=None, alias="TransitGatewayId")
    local_gateway_id: Optional[str] = Field(default=None, alias="LocalGatewayId")
    carrier_gateway_id: Optional[str] = Field(default=None, alias="CarrierGatewayId")
    network_interface_id: Optional[str] = Field(
        default=None, alias="NetworkInterfaceId"
    )
    origin: Optional[
        Literal["CreateRoute", "CreateRouteTable", "EnableVgwRoutePropagation"]
    ] = Field(default=None, alias="Origin")
    state: Optional[Literal["active", "blackhole"]] = Field(default=None, alias="State")
    vpc_peering_connection_id: Optional[str] = Field(
        default=None, alias="VpcPeeringConnectionId"
    )
    core_network_arn: Optional[str] = Field(default=None, alias="CoreNetworkArn")


class S3StorageModel(BaseModel):
    aws_access_key_id: Optional[str] = Field(default=None, alias="AWSAccessKeyId")
    bucket: Optional[str] = Field(default=None, alias="Bucket")
    prefix: Optional[str] = Field(default=None, alias="Prefix")
    upload_policy: Optional[
        Union[str, bytes, Type[IO[Any]], Type[StreamingBody]]
    ] = Field(default=None, alias="UploadPolicy")
    upload_policy_signature: Optional[str] = Field(
        default=None, alias="UploadPolicySignature"
    )


class ScheduledInstanceRecurrenceModel(BaseModel):
    frequency: Optional[str] = Field(default=None, alias="Frequency")
    interval: Optional[int] = Field(default=None, alias="Interval")
    occurrence_day_set: Optional[List[int]] = Field(
        default=None, alias="OccurrenceDaySet"
    )
    occurrence_relative_to_end: Optional[bool] = Field(
        default=None, alias="OccurrenceRelativeToEnd"
    )
    occurrence_unit: Optional[str] = Field(default=None, alias="OccurrenceUnit")


class ScheduledInstancesEbsModel(BaseModel):
    delete_on_termination: Optional[bool] = Field(
        default=None, alias="DeleteOnTermination"
    )
    encrypted: Optional[bool] = Field(default=None, alias="Encrypted")
    iops: Optional[int] = Field(default=None, alias="Iops")
    snapshot_id: Optional[str] = Field(default=None, alias="SnapshotId")
    volume_size: Optional[int] = Field(default=None, alias="VolumeSize")
    volume_type: Optional[str] = Field(default=None, alias="VolumeType")


class ScheduledInstancesIamInstanceProfileModel(BaseModel):
    arn: Optional[str] = Field(default=None, alias="Arn")
    name: Optional[str] = Field(default=None, alias="Name")


class ScheduledInstancesIpv6AddressModel(BaseModel):
    ipv6_address: Optional[str] = Field(default=None, alias="Ipv6Address")


class ScheduledInstancesMonitoringModel(BaseModel):
    enabled: Optional[bool] = Field(default=None, alias="Enabled")


class ScheduledInstancesPlacementModel(BaseModel):
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    group_name: Optional[str] = Field(default=None, alias="GroupName")


class ScheduledInstancesPrivateIpAddressConfigModel(BaseModel):
    primary: Optional[bool] = Field(default=None, alias="Primary")
    private_ip_address: Optional[str] = Field(default=None, alias="PrivateIpAddress")


class TransitGatewayMulticastGroupModel(BaseModel):
    group_ip_address: Optional[str] = Field(default=None, alias="GroupIpAddress")
    transit_gateway_attachment_id: Optional[str] = Field(
        default=None, alias="TransitGatewayAttachmentId"
    )
    subnet_id: Optional[str] = Field(default=None, alias="SubnetId")
    resource_id: Optional[str] = Field(default=None, alias="ResourceId")
    resource_type: Optional[
        Literal[
            "connect", "direct-connect-gateway", "peering", "tgw-peering", "vpc", "vpn"
        ]
    ] = Field(default=None, alias="ResourceType")
    resource_owner_id: Optional[str] = Field(default=None, alias="ResourceOwnerId")
    network_interface_id: Optional[str] = Field(
        default=None, alias="NetworkInterfaceId"
    )
    group_member: Optional[bool] = Field(default=None, alias="GroupMember")
    group_source: Optional[bool] = Field(default=None, alias="GroupSource")
    member_type: Optional[Literal["igmp", "static"]] = Field(
        default=None, alias="MemberType"
    )
    source_type: Optional[Literal["igmp", "static"]] = Field(
        default=None, alias="SourceType"
    )


class SecurityGroupIdentifierModel(BaseModel):
    group_id: Optional[str] = Field(default=None, alias="GroupId")
    group_name: Optional[str] = Field(default=None, alias="GroupName")


class SecurityGroupRuleDescriptionModel(BaseModel):
    security_group_rule_id: Optional[str] = Field(
        default=None, alias="SecurityGroupRuleId"
    )
    description: Optional[str] = Field(default=None, alias="Description")


class SecurityGroupRuleRequestModel(BaseModel):
    ip_protocol: Optional[str] = Field(default=None, alias="IpProtocol")
    from_port: Optional[int] = Field(default=None, alias="FromPort")
    to_port: Optional[int] = Field(default=None, alias="ToPort")
    cidr_ipv4: Optional[str] = Field(default=None, alias="CidrIpv4")
    cidr_ipv6: Optional[str] = Field(default=None, alias="CidrIpv6")
    prefix_list_id: Optional[str] = Field(default=None, alias="PrefixListId")
    referenced_group_id: Optional[str] = Field(default=None, alias="ReferencedGroupId")
    description: Optional[str] = Field(default=None, alias="Description")


class SendDiagnosticInterruptRequestModel(BaseModel):
    instance_id: str = Field(alias="InstanceId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ServiceTypeDetailModel(BaseModel):
    service_type: Optional[
        Literal["Gateway", "GatewayLoadBalancer", "Interface"]
    ] = Field(default=None, alias="ServiceType")


class ServiceResourceClassicAddressRequestModel(BaseModel):
    public_ip: str = Field(alias="public_ip")


class ServiceResourceDhcpOptionsRequestModel(BaseModel):
    id: str = Field(alias="id")


class ServiceResourceImageRequestModel(BaseModel):
    id: str = Field(alias="id")


class ServiceResourceInstanceRequestModel(BaseModel):
    id: str = Field(alias="id")


class ServiceResourceInternetGatewayRequestModel(BaseModel):
    id: str = Field(alias="id")


class ServiceResourceKeyPairRequestModel(BaseModel):
    name: str = Field(alias="name")


class ServiceResourceNetworkAclRequestModel(BaseModel):
    id: str = Field(alias="id")


class ServiceResourceNetworkInterfaceAssociationRequestModel(BaseModel):
    id: str = Field(alias="id")


class ServiceResourceNetworkInterfaceRequestModel(BaseModel):
    id: str = Field(alias="id")


class ServiceResourcePlacementGroupRequestModel(BaseModel):
    name: str = Field(alias="name")


class ServiceResourceRouteRequestModel(BaseModel):
    route_table_id: str = Field(alias="route_table_id")
    destination_cidr_block: str = Field(alias="destination_cidr_block")


class ServiceResourceRouteTableAssociationRequestModel(BaseModel):
    id: str = Field(alias="id")


class ServiceResourceRouteTableRequestModel(BaseModel):
    id: str = Field(alias="id")


class ServiceResourceSecurityGroupRequestModel(BaseModel):
    id: str = Field(alias="id")


class ServiceResourceSnapshotRequestModel(BaseModel):
    id: str = Field(alias="id")


class ServiceResourceSubnetRequestModel(BaseModel):
    id: str = Field(alias="id")


class ServiceResourceTagRequestModel(BaseModel):
    resource_id: str = Field(alias="resource_id")
    key: str = Field(alias="key")
    value: str = Field(alias="value")


class ServiceResourceVolumeRequestModel(BaseModel):
    id: str = Field(alias="id")


class ServiceResourceVpcAddressRequestModel(BaseModel):
    allocation_id: str = Field(alias="allocation_id")


class ServiceResourceVpcPeeringConnectionRequestModel(BaseModel):
    id: str = Field(alias="id")


class ServiceResourceVpcRequestModel(BaseModel):
    id: str = Field(alias="id")


class UserBucketDetailsModel(BaseModel):
    s3_bucket: Optional[str] = Field(default=None, alias="S3Bucket")
    s3_key: Optional[str] = Field(default=None, alias="S3Key")


class SpotCapacityRebalanceModel(BaseModel):
    replacement_strategy: Optional[
        Literal["launch", "launch-before-terminate"]
    ] = Field(default=None, alias="ReplacementStrategy")
    termination_delay: Optional[int] = Field(default=None, alias="TerminationDelay")


class SpotInstanceStateFaultModel(BaseModel):
    code: Optional[str] = Field(default=None, alias="Code")
    message: Optional[str] = Field(default=None, alias="Message")


class SpotFleetMonitoringModel(BaseModel):
    enabled: Optional[bool] = Field(default=None, alias="Enabled")


class SpotInstanceStatusModel(BaseModel):
    code: Optional[str] = Field(default=None, alias="Code")
    message: Optional[str] = Field(default=None, alias="Message")
    update_time: Optional[datetime] = Field(default=None, alias="UpdateTime")


class StartInstancesRequestInstanceStartModel(BaseModel):
    additional_info: Optional[str] = Field(default=None, alias="AdditionalInfo")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class StartInstancesRequestModel(BaseModel):
    instance_ids: Sequence[str] = Field(alias="InstanceIds")
    additional_info: Optional[str] = Field(default=None, alias="AdditionalInfo")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class StartVpcEndpointServicePrivateDnsVerificationRequestModel(BaseModel):
    service_id: str = Field(alias="ServiceId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class StopInstancesRequestInstanceStopModel(BaseModel):
    hibernate: Optional[bool] = Field(default=None, alias="Hibernate")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    force: Optional[bool] = Field(default=None, alias="Force")


class StopInstancesRequestModel(BaseModel):
    instance_ids: Sequence[str] = Field(alias="InstanceIds")
    hibernate: Optional[bool] = Field(default=None, alias="Hibernate")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    force: Optional[bool] = Field(default=None, alias="Force")


class SubnetAssociationModel(BaseModel):
    subnet_id: Optional[str] = Field(default=None, alias="SubnetId")
    state: Optional[
        Literal[
            "associated",
            "associating",
            "disassociated",
            "disassociating",
            "failed",
            "pendingAcceptance",
            "rejected",
        ]
    ] = Field(default=None, alias="State")


class SubnetCidrBlockStateModel(BaseModel):
    state: Optional[
        Literal[
            "associated",
            "associating",
            "disassociated",
            "disassociating",
            "failed",
            "failing",
        ]
    ] = Field(default=None, alias="State")
    status_message: Optional[str] = Field(default=None, alias="StatusMessage")


class TargetConfigurationModel(BaseModel):
    instance_count: Optional[int] = Field(default=None, alias="InstanceCount")
    offering_id: Optional[str] = Field(default=None, alias="OfferingId")


class TargetGroupModel(BaseModel):
    arn: Optional[str] = Field(default=None, alias="Arn")


class TerminateClientVpnConnectionsRequestModel(BaseModel):
    client_vpn_endpoint_id: str = Field(alias="ClientVpnEndpointId")
    connection_id: Optional[str] = Field(default=None, alias="ConnectionId")
    username: Optional[str] = Field(default=None, alias="Username")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class TerminateInstancesRequestInstanceTerminateModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class TerminateInstancesRequestModel(BaseModel):
    instance_ids: Sequence[str] = Field(alias="InstanceIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class TrafficMirrorPortRangeModel(BaseModel):
    from_port: Optional[int] = Field(default=None, alias="FromPort")
    to_port: Optional[int] = Field(default=None, alias="ToPort")


class TransitGatewayAttachmentAssociationModel(BaseModel):
    transit_gateway_route_table_id: Optional[str] = Field(
        default=None, alias="TransitGatewayRouteTableId"
    )
    state: Optional[
        Literal["associated", "associating", "disassociated", "disassociating"]
    ] = Field(default=None, alias="State")


class TransitGatewayAttachmentBgpConfigurationModel(BaseModel):
    transit_gateway_asn: Optional[int] = Field(default=None, alias="TransitGatewayAsn")
    peer_asn: Optional[int] = Field(default=None, alias="PeerAsn")
    transit_gateway_address: Optional[str] = Field(
        default=None, alias="TransitGatewayAddress"
    )
    peer_address: Optional[str] = Field(default=None, alias="PeerAddress")
    bgp_status: Optional[Literal["down", "up"]] = Field(default=None, alias="BgpStatus")


class TransitGatewayConnectOptionsModel(BaseModel):
    protocol: Optional[Literal["gre"]] = Field(default=None, alias="Protocol")


class TransitGatewayMulticastDomainOptionsModel(BaseModel):
    igmpv2_support: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="Igmpv2Support"
    )
    static_sources_support: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="StaticSourcesSupport"
    )
    auto_accept_shared_associations: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="AutoAcceptSharedAssociations"
    )


class TransitGatewayOptionsModel(BaseModel):
    amazon_side_asn: Optional[int] = Field(default=None, alias="AmazonSideAsn")
    transit_gateway_cidr_blocks: Optional[List[str]] = Field(
        default=None, alias="TransitGatewayCidrBlocks"
    )
    auto_accept_shared_attachments: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="AutoAcceptSharedAttachments"
    )
    default_route_table_association: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="DefaultRouteTableAssociation"
    )
    association_default_route_table_id: Optional[str] = Field(
        default=None, alias="AssociationDefaultRouteTableId"
    )
    default_route_table_propagation: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="DefaultRouteTablePropagation"
    )
    propagation_default_route_table_id: Optional[str] = Field(
        default=None, alias="PropagationDefaultRouteTableId"
    )
    vpn_ecmp_support: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="VpnEcmpSupport"
    )
    dns_support: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="DnsSupport"
    )
    multicast_support: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="MulticastSupport"
    )


class TransitGatewayPeeringAttachmentOptionsModel(BaseModel):
    dynamic_routing: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="DynamicRouting"
    )


class TransitGatewayPolicyRuleMetaDataModel(BaseModel):
    meta_data_key: Optional[str] = Field(default=None, alias="MetaDataKey")
    meta_data_value: Optional[str] = Field(default=None, alias="MetaDataValue")


class TransitGatewayPrefixListAttachmentModel(BaseModel):
    transit_gateway_attachment_id: Optional[str] = Field(
        default=None, alias="TransitGatewayAttachmentId"
    )
    resource_type: Optional[
        Literal[
            "connect", "direct-connect-gateway", "peering", "tgw-peering", "vpc", "vpn"
        ]
    ] = Field(default=None, alias="ResourceType")
    resource_id: Optional[str] = Field(default=None, alias="ResourceId")


class TransitGatewayRouteAttachmentModel(BaseModel):
    resource_id: Optional[str] = Field(default=None, alias="ResourceId")
    transit_gateway_attachment_id: Optional[str] = Field(
        default=None, alias="TransitGatewayAttachmentId"
    )
    resource_type: Optional[
        Literal[
            "connect", "direct-connect-gateway", "peering", "tgw-peering", "vpc", "vpn"
        ]
    ] = Field(default=None, alias="ResourceType")


class TransitGatewayVpcAttachmentOptionsModel(BaseModel):
    dns_support: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="DnsSupport"
    )
    ipv6_support: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="Ipv6Support"
    )
    appliance_mode_support: Optional[Literal["disable", "enable"]] = Field(
        default=None, alias="ApplianceModeSupport"
    )


class UnassignIpv6AddressesRequestModel(BaseModel):
    network_interface_id: str = Field(alias="NetworkInterfaceId")
    ipv6_addresses: Optional[Sequence[str]] = Field(default=None, alias="Ipv6Addresses")
    ipv6_prefixes: Optional[Sequence[str]] = Field(default=None, alias="Ipv6Prefixes")


class UnassignPrivateIpAddressesRequestNetworkInterfaceUnassignPrivateIpAddressesModel(
    BaseModel
):
    private_ip_addresses: Optional[Sequence[str]] = Field(
        default=None, alias="PrivateIpAddresses"
    )
    ipv4_prefixes: Optional[Sequence[str]] = Field(default=None, alias="Ipv4Prefixes")


class UnassignPrivateIpAddressesRequestModel(BaseModel):
    network_interface_id: str = Field(alias="NetworkInterfaceId")
    private_ip_addresses: Optional[Sequence[str]] = Field(
        default=None, alias="PrivateIpAddresses"
    )
    ipv4_prefixes: Optional[Sequence[str]] = Field(default=None, alias="Ipv4Prefixes")


class UnassignPrivateNatGatewayAddressRequestModel(BaseModel):
    nat_gateway_id: str = Field(alias="NatGatewayId")
    private_ip_addresses: Sequence[str] = Field(alias="PrivateIpAddresses")
    max_drain_duration_seconds: Optional[int] = Field(
        default=None, alias="MaxDrainDurationSeconds"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class UnmonitorInstancesRequestInstanceUnmonitorModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class UnmonitorInstancesRequestModel(BaseModel):
    instance_ids: Sequence[str] = Field(alias="InstanceIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class UnsuccessfulInstanceCreditSpecificationItemErrorModel(BaseModel):
    code: Optional[
        Literal[
            "IncorrectInstanceState",
            "InstanceCreditSpecification.NotSupported",
            "InvalidInstanceID.Malformed",
            "InvalidInstanceID.NotFound",
        ]
    ] = Field(default=None, alias="Code")
    message: Optional[str] = Field(default=None, alias="Message")


class UnsuccessfulItemErrorModel(BaseModel):
    code: Optional[str] = Field(default=None, alias="Code")
    message: Optional[str] = Field(default=None, alias="Message")


class ValidationErrorModel(BaseModel):
    code: Optional[str] = Field(default=None, alias="Code")
    message: Optional[str] = Field(default=None, alias="Message")


class VerifiedAccessEndpointEniOptionsModel(BaseModel):
    network_interface_id: Optional[str] = Field(
        default=None, alias="NetworkInterfaceId"
    )
    protocol: Optional[Literal["http", "https"]] = Field(default=None, alias="Protocol")
    port: Optional[int] = Field(default=None, alias="Port")


class VerifiedAccessEndpointLoadBalancerOptionsModel(BaseModel):
    protocol: Optional[Literal["http", "https"]] = Field(default=None, alias="Protocol")
    port: Optional[int] = Field(default=None, alias="Port")
    load_balancer_arn: Optional[str] = Field(default=None, alias="LoadBalancerArn")
    subnet_ids: Optional[List[str]] = Field(default=None, alias="SubnetIds")


class VerifiedAccessEndpointStatusModel(BaseModel):
    code: Optional[
        Literal["active", "deleted", "deleting", "pending", "updating"]
    ] = Field(default=None, alias="Code")
    message: Optional[str] = Field(default=None, alias="Message")


class VerifiedAccessTrustProviderCondensedModel(BaseModel):
    verified_access_trust_provider_id: Optional[str] = Field(
        default=None, alias="VerifiedAccessTrustProviderId"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    trust_provider_type: Optional[Literal["device", "user"]] = Field(
        default=None, alias="TrustProviderType"
    )
    user_trust_provider_type: Optional[Literal["iam-identity-center", "oidc"]] = Field(
        default=None, alias="UserTrustProviderType"
    )
    device_trust_provider_type: Optional[Literal["crowdstrike", "jamf"]] = Field(
        default=None, alias="DeviceTrustProviderType"
    )


class VerifiedAccessLogCloudWatchLogsDestinationOptionsModel(BaseModel):
    enabled: bool = Field(alias="Enabled")
    log_group: Optional[str] = Field(default=None, alias="LogGroup")


class VerifiedAccessLogDeliveryStatusModel(BaseModel):
    code: Optional[Literal["failed", "success"]] = Field(default=None, alias="Code")
    message: Optional[str] = Field(default=None, alias="Message")


class VerifiedAccessLogKinesisDataFirehoseDestinationOptionsModel(BaseModel):
    enabled: bool = Field(alias="Enabled")
    delivery_stream: Optional[str] = Field(default=None, alias="DeliveryStream")


class VerifiedAccessLogS3DestinationOptionsModel(BaseModel):
    enabled: bool = Field(alias="Enabled")
    bucket_name: Optional[str] = Field(default=None, alias="BucketName")
    prefix: Optional[str] = Field(default=None, alias="Prefix")
    bucket_owner: Optional[str] = Field(default=None, alias="BucketOwner")


class VgwTelemetryModel(BaseModel):
    accepted_route_count: Optional[int] = Field(
        default=None, alias="AcceptedRouteCount"
    )
    last_status_change: Optional[datetime] = Field(
        default=None, alias="LastStatusChange"
    )
    outside_ip_address: Optional[str] = Field(default=None, alias="OutsideIpAddress")
    status: Optional[Literal["DOWN", "UP"]] = Field(default=None, alias="Status")
    status_message: Optional[str] = Field(default=None, alias="StatusMessage")
    certificate_arn: Optional[str] = Field(default=None, alias="CertificateArn")


class VolumeAttachmentModel(BaseModel):
    attach_time: Optional[datetime] = Field(default=None, alias="AttachTime")
    device: Optional[str] = Field(default=None, alias="Device")
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    state: Optional[
        Literal["attached", "attaching", "busy", "detached", "detaching"]
    ] = Field(default=None, alias="State")
    volume_id: Optional[str] = Field(default=None, alias="VolumeId")
    delete_on_termination: Optional[bool] = Field(
        default=None, alias="DeleteOnTermination"
    )


class VolumeStatusActionModel(BaseModel):
    code: Optional[str] = Field(default=None, alias="Code")
    description: Optional[str] = Field(default=None, alias="Description")
    event_id: Optional[str] = Field(default=None, alias="EventId")
    event_type: Optional[str] = Field(default=None, alias="EventType")


class VolumeStatusAttachmentStatusModel(BaseModel):
    io_performance: Optional[str] = Field(default=None, alias="IoPerformance")
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")


class VolumeStatusDetailsModel(BaseModel):
    name: Optional[Literal["io-enabled", "io-performance"]] = Field(
        default=None, alias="Name"
    )
    status: Optional[str] = Field(default=None, alias="Status")


class VolumeStatusEventModel(BaseModel):
    description: Optional[str] = Field(default=None, alias="Description")
    event_id: Optional[str] = Field(default=None, alias="EventId")
    event_type: Optional[str] = Field(default=None, alias="EventType")
    not_after: Optional[datetime] = Field(default=None, alias="NotAfter")
    not_before: Optional[datetime] = Field(default=None, alias="NotBefore")
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")


class VpcCidrBlockStateModel(BaseModel):
    state: Optional[
        Literal[
            "associated",
            "associating",
            "disassociated",
            "disassociating",
            "failed",
            "failing",
        ]
    ] = Field(default=None, alias="State")
    status_message: Optional[str] = Field(default=None, alias="StatusMessage")


class VpcPeeringConnectionOptionsDescriptionModel(BaseModel):
    allow_dns_resolution_from_remote_vpc: Optional[bool] = Field(
        default=None, alias="AllowDnsResolutionFromRemoteVpc"
    )
    allow_egress_from_local_classic_link_to_remote_vpc: Optional[bool] = Field(
        default=None, alias="AllowEgressFromLocalClassicLinkToRemoteVpc"
    )
    allow_egress_from_local_vpc_to_remote_classic_link: Optional[bool] = Field(
        default=None, alias="AllowEgressFromLocalVpcToRemoteClassicLink"
    )


class VpcPeeringConnectionStateReasonModel(BaseModel):
    code: Optional[
        Literal[
            "active",
            "deleted",
            "deleting",
            "expired",
            "failed",
            "initiating-request",
            "pending-acceptance",
            "provisioning",
            "rejected",
        ]
    ] = Field(default=None, alias="Code")
    message: Optional[str] = Field(default=None, alias="Message")


class VpnStaticRouteModel(BaseModel):
    destination_cidr_block: Optional[str] = Field(
        default=None, alias="DestinationCidrBlock"
    )
    source: Optional[Literal["Static"]] = Field(default=None, alias="Source")
    state: Optional[Literal["available", "deleted", "deleting", "pending"]] = Field(
        default=None, alias="State"
    )


class WithdrawByoipCidrRequestModel(BaseModel):
    cidr: str = Field(alias="Cidr")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class AcceptAddressTransferResultModel(BaseModel):
    address_transfer: AddressTransferModel = Field(alias="AddressTransfer")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AcceptReservedInstancesExchangeQuoteResultModel(BaseModel):
    exchange_id: str = Field(alias="ExchangeId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AllocateAddressResultModel(BaseModel):
    public_ip: str = Field(alias="PublicIp")
    allocation_id: str = Field(alias="AllocationId")
    public_ipv4_pool: str = Field(alias="PublicIpv4Pool")
    network_border_group: str = Field(alias="NetworkBorderGroup")
    domain: Literal["standard", "vpc"] = Field(alias="Domain")
    customer_owned_ip: str = Field(alias="CustomerOwnedIp")
    customer_owned_ipv4_pool: str = Field(alias="CustomerOwnedIpv4Pool")
    carrier_ip: str = Field(alias="CarrierIp")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AllocateHostsResultModel(BaseModel):
    host_ids: List[str] = Field(alias="HostIds")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ApplySecurityGroupsToClientVpnTargetNetworkResultModel(BaseModel):
    security_group_ids: List[str] = Field(alias="SecurityGroupIds")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AssignIpv6AddressesResultModel(BaseModel):
    assigned_ipv6_addresses: List[str] = Field(alias="AssignedIpv6Addresses")
    assigned_ipv6_prefixes: List[str] = Field(alias="AssignedIpv6Prefixes")
    network_interface_id: str = Field(alias="NetworkInterfaceId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AssociateAddressResultModel(BaseModel):
    association_id: str = Field(alias="AssociationId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AssociateEnclaveCertificateIamRoleResultModel(BaseModel):
    certificate_s3_bucket_name: str = Field(alias="CertificateS3BucketName")
    certificate_s3_object_key: str = Field(alias="CertificateS3ObjectKey")
    encryption_kms_key_id: str = Field(alias="EncryptionKmsKeyId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AttachClassicLinkVpcResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AttachNetworkInterfaceResultModel(BaseModel):
    attachment_id: str = Field(alias="AttachmentId")
    network_card_index: int = Field(alias="NetworkCardIndex")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CancelCapacityReservationResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CancelImageLaunchPermissionResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CancelImportTaskResultModel(BaseModel):
    import_task_id: str = Field(alias="ImportTaskId")
    previous_state: str = Field(alias="PreviousState")
    state: str = Field(alias="State")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ConfirmProductInstanceResultModel(BaseModel):
    owner_id: str = Field(alias="OwnerId")
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CopyFpgaImageResultModel(BaseModel):
    fpga_image_id: str = Field(alias="FpgaImageId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CopyImageResultModel(BaseModel):
    image_id: str = Field(alias="ImageId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CpuOptionsResponseMetadataModel(BaseModel):
    core_count: int = Field(alias="CoreCount")
    threads_per_core: int = Field(alias="ThreadsPerCore")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateFpgaImageResultModel(BaseModel):
    fpga_image_id: str = Field(alias="FpgaImageId")
    fpga_image_global_id: str = Field(alias="FpgaImageGlobalId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateImageResultModel(BaseModel):
    image_id: str = Field(alias="ImageId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreatePublicIpv4PoolResultModel(BaseModel):
    pool_id: str = Field(alias="PoolId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateRestoreImageTaskResultModel(BaseModel):
    image_id: str = Field(alias="ImageId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateRouteResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateStoreImageTaskResultModel(BaseModel):
    object_key: str = Field(alias="ObjectKey")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteEgressOnlyInternetGatewayResultModel(BaseModel):
    return_code: bool = Field(alias="ReturnCode")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteFpgaImageResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteNatGatewayResultModel(BaseModel):
    nat_gateway_id: str = Field(alias="NatGatewayId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteNetworkInsightsAccessScopeAnalysisResultModel(BaseModel):
    network_insights_access_scope_analysis_id: str = Field(
        alias="NetworkInsightsAccessScopeAnalysisId"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteNetworkInsightsAccessScopeResultModel(BaseModel):
    network_insights_access_scope_id: str = Field(alias="NetworkInsightsAccessScopeId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteNetworkInsightsAnalysisResultModel(BaseModel):
    network_insights_analysis_id: str = Field(alias="NetworkInsightsAnalysisId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteNetworkInsightsPathResultModel(BaseModel):
    network_insights_path_id: str = Field(alias="NetworkInsightsPathId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteNetworkInterfacePermissionResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeletePublicIpv4PoolResultModel(BaseModel):
    return_value: bool = Field(alias="ReturnValue")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteTrafficMirrorFilterResultModel(BaseModel):
    traffic_mirror_filter_id: str = Field(alias="TrafficMirrorFilterId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteTrafficMirrorFilterRuleResultModel(BaseModel):
    traffic_mirror_filter_rule_id: str = Field(alias="TrafficMirrorFilterRuleId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteTrafficMirrorSessionResultModel(BaseModel):
    traffic_mirror_session_id: str = Field(alias="TrafficMirrorSessionId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteTrafficMirrorTargetResultModel(BaseModel):
    traffic_mirror_target_id: str = Field(alias="TrafficMirrorTargetId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteVpcPeeringConnectionResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeprovisionPublicIpv4PoolCidrResultModel(BaseModel):
    pool_id: str = Field(alias="PoolId")
    deprovisioned_addresses: List[str] = Field(alias="DeprovisionedAddresses")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeAddressTransfersResultModel(BaseModel):
    address_transfers: List[AddressTransferModel] = Field(alias="AddressTransfers")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DetachClassicLinkVpcResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DisableAddressTransferResultModel(BaseModel):
    address_transfer: AddressTransferModel = Field(alias="AddressTransfer")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DisableAwsNetworkPerformanceMetricSubscriptionResultModel(BaseModel):
    output: bool = Field(alias="Output")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DisableEbsEncryptionByDefaultResultModel(BaseModel):
    ebs_encryption_by_default: bool = Field(alias="EbsEncryptionByDefault")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DisableImageDeprecationResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DisableIpamOrganizationAdminAccountResultModel(BaseModel):
    success: bool = Field(alias="Success")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DisableSerialConsoleAccessResultModel(BaseModel):
    serial_console_access_enabled: bool = Field(alias="SerialConsoleAccessEnabled")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DisableVpcClassicLinkDnsSupportResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DisableVpcClassicLinkResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DisassociateEnclaveCertificateIamRoleResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DisassociateTrunkInterfaceResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    client_token: str = Field(alias="ClientToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class EmptyResponseMetadataModel(BaseModel):
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class EnableAddressTransferResultModel(BaseModel):
    address_transfer: AddressTransferModel = Field(alias="AddressTransfer")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class EnableAwsNetworkPerformanceMetricSubscriptionResultModel(BaseModel):
    output: bool = Field(alias="Output")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class EnableEbsEncryptionByDefaultResultModel(BaseModel):
    ebs_encryption_by_default: bool = Field(alias="EbsEncryptionByDefault")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class EnableImageDeprecationResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class EnableIpamOrganizationAdminAccountResultModel(BaseModel):
    success: bool = Field(alias="Success")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class EnableReachabilityAnalyzerOrganizationSharingResultModel(BaseModel):
    return_value: bool = Field(alias="ReturnValue")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class EnableSerialConsoleAccessResultModel(BaseModel):
    serial_console_access_enabled: bool = Field(alias="SerialConsoleAccessEnabled")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class EnableVpcClassicLinkDnsSupportResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class EnableVpcClassicLinkResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class EnclaveOptionsResponseMetadataModel(BaseModel):
    enabled: bool = Field(alias="Enabled")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ExportClientVpnClientConfigurationResultModel(BaseModel):
    client_configuration: str = Field(alias="ClientConfiguration")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ExportTransitGatewayRoutesResultModel(BaseModel):
    s3_location: str = Field(alias="S3Location")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetConsoleOutputResultModel(BaseModel):
    instance_id: str = Field(alias="InstanceId")
    output: str = Field(alias="Output")
    timestamp: datetime = Field(alias="Timestamp")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetConsoleScreenshotResultModel(BaseModel):
    image_data: str = Field(alias="ImageData")
    instance_id: str = Field(alias="InstanceId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetEbsDefaultKmsKeyIdResultModel(BaseModel):
    kms_key_id: str = Field(alias="KmsKeyId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetEbsEncryptionByDefaultResultModel(BaseModel):
    ebs_encryption_by_default: bool = Field(alias="EbsEncryptionByDefault")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetFlowLogsIntegrationTemplateResultModel(BaseModel):
    result: str = Field(alias="Result")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetInstanceUefiDataResultModel(BaseModel):
    instance_id: str = Field(alias="InstanceId")
    uefi_data: str = Field(alias="UefiData")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetPasswordDataResultModel(BaseModel):
    instance_id: str = Field(alias="InstanceId")
    password_data: str = Field(alias="PasswordData")
    timestamp: datetime = Field(alias="Timestamp")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetSerialConsoleAccessStatusResultModel(BaseModel):
    serial_console_access_enabled: bool = Field(alias="SerialConsoleAccessEnabled")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetVerifiedAccessEndpointPolicyResultModel(BaseModel):
    policy_enabled: bool = Field(alias="PolicyEnabled")
    policy_document: str = Field(alias="PolicyDocument")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetVerifiedAccessGroupPolicyResultModel(BaseModel):
    policy_enabled: bool = Field(alias="PolicyEnabled")
    policy_document: str = Field(alias="PolicyDocument")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetVpnConnectionDeviceSampleConfigurationResultModel(BaseModel):
    vpn_connection_device_sample_configuration: str = Field(
        alias="VpnConnectionDeviceSampleConfiguration"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class HibernationOptionsResponseMetadataModel(BaseModel):
    configured: bool = Field(alias="Configured")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class IamInstanceProfileResponseMetadataModel(BaseModel):
    arn: str = Field(alias="Arn")
    id: str = Field(alias="Id")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ImportClientVpnClientCertificateRevocationListResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class InstanceMaintenanceOptionsResponseMetadataModel(BaseModel):
    auto_recovery: Literal["default", "disabled"] = Field(alias="AutoRecovery")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class InstanceMetadataOptionsResponseResponseMetadataModel(BaseModel):
    state: Literal["applied", "pending"] = Field(alias="State")
    http_tokens: Literal["optional", "required"] = Field(alias="HttpTokens")
    http_put_response_hop_limit: int = Field(alias="HttpPutResponseHopLimit")
    http_endpoint: Literal["disabled", "enabled"] = Field(alias="HttpEndpoint")
    http_protocol_ipv6: Literal["disabled", "enabled"] = Field(alias="HttpProtocolIpv6")
    instance_metadata_tags: Literal["disabled", "enabled"] = Field(
        alias="InstanceMetadataTags"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class InstanceStateResponseMetadataModel(BaseModel):
    code: int = Field(alias="Code")
    name: Literal[
        "pending", "running", "shutting-down", "stopped", "stopping", "terminated"
    ] = Field(alias="Name")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyAvailabilityZoneGroupResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyCapacityReservationFleetResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyCapacityReservationResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyClientVpnEndpointResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyEbsDefaultKmsKeyIdResultModel(BaseModel):
    kms_key_id: str = Field(alias="KmsKeyId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyFleetResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyInstanceCapacityReservationAttributesResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyInstanceMaintenanceOptionsResultModel(BaseModel):
    instance_id: str = Field(alias="InstanceId")
    auto_recovery: Literal["default", "disabled"] = Field(alias="AutoRecovery")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyInstancePlacementResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyPrivateDnsNameOptionsResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyReservedInstancesResultModel(BaseModel):
    reserved_instances_modification_id: str = Field(
        alias="ReservedInstancesModificationId"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifySecurityGroupRulesResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifySnapshotTierResultModel(BaseModel):
    snapshot_id: str = Field(alias="SnapshotId")
    tiering_start_time: datetime = Field(alias="TieringStartTime")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifySpotFleetRequestResponseModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyVerifiedAccessEndpointPolicyResultModel(BaseModel):
    policy_enabled: bool = Field(alias="PolicyEnabled")
    policy_document: str = Field(alias="PolicyDocument")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyVerifiedAccessGroupPolicyResultModel(BaseModel):
    policy_enabled: bool = Field(alias="PolicyEnabled")
    policy_document: str = Field(alias="PolicyDocument")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyVpcEndpointConnectionNotificationResultModel(BaseModel):
    return_value: bool = Field(alias="ReturnValue")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyVpcEndpointResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyVpcEndpointServiceConfigurationResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyVpcEndpointServicePayerResponsibilityResultModel(BaseModel):
    return_value: bool = Field(alias="ReturnValue")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyVpcTenancyResultModel(BaseModel):
    return_value: bool = Field(alias="ReturnValue")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class MonitoringResponseMetadataModel(BaseModel):
    state: Literal["disabled", "disabling", "enabled", "pending"] = Field(alias="State")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class MoveAddressToVpcResultModel(BaseModel):
    allocation_id: str = Field(alias="AllocationId")
    status: Literal["InClassic", "InVpc", "MoveInProgress"] = Field(alias="Status")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class NetworkInterfaceAssociationResponseMetadataModel(BaseModel):
    allocation_id: str = Field(alias="AllocationId")
    association_id: str = Field(alias="AssociationId")
    ip_owner_id: str = Field(alias="IpOwnerId")
    public_dns_name: str = Field(alias="PublicDnsName")
    public_ip: str = Field(alias="PublicIp")
    customer_owned_ip: str = Field(alias="CustomerOwnedIp")
    carrier_ip: str = Field(alias="CarrierIp")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class PlacementResponseMetadataModel(BaseModel):
    availability_zone: str = Field(alias="AvailabilityZone")
    affinity: str = Field(alias="Affinity")
    group_name: str = Field(alias="GroupName")
    partition_number: int = Field(alias="PartitionNumber")
    host_id: str = Field(alias="HostId")
    tenancy: Literal["dedicated", "default", "host"] = Field(alias="Tenancy")
    spread_domain: str = Field(alias="SpreadDomain")
    host_resource_group_arn: str = Field(alias="HostResourceGroupArn")
    group_id: str = Field(alias="GroupId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class PrivateDnsNameOptionsOnLaunchResponseMetadataModel(BaseModel):
    hostname_type: Literal["ip-name", "resource-name"] = Field(alias="HostnameType")
    enable_resource_name_dns_arecord: bool = Field(alias="EnableResourceNameDnsARecord")
    enable_resource_name_dns_aaaarecord: bool = Field(
        alias="EnableResourceNameDnsAAAARecord"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class PrivateDnsNameOptionsResponseResponseMetadataModel(BaseModel):
    hostname_type: Literal["ip-name", "resource-name"] = Field(alias="HostnameType")
    enable_resource_name_dns_arecord: bool = Field(alias="EnableResourceNameDnsARecord")
    enable_resource_name_dns_aaaarecord: bool = Field(
        alias="EnableResourceNameDnsAAAARecord"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class PurchaseReservedInstancesOfferingResultModel(BaseModel):
    reserved_instances_id: str = Field(alias="ReservedInstancesId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class RegisterImageResultModel(BaseModel):
    image_id: str = Field(alias="ImageId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class RejectVpcPeeringConnectionResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ReleaseIpamPoolAllocationResultModel(BaseModel):
    success: bool = Field(alias="Success")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ReplaceNetworkAclAssociationResultModel(BaseModel):
    new_association_id: str = Field(alias="NewAssociationId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class RequestSpotFleetResponseModel(BaseModel):
    spot_fleet_request_id: str = Field(alias="SpotFleetRequestId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ResetEbsDefaultKmsKeyIdResultModel(BaseModel):
    kms_key_id: str = Field(alias="KmsKeyId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ResetFpgaImageAttributeResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class RestoreAddressToClassicResultModel(BaseModel):
    public_ip: str = Field(alias="PublicIp")
    status: Literal["InClassic", "InVpc", "MoveInProgress"] = Field(alias="Status")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class RestoreImageFromRecycleBinResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class RestoreSnapshotFromRecycleBinResultModel(BaseModel):
    snapshot_id: str = Field(alias="SnapshotId")
    outpost_arn: str = Field(alias="OutpostArn")
    description: str = Field(alias="Description")
    encrypted: bool = Field(alias="Encrypted")
    owner_id: str = Field(alias="OwnerId")
    progress: str = Field(alias="Progress")
    start_time: datetime = Field(alias="StartTime")
    state: Literal[
        "completed", "error", "pending", "recoverable", "recovering"
    ] = Field(alias="State")
    volume_id: str = Field(alias="VolumeId")
    volume_size: int = Field(alias="VolumeSize")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class RestoreSnapshotTierResultModel(BaseModel):
    snapshot_id: str = Field(alias="SnapshotId")
    restore_start_time: datetime = Field(alias="RestoreStartTime")
    restore_duration: int = Field(alias="RestoreDuration")
    is_permanent_restore: bool = Field(alias="IsPermanentRestore")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class RouteTableAssociationStateResponseMetadataModel(BaseModel):
    state: Literal[
        "associated", "associating", "disassociated", "disassociating", "failed"
    ] = Field(alias="State")
    status_message: str = Field(alias="StatusMessage")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class RunScheduledInstancesResultModel(BaseModel):
    instance_id_set: List[str] = Field(alias="InstanceIdSet")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class StartVpcEndpointServicePrivateDnsVerificationResultModel(BaseModel):
    return_value: bool = Field(alias="ReturnValue")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class StateReasonResponseMetadataModel(BaseModel):
    code: str = Field(alias="Code")
    message: str = Field(alias="Message")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class UnassignIpv6AddressesResultModel(BaseModel):
    network_interface_id: str = Field(alias="NetworkInterfaceId")
    unassigned_ipv6_addresses: List[str] = Field(alias="UnassignedIpv6Addresses")
    unassigned_ipv6_prefixes: List[str] = Field(alias="UnassignedIpv6Prefixes")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class UpdateSecurityGroupRuleDescriptionsEgressResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class UpdateSecurityGroupRuleDescriptionsIngressResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class VolumeAttachmentResponseMetadataModel(BaseModel):
    attach_time: datetime = Field(alias="AttachTime")
    device: str = Field(alias="Device")
    instance_id: str = Field(alias="InstanceId")
    state: Literal["attached", "attaching", "busy", "detached", "detaching"] = Field(
        alias="State"
    )
    volume_id: str = Field(alias="VolumeId")
    delete_on_termination: bool = Field(alias="DeleteOnTermination")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class VpcPeeringConnectionStateReasonResponseMetadataModel(BaseModel):
    code: Literal[
        "active",
        "deleted",
        "deleting",
        "expired",
        "failed",
        "initiating-request",
        "pending-acceptance",
        "provisioning",
        "rejected",
    ] = Field(alias="Code")
    message: str = Field(alias="Message")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AcceptReservedInstancesExchangeQuoteRequestModel(BaseModel):
    reserved_instance_ids: Sequence[str] = Field(alias="ReservedInstanceIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    target_configurations: Optional[Sequence[TargetConfigurationRequestModel]] = Field(
        default=None, alias="TargetConfigurations"
    )


class GetReservedInstancesExchangeQuoteRequestModel(BaseModel):
    reserved_instance_ids: Sequence[str] = Field(alias="ReservedInstanceIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    target_configurations: Optional[Sequence[TargetConfigurationRequestModel]] = Field(
        default=None, alias="TargetConfigurations"
    )


class AccountAttributeModel(BaseModel):
    attribute_name: Optional[str] = Field(default=None, alias="AttributeName")
    attribute_values: Optional[List[AccountAttributeValueModel]] = Field(
        default=None, alias="AttributeValues"
    )


class DescribeFleetInstancesResultModel(BaseModel):
    active_instances: List[ActiveInstanceModel] = Field(alias="ActiveInstances")
    next_token: str = Field(alias="NextToken")
    fleet_id: str = Field(alias="FleetId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeSpotFleetInstancesResponseModel(BaseModel):
    active_instances: List[ActiveInstanceModel] = Field(alias="ActiveInstances")
    next_token: str = Field(alias="NextToken")
    spot_fleet_request_id: str = Field(alias="SpotFleetRequestId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyVpcEndpointServicePermissionsResultModel(BaseModel):
    added_principals: List[AddedPrincipalModel] = Field(alias="AddedPrincipals")
    return_value: bool = Field(alias="ReturnValue")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AdditionalDetailModel(BaseModel):
    additional_detail_type: Optional[str] = Field(
        default=None, alias="AdditionalDetailType"
    )
    component: Optional[AnalysisComponentModel] = Field(default=None, alias="Component")


class AnalysisLoadBalancerTargetModel(BaseModel):
    address: Optional[str] = Field(default=None, alias="Address")
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    instance: Optional[AnalysisComponentModel] = Field(default=None, alias="Instance")
    port: Optional[int] = Field(default=None, alias="Port")


class AddressAttributeModel(BaseModel):
    public_ip: Optional[str] = Field(default=None, alias="PublicIp")
    allocation_id: Optional[str] = Field(default=None, alias="AllocationId")
    ptr_record: Optional[str] = Field(default=None, alias="PtrRecord")
    ptr_record_update: Optional[PtrUpdateStatusModel] = Field(
        default=None, alias="PtrRecordUpdate"
    )


class AddressModel(BaseModel):
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    public_ip: Optional[str] = Field(default=None, alias="PublicIp")
    allocation_id: Optional[str] = Field(default=None, alias="AllocationId")
    association_id: Optional[str] = Field(default=None, alias="AssociationId")
    domain: Optional[Literal["standard", "vpc"]] = Field(default=None, alias="Domain")
    network_interface_id: Optional[str] = Field(
        default=None, alias="NetworkInterfaceId"
    )
    network_interface_owner_id: Optional[str] = Field(
        default=None, alias="NetworkInterfaceOwnerId"
    )
    private_ip_address: Optional[str] = Field(default=None, alias="PrivateIpAddress")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    public_ipv4_pool: Optional[str] = Field(default=None, alias="PublicIpv4Pool")
    network_border_group: Optional[str] = Field(
        default=None, alias="NetworkBorderGroup"
    )
    customer_owned_ip: Optional[str] = Field(default=None, alias="CustomerOwnedIp")
    customer_owned_ipv4_pool: Optional[str] = Field(
        default=None, alias="CustomerOwnedIpv4Pool"
    )
    carrier_ip: Optional[str] = Field(default=None, alias="CarrierIp")


class AllowedPrincipalModel(BaseModel):
    principal_type: Optional[
        Literal["Account", "All", "OrganizationUnit", "Role", "Service", "User"]
    ] = Field(default=None, alias="PrincipalType")
    principal: Optional[str] = Field(default=None, alias="Principal")
    service_permission_id: Optional[str] = Field(
        default=None, alias="ServicePermissionId"
    )
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    service_id: Optional[str] = Field(default=None, alias="ServiceId")


class CarrierGatewayModel(BaseModel):
    carrier_gateway_id: Optional[str] = Field(default=None, alias="CarrierGatewayId")
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")
    state: Optional[Literal["available", "deleted", "deleting", "pending"]] = Field(
        default=None, alias="State"
    )
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class CoipPoolModel(BaseModel):
    pool_id: Optional[str] = Field(default=None, alias="PoolId")
    pool_cidrs: Optional[List[str]] = Field(default=None, alias="PoolCidrs")
    local_gateway_route_table_id: Optional[str] = Field(
        default=None, alias="LocalGatewayRouteTableId"
    )
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    pool_arn: Optional[str] = Field(default=None, alias="PoolArn")


class CopySnapshotResultModel(BaseModel):
    snapshot_id: str = Field(alias="SnapshotId")
    tags: List[TagModel] = Field(alias="Tags")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateSecurityGroupResultModel(BaseModel):
    group_id: str = Field(alias="GroupId")
    tags: List[TagModel] = Field(alias="Tags")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateTagsRequestDhcpOptionsCreateTagsModel(BaseModel):
    tags: Union[Sequence[TagModel], None] = Field(alias="Tags")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateTagsRequestImageCreateTagsModel(BaseModel):
    tags: Union[Sequence[TagModel], None] = Field(alias="Tags")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateTagsRequestInstanceCreateTagsModel(BaseModel):
    tags: Union[Sequence[TagModel], None] = Field(alias="Tags")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateTagsRequestInternetGatewayCreateTagsModel(BaseModel):
    tags: Union[Sequence[TagModel], None] = Field(alias="Tags")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateTagsRequestNetworkAclCreateTagsModel(BaseModel):
    tags: Union[Sequence[TagModel], None] = Field(alias="Tags")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateTagsRequestNetworkInterfaceCreateTagsModel(BaseModel):
    tags: Union[Sequence[TagModel], None] = Field(alias="Tags")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateTagsRequestModel(BaseModel):
    resources: Sequence[Any] = Field(alias="Resources")
    tags: Union[Sequence[TagModel], None] = Field(alias="Tags")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateTagsRequestRouteTableCreateTagsModel(BaseModel):
    tags: Union[Sequence[TagModel], None] = Field(alias="Tags")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateTagsRequestSecurityGroupCreateTagsModel(BaseModel):
    tags: Union[Sequence[TagModel], None] = Field(alias="Tags")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateTagsRequestServiceResourceCreateTagsModel(BaseModel):
    resources: Sequence[str] = Field(alias="Resources")
    tags: Sequence[TagModel] = Field(alias="Tags")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateTagsRequestSnapshotCreateTagsModel(BaseModel):
    tags: Union[Sequence[TagModel], None] = Field(alias="Tags")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateTagsRequestSubnetCreateTagsModel(BaseModel):
    tags: Union[Sequence[TagModel], None] = Field(alias="Tags")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateTagsRequestVolumeCreateTagsModel(BaseModel):
    tags: Union[Sequence[TagModel], None] = Field(alias="Tags")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateTagsRequestVpcCreateTagsModel(BaseModel):
    tags: Union[Sequence[TagModel], None] = Field(alias="Tags")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CustomerGatewayModel(BaseModel):
    bgp_asn: Optional[str] = Field(default=None, alias="BgpAsn")
    customer_gateway_id: Optional[str] = Field(default=None, alias="CustomerGatewayId")
    ip_address: Optional[str] = Field(default=None, alias="IpAddress")
    certificate_arn: Optional[str] = Field(default=None, alias="CertificateArn")
    state: Optional[str] = Field(default=None, alias="State")
    type: Optional[str] = Field(default=None, alias="Type")
    device_name: Optional[str] = Field(default=None, alias="DeviceName")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class DeleteTagsRequestModel(BaseModel):
    resources: Sequence[Any] = Field(alias="Resources")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    tags: Optional[Union[Sequence[TagModel], None]] = Field(default=None, alias="Tags")


class HostReservationModel(BaseModel):
    count: Optional[int] = Field(default=None, alias="Count")
    currency_code: Optional[Literal["USD"]] = Field(default=None, alias="CurrencyCode")
    duration: Optional[int] = Field(default=None, alias="Duration")
    end: Optional[datetime] = Field(default=None, alias="End")
    host_id_set: Optional[List[str]] = Field(default=None, alias="HostIdSet")
    host_reservation_id: Optional[str] = Field(default=None, alias="HostReservationId")
    hourly_price: Optional[str] = Field(default=None, alias="HourlyPrice")
    instance_family: Optional[str] = Field(default=None, alias="InstanceFamily")
    offering_id: Optional[str] = Field(default=None, alias="OfferingId")
    payment_option: Optional[
        Literal["AllUpfront", "NoUpfront", "PartialUpfront"]
    ] = Field(default=None, alias="PaymentOption")
    start: Optional[datetime] = Field(default=None, alias="Start")
    state: Optional[
        Literal["active", "payment-failed", "payment-pending", "retired"]
    ] = Field(default=None, alias="State")
    upfront_price: Optional[str] = Field(default=None, alias="UpfrontPrice")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class ImportKeyPairResultModel(BaseModel):
    key_fingerprint: str = Field(alias="KeyFingerprint")
    key_name: str = Field(alias="KeyName")
    key_pair_id: str = Field(alias="KeyPairId")
    tags: List[TagModel] = Field(alias="Tags")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class InstanceDeleteTagsRequestModel(BaseModel):
    tags: Optional[Sequence[TagModel]] = Field(default=None, alias="Tags")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class InstanceEventWindowAssociationRequestModel(BaseModel):
    instance_ids: Optional[Sequence[str]] = Field(default=None, alias="InstanceIds")
    instance_tags: Optional[Sequence[TagModel]] = Field(
        default=None, alias="InstanceTags"
    )
    dedicated_host_ids: Optional[Sequence[str]] = Field(
        default=None, alias="DedicatedHostIds"
    )


class InstanceEventWindowAssociationTargetModel(BaseModel):
    instance_ids: Optional[List[str]] = Field(default=None, alias="InstanceIds")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    dedicated_host_ids: Optional[List[str]] = Field(
        default=None, alias="DedicatedHostIds"
    )


class InstanceEventWindowDisassociationRequestModel(BaseModel):
    instance_ids: Optional[Sequence[str]] = Field(default=None, alias="InstanceIds")
    instance_tags: Optional[Sequence[TagModel]] = Field(
        default=None, alias="InstanceTags"
    )
    dedicated_host_ids: Optional[Sequence[str]] = Field(
        default=None, alias="DedicatedHostIds"
    )


class IpamResourceDiscoveryAssociationModel(BaseModel):
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    ipam_resource_discovery_association_id: Optional[str] = Field(
        default=None, alias="IpamResourceDiscoveryAssociationId"
    )
    ipam_resource_discovery_association_arn: Optional[str] = Field(
        default=None, alias="IpamResourceDiscoveryAssociationArn"
    )
    ipam_resource_discovery_id: Optional[str] = Field(
        default=None, alias="IpamResourceDiscoveryId"
    )
    ipam_id: Optional[str] = Field(default=None, alias="IpamId")
    ipam_arn: Optional[str] = Field(default=None, alias="IpamArn")
    ipam_region: Optional[str] = Field(default=None, alias="IpamRegion")
    is_default: Optional[bool] = Field(default=None, alias="IsDefault")
    resource_discovery_status: Optional[Literal["active", "not-found"]] = Field(
        default=None, alias="ResourceDiscoveryStatus"
    )
    state: Optional[
        Literal[
            "associate-complete",
            "associate-failed",
            "associate-in-progress",
            "disassociate-complete",
            "disassociate-failed",
            "disassociate-in-progress",
            "isolate-complete",
            "isolate-in-progress",
            "restore-in-progress",
        ]
    ] = Field(default=None, alias="State")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class IpamScopeModel(BaseModel):
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    ipam_scope_id: Optional[str] = Field(default=None, alias="IpamScopeId")
    ipam_scope_arn: Optional[str] = Field(default=None, alias="IpamScopeArn")
    ipam_arn: Optional[str] = Field(default=None, alias="IpamArn")
    ipam_region: Optional[str] = Field(default=None, alias="IpamRegion")
    ipam_scope_type: Optional[Literal["private", "public"]] = Field(
        default=None, alias="IpamScopeType"
    )
    is_default: Optional[bool] = Field(default=None, alias="IsDefault")
    description: Optional[str] = Field(default=None, alias="Description")
    pool_count: Optional[int] = Field(default=None, alias="PoolCount")
    state: Optional[
        Literal[
            "create-complete",
            "create-failed",
            "create-in-progress",
            "delete-complete",
            "delete-failed",
            "delete-in-progress",
            "isolate-complete",
            "isolate-in-progress",
            "modify-complete",
            "modify-failed",
            "modify-in-progress",
            "restore-in-progress",
        ]
    ] = Field(default=None, alias="State")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class KeyPairInfoModel(BaseModel):
    key_pair_id: Optional[str] = Field(default=None, alias="KeyPairId")
    key_fingerprint: Optional[str] = Field(default=None, alias="KeyFingerprint")
    key_name: Optional[str] = Field(default=None, alias="KeyName")
    key_type: Optional[Literal["ed25519", "rsa"]] = Field(default=None, alias="KeyType")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    public_key: Optional[str] = Field(default=None, alias="PublicKey")
    create_time: Optional[datetime] = Field(default=None, alias="CreateTime")


class KeyPairModel(BaseModel):
    key_fingerprint: str = Field(alias="KeyFingerprint")
    key_material: str = Field(alias="KeyMaterial")
    key_name: str = Field(alias="KeyName")
    key_pair_id: str = Field(alias="KeyPairId")
    tags: List[TagModel] = Field(alias="Tags")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class LaunchTemplateTagSpecificationRequestModel(BaseModel):
    resource_type: Optional[
        Literal[
            "capacity-reservation",
            "capacity-reservation-fleet",
            "carrier-gateway",
            "client-vpn-endpoint",
            "coip-pool",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "egress-only-internet-gateway",
            "elastic-gpu",
            "elastic-ip",
            "export-image-task",
            "export-instance-task",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "import-image-task",
            "import-snapshot-task",
            "instance",
            "instance-event-window",
            "internet-gateway",
            "ipam",
            "ipam-pool",
            "ipam-resource-discovery",
            "ipam-resource-discovery-association",
            "ipam-scope",
            "ipv4pool-ec2",
            "ipv6pool-ec2",
            "key-pair",
            "launch-template",
            "local-gateway",
            "local-gateway-route-table",
            "local-gateway-route-table-virtual-interface-group-association",
            "local-gateway-route-table-vpc-association",
            "local-gateway-virtual-interface",
            "local-gateway-virtual-interface-group",
            "natgateway",
            "network-acl",
            "network-insights-access-scope",
            "network-insights-access-scope-analysis",
            "network-insights-analysis",
            "network-insights-path",
            "network-interface",
            "placement-group",
            "prefix-list",
            "replace-root-volume-task",
            "reserved-instances",
            "route-table",
            "security-group",
            "security-group-rule",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "subnet-cidr-reservation",
            "traffic-mirror-filter",
            "traffic-mirror-filter-rule",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-connect-peer",
            "transit-gateway-multicast-domain",
            "transit-gateway-policy-table",
            "transit-gateway-route-table",
            "transit-gateway-route-table-announcement",
            "verified-access-endpoint",
            "verified-access-group",
            "verified-access-instance",
            "verified-access-policy",
            "verified-access-trust-provider",
            "volume",
            "vpc",
            "vpc-block-public-access-exclusion",
            "vpc-endpoint",
            "vpc-endpoint-connection",
            "vpc-endpoint-connection-device-type",
            "vpc-endpoint-service",
            "vpc-endpoint-service-permission",
            "vpc-flow-log",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-connection-device-type",
            "vpn-gateway",
        ]
    ] = Field(default=None, alias="ResourceType")
    tags: Optional[Sequence[TagModel]] = Field(default=None, alias="Tags")


class LaunchTemplateTagSpecificationModel(BaseModel):
    resource_type: Optional[
        Literal[
            "capacity-reservation",
            "capacity-reservation-fleet",
            "carrier-gateway",
            "client-vpn-endpoint",
            "coip-pool",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "egress-only-internet-gateway",
            "elastic-gpu",
            "elastic-ip",
            "export-image-task",
            "export-instance-task",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "import-image-task",
            "import-snapshot-task",
            "instance",
            "instance-event-window",
            "internet-gateway",
            "ipam",
            "ipam-pool",
            "ipam-resource-discovery",
            "ipam-resource-discovery-association",
            "ipam-scope",
            "ipv4pool-ec2",
            "ipv6pool-ec2",
            "key-pair",
            "launch-template",
            "local-gateway",
            "local-gateway-route-table",
            "local-gateway-route-table-virtual-interface-group-association",
            "local-gateway-route-table-vpc-association",
            "local-gateway-virtual-interface",
            "local-gateway-virtual-interface-group",
            "natgateway",
            "network-acl",
            "network-insights-access-scope",
            "network-insights-access-scope-analysis",
            "network-insights-analysis",
            "network-insights-path",
            "network-interface",
            "placement-group",
            "prefix-list",
            "replace-root-volume-task",
            "reserved-instances",
            "route-table",
            "security-group",
            "security-group-rule",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "subnet-cidr-reservation",
            "traffic-mirror-filter",
            "traffic-mirror-filter-rule",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-connect-peer",
            "transit-gateway-multicast-domain",
            "transit-gateway-policy-table",
            "transit-gateway-route-table",
            "transit-gateway-route-table-announcement",
            "verified-access-endpoint",
            "verified-access-group",
            "verified-access-instance",
            "verified-access-policy",
            "verified-access-trust-provider",
            "volume",
            "vpc",
            "vpc-block-public-access-exclusion",
            "vpc-endpoint",
            "vpc-endpoint-connection",
            "vpc-endpoint-connection-device-type",
            "vpc-endpoint-service",
            "vpc-endpoint-service-permission",
            "vpc-flow-log",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-connection-device-type",
            "vpn-gateway",
        ]
    ] = Field(default=None, alias="ResourceType")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class LaunchTemplateModel(BaseModel):
    launch_template_id: Optional[str] = Field(default=None, alias="LaunchTemplateId")
    launch_template_name: Optional[str] = Field(
        default=None, alias="LaunchTemplateName"
    )
    create_time: Optional[datetime] = Field(default=None, alias="CreateTime")
    created_by: Optional[str] = Field(default=None, alias="CreatedBy")
    default_version_number: Optional[int] = Field(
        default=None, alias="DefaultVersionNumber"
    )
    latest_version_number: Optional[int] = Field(
        default=None, alias="LatestVersionNumber"
    )
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class LocalGatewayRouteTableVirtualInterfaceGroupAssociationModel(BaseModel):
    local_gateway_route_table_virtual_interface_group_association_id: Optional[
        str
    ] = Field(
        default=None, alias="LocalGatewayRouteTableVirtualInterfaceGroupAssociationId"
    )
    local_gateway_virtual_interface_group_id: Optional[str] = Field(
        default=None, alias="LocalGatewayVirtualInterfaceGroupId"
    )
    local_gateway_id: Optional[str] = Field(default=None, alias="LocalGatewayId")
    local_gateway_route_table_id: Optional[str] = Field(
        default=None, alias="LocalGatewayRouteTableId"
    )
    local_gateway_route_table_arn: Optional[str] = Field(
        default=None, alias="LocalGatewayRouteTableArn"
    )
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    state: Optional[str] = Field(default=None, alias="State")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class LocalGatewayRouteTableVpcAssociationModel(BaseModel):
    local_gateway_route_table_vpc_association_id: Optional[str] = Field(
        default=None, alias="LocalGatewayRouteTableVpcAssociationId"
    )
    local_gateway_route_table_id: Optional[str] = Field(
        default=None, alias="LocalGatewayRouteTableId"
    )
    local_gateway_route_table_arn: Optional[str] = Field(
        default=None, alias="LocalGatewayRouteTableArn"
    )
    local_gateway_id: Optional[str] = Field(default=None, alias="LocalGatewayId")
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    state: Optional[str] = Field(default=None, alias="State")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class LocalGatewayModel(BaseModel):
    local_gateway_id: Optional[str] = Field(default=None, alias="LocalGatewayId")
    outpost_arn: Optional[str] = Field(default=None, alias="OutpostArn")
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    state: Optional[str] = Field(default=None, alias="State")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class LocalGatewayVirtualInterfaceGroupModel(BaseModel):
    local_gateway_virtual_interface_group_id: Optional[str] = Field(
        default=None, alias="LocalGatewayVirtualInterfaceGroupId"
    )
    local_gateway_virtual_interface_ids: Optional[List[str]] = Field(
        default=None, alias="LocalGatewayVirtualInterfaceIds"
    )
    local_gateway_id: Optional[str] = Field(default=None, alias="LocalGatewayId")
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class LocalGatewayVirtualInterfaceModel(BaseModel):
    local_gateway_virtual_interface_id: Optional[str] = Field(
        default=None, alias="LocalGatewayVirtualInterfaceId"
    )
    local_gateway_id: Optional[str] = Field(default=None, alias="LocalGatewayId")
    vlan: Optional[int] = Field(default=None, alias="Vlan")
    local_address: Optional[str] = Field(default=None, alias="LocalAddress")
    peer_address: Optional[str] = Field(default=None, alias="PeerAddress")
    local_bgp_asn: Optional[int] = Field(default=None, alias="LocalBgpAsn")
    peer_bgp_asn: Optional[int] = Field(default=None, alias="PeerBgpAsn")
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class ManagedPrefixListModel(BaseModel):
    prefix_list_id: Optional[str] = Field(default=None, alias="PrefixListId")
    address_family: Optional[str] = Field(default=None, alias="AddressFamily")
    state: Optional[
        Literal[
            "create-complete",
            "create-failed",
            "create-in-progress",
            "delete-complete",
            "delete-failed",
            "delete-in-progress",
            "modify-complete",
            "modify-failed",
            "modify-in-progress",
            "restore-complete",
            "restore-failed",
            "restore-in-progress",
        ]
    ] = Field(default=None, alias="State")
    state_message: Optional[str] = Field(default=None, alias="StateMessage")
    prefix_list_arn: Optional[str] = Field(default=None, alias="PrefixListArn")
    prefix_list_name: Optional[str] = Field(default=None, alias="PrefixListName")
    max_entries: Optional[int] = Field(default=None, alias="MaxEntries")
    version: Optional[int] = Field(default=None, alias="Version")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")


class NetworkInsightsAccessScopeAnalysisModel(BaseModel):
    network_insights_access_scope_analysis_id: Optional[str] = Field(
        default=None, alias="NetworkInsightsAccessScopeAnalysisId"
    )
    network_insights_access_scope_analysis_arn: Optional[str] = Field(
        default=None, alias="NetworkInsightsAccessScopeAnalysisArn"
    )
    network_insights_access_scope_id: Optional[str] = Field(
        default=None, alias="NetworkInsightsAccessScopeId"
    )
    status: Optional[Literal["failed", "running", "succeeded"]] = Field(
        default=None, alias="Status"
    )
    status_message: Optional[str] = Field(default=None, alias="StatusMessage")
    warning_message: Optional[str] = Field(default=None, alias="WarningMessage")
    start_date: Optional[datetime] = Field(default=None, alias="StartDate")
    end_date: Optional[datetime] = Field(default=None, alias="EndDate")
    findings_found: Optional[Literal["false", "true", "unknown"]] = Field(
        default=None, alias="FindingsFound"
    )
    analyzed_eni_count: Optional[int] = Field(default=None, alias="AnalyzedEniCount")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class NetworkInsightsAccessScopeModel(BaseModel):
    network_insights_access_scope_id: Optional[str] = Field(
        default=None, alias="NetworkInsightsAccessScopeId"
    )
    network_insights_access_scope_arn: Optional[str] = Field(
        default=None, alias="NetworkInsightsAccessScopeArn"
    )
    created_date: Optional[datetime] = Field(default=None, alias="CreatedDate")
    updated_date: Optional[datetime] = Field(default=None, alias="UpdatedDate")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class NetworkInsightsPathModel(BaseModel):
    network_insights_path_id: Optional[str] = Field(
        default=None, alias="NetworkInsightsPathId"
    )
    network_insights_path_arn: Optional[str] = Field(
        default=None, alias="NetworkInsightsPathArn"
    )
    created_date: Optional[datetime] = Field(default=None, alias="CreatedDate")
    source: Optional[str] = Field(default=None, alias="Source")
    destination: Optional[str] = Field(default=None, alias="Destination")
    source_arn: Optional[str] = Field(default=None, alias="SourceArn")
    destination_arn: Optional[str] = Field(default=None, alias="DestinationArn")
    source_ip: Optional[str] = Field(default=None, alias="SourceIp")
    destination_ip: Optional[str] = Field(default=None, alias="DestinationIp")
    protocol: Optional[Literal["tcp", "udp"]] = Field(default=None, alias="Protocol")
    destination_port: Optional[int] = Field(default=None, alias="DestinationPort")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class PlacementGroupModel(BaseModel):
    group_name: Optional[str] = Field(default=None, alias="GroupName")
    state: Optional[Literal["available", "deleted", "deleting", "pending"]] = Field(
        default=None, alias="State"
    )
    strategy: Optional[Literal["cluster", "partition", "spread"]] = Field(
        default=None, alias="Strategy"
    )
    partition_count: Optional[int] = Field(default=None, alias="PartitionCount")
    group_id: Optional[str] = Field(default=None, alias="GroupId")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    group_arn: Optional[str] = Field(default=None, alias="GroupArn")
    spread_level: Optional[Literal["host", "rack"]] = Field(
        default=None, alias="SpreadLevel"
    )


class ReplaceRootVolumeTaskModel(BaseModel):
    replace_root_volume_task_id: Optional[str] = Field(
        default=None, alias="ReplaceRootVolumeTaskId"
    )
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    task_state: Optional[
        Literal[
            "failed",
            "failed-detached",
            "failing",
            "in-progress",
            "pending",
            "succeeded",
        ]
    ] = Field(default=None, alias="TaskState")
    start_time: Optional[str] = Field(default=None, alias="StartTime")
    complete_time: Optional[str] = Field(default=None, alias="CompleteTime")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    image_id: Optional[str] = Field(default=None, alias="ImageId")
    snapshot_id: Optional[str] = Field(default=None, alias="SnapshotId")
    delete_replaced_root_volume: Optional[bool] = Field(
        default=None, alias="DeleteReplacedRootVolume"
    )


class SnapshotInfoModel(BaseModel):
    description: Optional[str] = Field(default=None, alias="Description")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    encrypted: Optional[bool] = Field(default=None, alias="Encrypted")
    volume_id: Optional[str] = Field(default=None, alias="VolumeId")
    state: Optional[
        Literal["completed", "error", "pending", "recoverable", "recovering"]
    ] = Field(default=None, alias="State")
    volume_size: Optional[int] = Field(default=None, alias="VolumeSize")
    start_time: Optional[datetime] = Field(default=None, alias="StartTime")
    progress: Optional[str] = Field(default=None, alias="Progress")
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    snapshot_id: Optional[str] = Field(default=None, alias="SnapshotId")
    outpost_arn: Optional[str] = Field(default=None, alias="OutpostArn")


class SnapshotResponseMetadataModel(BaseModel):
    data_encryption_key_id: str = Field(alias="DataEncryptionKeyId")
    description: str = Field(alias="Description")
    encrypted: bool = Field(alias="Encrypted")
    kms_key_id: str = Field(alias="KmsKeyId")
    owner_id: str = Field(alias="OwnerId")
    progress: str = Field(alias="Progress")
    snapshot_id: str = Field(alias="SnapshotId")
    start_time: datetime = Field(alias="StartTime")
    state: Literal[
        "completed", "error", "pending", "recoverable", "recovering"
    ] = Field(alias="State")
    state_message: str = Field(alias="StateMessage")
    volume_id: str = Field(alias="VolumeId")
    volume_size: int = Field(alias="VolumeSize")
    owner_alias: str = Field(alias="OwnerAlias")
    outpost_arn: str = Field(alias="OutpostArn")
    tags: List[TagModel] = Field(alias="Tags")
    storage_tier: Literal["archive", "standard"] = Field(alias="StorageTier")
    restore_expiry_time: datetime = Field(alias="RestoreExpiryTime")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class SnapshotTierStatusModel(BaseModel):
    snapshot_id: Optional[str] = Field(default=None, alias="SnapshotId")
    volume_id: Optional[str] = Field(default=None, alias="VolumeId")
    status: Optional[
        Literal["completed", "error", "pending", "recoverable", "recovering"]
    ] = Field(default=None, alias="Status")
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    storage_tier: Optional[Literal["archive", "standard"]] = Field(
        default=None, alias="StorageTier"
    )
    last_tiering_start_time: Optional[datetime] = Field(
        default=None, alias="LastTieringStartTime"
    )
    last_tiering_progress: Optional[int] = Field(
        default=None, alias="LastTieringProgress"
    )
    last_tiering_operation_status: Optional[
        Literal[
            "archival-completed",
            "archival-failed",
            "archival-in-progress",
            "permanent-restore-completed",
            "permanent-restore-failed",
            "permanent-restore-in-progress",
            "temporary-restore-completed",
            "temporary-restore-failed",
            "temporary-restore-in-progress",
        ]
    ] = Field(default=None, alias="LastTieringOperationStatus")
    last_tiering_operation_status_detail: Optional[str] = Field(
        default=None, alias="LastTieringOperationStatusDetail"
    )
    archival_complete_time: Optional[datetime] = Field(
        default=None, alias="ArchivalCompleteTime"
    )
    restore_expiry_time: Optional[datetime] = Field(
        default=None, alias="RestoreExpiryTime"
    )


class SnapshotModel(BaseModel):
    data_encryption_key_id: Optional[str] = Field(
        default=None, alias="DataEncryptionKeyId"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    encrypted: Optional[bool] = Field(default=None, alias="Encrypted")
    kms_key_id: Optional[str] = Field(default=None, alias="KmsKeyId")
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    progress: Optional[str] = Field(default=None, alias="Progress")
    snapshot_id: Optional[str] = Field(default=None, alias="SnapshotId")
    start_time: Optional[datetime] = Field(default=None, alias="StartTime")
    state: Optional[
        Literal["completed", "error", "pending", "recoverable", "recovering"]
    ] = Field(default=None, alias="State")
    state_message: Optional[str] = Field(default=None, alias="StateMessage")
    volume_id: Optional[str] = Field(default=None, alias="VolumeId")
    volume_size: Optional[int] = Field(default=None, alias="VolumeSize")
    owner_alias: Optional[str] = Field(default=None, alias="OwnerAlias")
    outpost_arn: Optional[str] = Field(default=None, alias="OutpostArn")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    storage_tier: Optional[Literal["archive", "standard"]] = Field(
        default=None, alias="StorageTier"
    )
    restore_expiry_time: Optional[datetime] = Field(
        default=None, alias="RestoreExpiryTime"
    )


class SpotFleetTagSpecificationModel(BaseModel):
    resource_type: Optional[
        Literal[
            "capacity-reservation",
            "capacity-reservation-fleet",
            "carrier-gateway",
            "client-vpn-endpoint",
            "coip-pool",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "egress-only-internet-gateway",
            "elastic-gpu",
            "elastic-ip",
            "export-image-task",
            "export-instance-task",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "import-image-task",
            "import-snapshot-task",
            "instance",
            "instance-event-window",
            "internet-gateway",
            "ipam",
            "ipam-pool",
            "ipam-resource-discovery",
            "ipam-resource-discovery-association",
            "ipam-scope",
            "ipv4pool-ec2",
            "ipv6pool-ec2",
            "key-pair",
            "launch-template",
            "local-gateway",
            "local-gateway-route-table",
            "local-gateway-route-table-virtual-interface-group-association",
            "local-gateway-route-table-vpc-association",
            "local-gateway-virtual-interface",
            "local-gateway-virtual-interface-group",
            "natgateway",
            "network-acl",
            "network-insights-access-scope",
            "network-insights-access-scope-analysis",
            "network-insights-analysis",
            "network-insights-path",
            "network-interface",
            "placement-group",
            "prefix-list",
            "replace-root-volume-task",
            "reserved-instances",
            "route-table",
            "security-group",
            "security-group-rule",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "subnet-cidr-reservation",
            "traffic-mirror-filter",
            "traffic-mirror-filter-rule",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-connect-peer",
            "transit-gateway-multicast-domain",
            "transit-gateway-policy-table",
            "transit-gateway-route-table",
            "transit-gateway-route-table-announcement",
            "verified-access-endpoint",
            "verified-access-group",
            "verified-access-instance",
            "verified-access-policy",
            "verified-access-trust-provider",
            "volume",
            "vpc",
            "vpc-block-public-access-exclusion",
            "vpc-endpoint",
            "vpc-endpoint-connection",
            "vpc-endpoint-connection-device-type",
            "vpc-endpoint-service",
            "vpc-endpoint-service-permission",
            "vpc-flow-log",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-connection-device-type",
            "vpn-gateway",
        ]
    ] = Field(default=None, alias="ResourceType")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class SubnetCidrReservationModel(BaseModel):
    subnet_cidr_reservation_id: Optional[str] = Field(
        default=None, alias="SubnetCidrReservationId"
    )
    subnet_id: Optional[str] = Field(default=None, alias="SubnetId")
    cidr: Optional[str] = Field(default=None, alias="Cidr")
    reservation_type: Optional[Literal["explicit", "prefix"]] = Field(
        default=None, alias="ReservationType"
    )
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    description: Optional[str] = Field(default=None, alias="Description")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class TagSpecificationModel(BaseModel):
    resource_type: Optional[
        Literal[
            "capacity-reservation",
            "capacity-reservation-fleet",
            "carrier-gateway",
            "client-vpn-endpoint",
            "coip-pool",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "egress-only-internet-gateway",
            "elastic-gpu",
            "elastic-ip",
            "export-image-task",
            "export-instance-task",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "import-image-task",
            "import-snapshot-task",
            "instance",
            "instance-event-window",
            "internet-gateway",
            "ipam",
            "ipam-pool",
            "ipam-resource-discovery",
            "ipam-resource-discovery-association",
            "ipam-scope",
            "ipv4pool-ec2",
            "ipv6pool-ec2",
            "key-pair",
            "launch-template",
            "local-gateway",
            "local-gateway-route-table",
            "local-gateway-route-table-virtual-interface-group-association",
            "local-gateway-route-table-vpc-association",
            "local-gateway-virtual-interface",
            "local-gateway-virtual-interface-group",
            "natgateway",
            "network-acl",
            "network-insights-access-scope",
            "network-insights-access-scope-analysis",
            "network-insights-analysis",
            "network-insights-path",
            "network-interface",
            "placement-group",
            "prefix-list",
            "replace-root-volume-task",
            "reserved-instances",
            "route-table",
            "security-group",
            "security-group-rule",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "subnet-cidr-reservation",
            "traffic-mirror-filter",
            "traffic-mirror-filter-rule",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-connect-peer",
            "transit-gateway-multicast-domain",
            "transit-gateway-policy-table",
            "transit-gateway-route-table",
            "transit-gateway-route-table-announcement",
            "verified-access-endpoint",
            "verified-access-group",
            "verified-access-instance",
            "verified-access-policy",
            "verified-access-trust-provider",
            "volume",
            "vpc",
            "vpc-block-public-access-exclusion",
            "vpc-endpoint",
            "vpc-endpoint-connection",
            "vpc-endpoint-connection-device-type",
            "vpc-endpoint-service",
            "vpc-endpoint-service-permission",
            "vpc-flow-log",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-connection-device-type",
            "vpn-gateway",
        ]
    ] = Field(default=None, alias="ResourceType")
    tags: Optional[Sequence[TagModel]] = Field(default=None, alias="Tags")


class TrafficMirrorSessionModel(BaseModel):
    traffic_mirror_session_id: Optional[str] = Field(
        default=None, alias="TrafficMirrorSessionId"
    )
    traffic_mirror_target_id: Optional[str] = Field(
        default=None, alias="TrafficMirrorTargetId"
    )
    traffic_mirror_filter_id: Optional[str] = Field(
        default=None, alias="TrafficMirrorFilterId"
    )
    network_interface_id: Optional[str] = Field(
        default=None, alias="NetworkInterfaceId"
    )
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    packet_length: Optional[int] = Field(default=None, alias="PacketLength")
    session_number: Optional[int] = Field(default=None, alias="SessionNumber")
    virtual_network_id: Optional[int] = Field(default=None, alias="VirtualNetworkId")
    description: Optional[str] = Field(default=None, alias="Description")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class TrafficMirrorTargetModel(BaseModel):
    traffic_mirror_target_id: Optional[str] = Field(
        default=None, alias="TrafficMirrorTargetId"
    )
    network_interface_id: Optional[str] = Field(
        default=None, alias="NetworkInterfaceId"
    )
    network_load_balancer_arn: Optional[str] = Field(
        default=None, alias="NetworkLoadBalancerArn"
    )
    type: Optional[
        Literal[
            "gateway-load-balancer-endpoint",
            "network-interface",
            "network-load-balancer",
        ]
    ] = Field(default=None, alias="Type")
    description: Optional[str] = Field(default=None, alias="Description")
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    gateway_load_balancer_endpoint_id: Optional[str] = Field(
        default=None, alias="GatewayLoadBalancerEndpointId"
    )


class TransitGatewayPolicyTableModel(BaseModel):
    transit_gateway_policy_table_id: Optional[str] = Field(
        default=None, alias="TransitGatewayPolicyTableId"
    )
    transit_gateway_id: Optional[str] = Field(default=None, alias="TransitGatewayId")
    state: Optional[Literal["available", "deleted", "deleting", "pending"]] = Field(
        default=None, alias="State"
    )
    creation_time: Optional[datetime] = Field(default=None, alias="CreationTime")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class TransitGatewayRouteTableAnnouncementModel(BaseModel):
    transit_gateway_route_table_announcement_id: Optional[str] = Field(
        default=None, alias="TransitGatewayRouteTableAnnouncementId"
    )
    transit_gateway_id: Optional[str] = Field(default=None, alias="TransitGatewayId")
    core_network_id: Optional[str] = Field(default=None, alias="CoreNetworkId")
    peer_transit_gateway_id: Optional[str] = Field(
        default=None, alias="PeerTransitGatewayId"
    )
    peer_core_network_id: Optional[str] = Field(default=None, alias="PeerCoreNetworkId")
    peering_attachment_id: Optional[str] = Field(
        default=None, alias="PeeringAttachmentId"
    )
    announcement_direction: Optional[Literal["incoming", "outgoing"]] = Field(
        default=None, alias="AnnouncementDirection"
    )
    transit_gateway_route_table_id: Optional[str] = Field(
        default=None, alias="TransitGatewayRouteTableId"
    )
    state: Optional[
        Literal["available", "deleted", "deleting", "failed", "failing", "pending"]
    ] = Field(default=None, alias="State")
    creation_time: Optional[datetime] = Field(default=None, alias="CreationTime")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class TransitGatewayRouteTableModel(BaseModel):
    transit_gateway_route_table_id: Optional[str] = Field(
        default=None, alias="TransitGatewayRouteTableId"
    )
    transit_gateway_id: Optional[str] = Field(default=None, alias="TransitGatewayId")
    state: Optional[Literal["available", "deleted", "deleting", "pending"]] = Field(
        default=None, alias="State"
    )
    default_association_route_table: Optional[bool] = Field(
        default=None, alias="DefaultAssociationRouteTable"
    )
    default_propagation_route_table: Optional[bool] = Field(
        default=None, alias="DefaultPropagationRouteTable"
    )
    creation_time: Optional[datetime] = Field(default=None, alias="CreationTime")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class TrunkInterfaceAssociationModel(BaseModel):
    association_id: Optional[str] = Field(default=None, alias="AssociationId")
    branch_interface_id: Optional[str] = Field(default=None, alias="BranchInterfaceId")
    trunk_interface_id: Optional[str] = Field(default=None, alias="TrunkInterfaceId")
    interface_protocol: Optional[Literal["GRE", "VLAN"]] = Field(
        default=None, alias="InterfaceProtocol"
    )
    vlan_id: Optional[int] = Field(default=None, alias="VlanId")
    gre_key: Optional[int] = Field(default=None, alias="GreKey")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class VerifiedAccessGroupModel(BaseModel):
    verified_access_group_id: Optional[str] = Field(
        default=None, alias="VerifiedAccessGroupId"
    )
    verified_access_instance_id: Optional[str] = Field(
        default=None, alias="VerifiedAccessInstanceId"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    owner: Optional[str] = Field(default=None, alias="Owner")
    verified_access_group_arn: Optional[str] = Field(
        default=None, alias="VerifiedAccessGroupArn"
    )
    creation_time: Optional[str] = Field(default=None, alias="CreationTime")
    last_updated_time: Optional[str] = Field(default=None, alias="LastUpdatedTime")
    deletion_time: Optional[str] = Field(default=None, alias="DeletionTime")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class VpcClassicLinkModel(BaseModel):
    classic_link_enabled: Optional[bool] = Field(
        default=None, alias="ClassicLinkEnabled"
    )
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")


class AdvertiseByoipCidrResultModel(BaseModel):
    byoip_cidr: ByoipCidrModel = Field(alias="ByoipCidr")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeprovisionByoipCidrResultModel(BaseModel):
    byoip_cidr: ByoipCidrModel = Field(alias="ByoipCidr")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeByoipCidrsResultModel(BaseModel):
    byoip_cidrs: List[ByoipCidrModel] = Field(alias="ByoipCidrs")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class MoveByoipCidrToIpamResultModel(BaseModel):
    byoip_cidr: ByoipCidrModel = Field(alias="ByoipCidr")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ProvisionByoipCidrResultModel(BaseModel):
    byoip_cidr: ByoipCidrModel = Field(alias="ByoipCidr")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class WithdrawByoipCidrResultModel(BaseModel):
    byoip_cidr: ByoipCidrModel = Field(alias="ByoipCidr")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AllocateIpamPoolCidrResultModel(BaseModel):
    ipam_pool_allocation: IpamPoolAllocationModel = Field(alias="IpamPoolAllocation")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetIpamPoolAllocationsResultModel(BaseModel):
    ipam_pool_allocations: List[IpamPoolAllocationModel] = Field(
        alias="IpamPoolAllocations"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AnalysisAclRuleModel(BaseModel):
    cidr: Optional[str] = Field(default=None, alias="Cidr")
    egress: Optional[bool] = Field(default=None, alias="Egress")
    port_range: Optional[PortRangeModel] = Field(default=None, alias="PortRange")
    protocol: Optional[str] = Field(default=None, alias="Protocol")
    rule_action: Optional[str] = Field(default=None, alias="RuleAction")
    rule_number: Optional[int] = Field(default=None, alias="RuleNumber")


class AnalysisPacketHeaderModel(BaseModel):
    destination_addresses: Optional[List[str]] = Field(
        default=None, alias="DestinationAddresses"
    )
    destination_port_ranges: Optional[List[PortRangeModel]] = Field(
        default=None, alias="DestinationPortRanges"
    )
    protocol: Optional[str] = Field(default=None, alias="Protocol")
    source_addresses: Optional[List[str]] = Field(default=None, alias="SourceAddresses")
    source_port_ranges: Optional[List[PortRangeModel]] = Field(
        default=None, alias="SourcePortRanges"
    )


class AnalysisSecurityGroupRuleModel(BaseModel):
    cidr: Optional[str] = Field(default=None, alias="Cidr")
    direction: Optional[str] = Field(default=None, alias="Direction")
    security_group_id: Optional[str] = Field(default=None, alias="SecurityGroupId")
    port_range: Optional[PortRangeModel] = Field(default=None, alias="PortRange")
    prefix_list_id: Optional[str] = Field(default=None, alias="PrefixListId")
    protocol: Optional[str] = Field(default=None, alias="Protocol")


class AssignPrivateIpAddressesResultModel(BaseModel):
    network_interface_id: str = Field(alias="NetworkInterfaceId")
    assigned_private_ip_addresses: List[AssignedPrivateIpAddressModel] = Field(
        alias="AssignedPrivateIpAddresses"
    )
    assigned_ipv4_prefixes: List[Ipv4PrefixSpecificationModel] = Field(
        alias="AssignedIpv4Prefixes"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AssignPrivateNatGatewayAddressResultModel(BaseModel):
    nat_gateway_id: str = Field(alias="NatGatewayId")
    nat_gateway_addresses: List[NatGatewayAddressModel] = Field(
        alias="NatGatewayAddresses"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AssociateNatGatewayAddressResultModel(BaseModel):
    nat_gateway_id: str = Field(alias="NatGatewayId")
    nat_gateway_addresses: List[NatGatewayAddressModel] = Field(
        alias="NatGatewayAddresses"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DisassociateNatGatewayAddressResultModel(BaseModel):
    nat_gateway_id: str = Field(alias="NatGatewayId")
    nat_gateway_addresses: List[NatGatewayAddressModel] = Field(
        alias="NatGatewayAddresses"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class UnassignPrivateNatGatewayAddressResultModel(BaseModel):
    nat_gateway_id: str = Field(alias="NatGatewayId")
    nat_gateway_addresses: List[NatGatewayAddressModel] = Field(
        alias="NatGatewayAddresses"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AssociateClientVpnTargetNetworkResultModel(BaseModel):
    association_id: str = Field(alias="AssociationId")
    status: AssociationStatusModel = Field(alias="Status")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DisassociateClientVpnTargetNetworkResultModel(BaseModel):
    association_id: str = Field(alias="AssociationId")
    status: AssociationStatusModel = Field(alias="Status")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class TargetNetworkModel(BaseModel):
    association_id: Optional[str] = Field(default=None, alias="AssociationId")
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")
    target_network_id: Optional[str] = Field(default=None, alias="TargetNetworkId")
    client_vpn_endpoint_id: Optional[str] = Field(
        default=None, alias="ClientVpnEndpointId"
    )
    status: Optional[AssociationStatusModel] = Field(default=None, alias="Status")
    security_groups: Optional[List[str]] = Field(default=None, alias="SecurityGroups")


class AssociateIamInstanceProfileRequestModel(BaseModel):
    iam_instance_profile: IamInstanceProfileSpecificationModel = Field(
        alias="IamInstanceProfile"
    )
    instance_id: str = Field(alias="InstanceId")


class ReplaceIamInstanceProfileAssociationRequestModel(BaseModel):
    iam_instance_profile: IamInstanceProfileSpecificationModel = Field(
        alias="IamInstanceProfile"
    )
    association_id: str = Field(alias="AssociationId")


class AssociateRouteTableResultModel(BaseModel):
    association_id: str = Field(alias="AssociationId")
    association_state: RouteTableAssociationStateModel = Field(alias="AssociationState")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ReplaceRouteTableAssociationResultModel(BaseModel):
    new_association_id: str = Field(alias="NewAssociationId")
    association_state: RouteTableAssociationStateModel = Field(alias="AssociationState")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class RouteTableAssociationModel(BaseModel):
    main: Optional[bool] = Field(default=None, alias="Main")
    route_table_association_id: Optional[str] = Field(
        default=None, alias="RouteTableAssociationId"
    )
    route_table_id: Optional[str] = Field(default=None, alias="RouteTableId")
    subnet_id: Optional[str] = Field(default=None, alias="SubnetId")
    gateway_id: Optional[str] = Field(default=None, alias="GatewayId")
    association_state: Optional[RouteTableAssociationStateModel] = Field(
        default=None, alias="AssociationState"
    )


class AssociateTransitGatewayPolicyTableResultModel(BaseModel):
    association: TransitGatewayPolicyTableAssociationModel = Field(alias="Association")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DisassociateTransitGatewayPolicyTableResultModel(BaseModel):
    association: TransitGatewayPolicyTableAssociationModel = Field(alias="Association")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetTransitGatewayPolicyTableAssociationsResultModel(BaseModel):
    associations: List[TransitGatewayPolicyTableAssociationModel] = Field(
        alias="Associations"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AssociateTransitGatewayRouteTableResultModel(BaseModel):
    association: TransitGatewayAssociationModel = Field(alias="Association")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DisassociateTransitGatewayRouteTableResultModel(BaseModel):
    association: TransitGatewayAssociationModel = Field(alias="Association")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetAssociatedEnclaveCertificateIamRolesResultModel(BaseModel):
    associated_roles: List[AssociatedRoleModel] = Field(alias="AssociatedRoles")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class IntegrateServicesModel(BaseModel):
    athena_integrations: Optional[Sequence[AthenaIntegrationModel]] = Field(
        default=None, alias="AthenaIntegrations"
    )


class AttachVpnGatewayResultModel(BaseModel):
    vpc_attachment: VpcAttachmentModel = Field(alias="VpcAttachment")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class VpnGatewayModel(BaseModel):
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    state: Optional[Literal["available", "deleted", "deleting", "pending"]] = Field(
        default=None, alias="State"
    )
    type: Optional[Literal["ipsec.1"]] = Field(default=None, alias="Type")
    vpc_attachments: Optional[List[VpcAttachmentModel]] = Field(
        default=None, alias="VpcAttachments"
    )
    vpn_gateway_id: Optional[str] = Field(default=None, alias="VpnGatewayId")
    amazon_side_asn: Optional[int] = Field(default=None, alias="AmazonSideAsn")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class AttachmentEnaSrdSpecificationModel(BaseModel):
    ena_srd_enabled: Optional[bool] = Field(default=None, alias="EnaSrdEnabled")
    ena_srd_udp_specification: Optional[AttachmentEnaSrdUdpSpecificationModel] = Field(
        default=None, alias="EnaSrdUdpSpecification"
    )


class DescribeVpcAttributeResultModel(BaseModel):
    vpc_id: str = Field(alias="VpcId")
    enable_dns_hostnames: AttributeBooleanValueModel = Field(alias="EnableDnsHostnames")
    enable_dns_support: AttributeBooleanValueModel = Field(alias="EnableDnsSupport")
    enable_network_address_usage_metrics: AttributeBooleanValueModel = Field(
        alias="EnableNetworkAddressUsageMetrics"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifySubnetAttributeRequestModel(BaseModel):
    subnet_id: str = Field(alias="SubnetId")
    assign_ipv6_address_on_creation: Optional[AttributeBooleanValueModel] = Field(
        default=None, alias="AssignIpv6AddressOnCreation"
    )
    map_public_ip_on_launch: Optional[AttributeBooleanValueModel] = Field(
        default=None, alias="MapPublicIpOnLaunch"
    )
    map_customer_owned_ip_on_launch: Optional[AttributeBooleanValueModel] = Field(
        default=None, alias="MapCustomerOwnedIpOnLaunch"
    )
    customer_owned_ipv4_pool: Optional[str] = Field(
        default=None, alias="CustomerOwnedIpv4Pool"
    )
    enable_dns64: Optional[AttributeBooleanValueModel] = Field(
        default=None, alias="EnableDns64"
    )
    private_dns_hostname_type_on_launch: Optional[
        Literal["ip-name", "resource-name"]
    ] = Field(default=None, alias="PrivateDnsHostnameTypeOnLaunch")
    enable_resource_name_dns_arecord_on_launch: Optional[
        AttributeBooleanValueModel
    ] = Field(default=None, alias="EnableResourceNameDnsARecordOnLaunch")
    enable_resource_name_dns_aaaarecord_on_launch: Optional[
        AttributeBooleanValueModel
    ] = Field(default=None, alias="EnableResourceNameDnsAAAARecordOnLaunch")
    enable_lni_at_device_index: Optional[int] = Field(
        default=None, alias="EnableLniAtDeviceIndex"
    )
    disable_lni_at_device_index: Optional[AttributeBooleanValueModel] = Field(
        default=None, alias="DisableLniAtDeviceIndex"
    )


class ModifyVolumeAttributeRequestModel(BaseModel):
    volume_id: str = Field(alias="VolumeId")
    auto_enable_io: Optional[AttributeBooleanValueModel] = Field(
        default=None, alias="AutoEnableIO"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ModifyVolumeAttributeRequestVolumeModifyAttributeModel(BaseModel):
    auto_enable_io: Optional[AttributeBooleanValueModel] = Field(
        default=None, alias="AutoEnableIO"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ModifyVpcAttributeRequestModel(BaseModel):
    vpc_id: str = Field(alias="VpcId")
    enable_dns_hostnames: Optional[AttributeBooleanValueModel] = Field(
        default=None, alias="EnableDnsHostnames"
    )
    enable_dns_support: Optional[AttributeBooleanValueModel] = Field(
        default=None, alias="EnableDnsSupport"
    )
    enable_network_address_usage_metrics: Optional[AttributeBooleanValueModel] = Field(
        default=None, alias="EnableNetworkAddressUsageMetrics"
    )


class ModifyVpcAttributeRequestVpcModifyAttributeModel(BaseModel):
    enable_dns_hostnames: Optional[AttributeBooleanValueModel] = Field(
        default=None, alias="EnableDnsHostnames"
    )
    enable_dns_support: Optional[AttributeBooleanValueModel] = Field(
        default=None, alias="EnableDnsSupport"
    )
    enable_network_address_usage_metrics: Optional[AttributeBooleanValueModel] = Field(
        default=None, alias="EnableNetworkAddressUsageMetrics"
    )


class DhcpConfigurationModel(BaseModel):
    key: Optional[str] = Field(default=None, alias="Key")
    values: Optional[List[AttributeValueModel]] = Field(default=None, alias="Values")


class AuthorizationRuleModel(BaseModel):
    client_vpn_endpoint_id: Optional[str] = Field(
        default=None, alias="ClientVpnEndpointId"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    group_id: Optional[str] = Field(default=None, alias="GroupId")
    access_all: Optional[bool] = Field(default=None, alias="AccessAll")
    destination_cidr: Optional[str] = Field(default=None, alias="DestinationCidr")
    status: Optional[ClientVpnAuthorizationRuleStatusModel] = Field(
        default=None, alias="Status"
    )


class AuthorizeClientVpnIngressResultModel(BaseModel):
    status: ClientVpnAuthorizationRuleStatusModel = Field(alias="Status")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class RevokeClientVpnIngressResultModel(BaseModel):
    status: ClientVpnAuthorizationRuleStatusModel = Field(alias="Status")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AvailabilityZoneModel(BaseModel):
    state: Optional[
        Literal["available", "impaired", "information", "unavailable"]
    ] = Field(default=None, alias="State")
    opt_in_status: Optional[
        Literal["not-opted-in", "opt-in-not-required", "opted-in"]
    ] = Field(default=None, alias="OptInStatus")
    messages: Optional[List[AvailabilityZoneMessageModel]] = Field(
        default=None, alias="Messages"
    )
    region_name: Optional[str] = Field(default=None, alias="RegionName")
    zone_name: Optional[str] = Field(default=None, alias="ZoneName")
    zone_id: Optional[str] = Field(default=None, alias="ZoneId")
    group_name: Optional[str] = Field(default=None, alias="GroupName")
    network_border_group: Optional[str] = Field(
        default=None, alias="NetworkBorderGroup"
    )
    zone_type: Optional[str] = Field(default=None, alias="ZoneType")
    parent_zone_name: Optional[str] = Field(default=None, alias="ParentZoneName")
    parent_zone_id: Optional[str] = Field(default=None, alias="ParentZoneId")


class AvailableCapacityModel(BaseModel):
    available_instance_capacity: Optional[List[InstanceCapacityModel]] = Field(
        default=None, alias="AvailableInstanceCapacity"
    )
    available_vcpus: Optional[int] = Field(default=None, alias="AvailableVCpus")


class BlockDeviceMappingModel(BaseModel):
    device_name: Optional[str] = Field(default=None, alias="DeviceName")
    virtual_name: Optional[str] = Field(default=None, alias="VirtualName")
    ebs: Optional[EbsBlockDeviceModel] = Field(default=None, alias="Ebs")
    no_device: Optional[str] = Field(default=None, alias="NoDevice")


class FailedCapacityReservationFleetCancellationResultModel(BaseModel):
    capacity_reservation_fleet_id: Optional[str] = Field(
        default=None, alias="CapacityReservationFleetId"
    )
    cancel_capacity_reservation_fleet_error: Optional[
        CancelCapacityReservationFleetErrorModel
    ] = Field(default=None, alias="CancelCapacityReservationFleetError")


class CancelSpotFleetRequestsErrorItemModel(BaseModel):
    error: Optional[CancelSpotFleetRequestsErrorModel] = Field(
        default=None, alias="Error"
    )
    spot_fleet_request_id: Optional[str] = Field(
        default=None, alias="SpotFleetRequestId"
    )


class CancelSpotInstanceRequestsResultModel(BaseModel):
    cancelled_spot_instance_requests: List[CancelledSpotInstanceRequestModel] = Field(
        alias="CancelledSpotInstanceRequests"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CapacityReservationModel(BaseModel):
    capacity_reservation_id: Optional[str] = Field(
        default=None, alias="CapacityReservationId"
    )
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    capacity_reservation_arn: Optional[str] = Field(
        default=None, alias="CapacityReservationArn"
    )
    availability_zone_id: Optional[str] = Field(
        default=None, alias="AvailabilityZoneId"
    )
    instance_type: Optional[str] = Field(default=None, alias="InstanceType")
    instance_platform: Optional[
        Literal[
            "Linux with SQL Server Enterprise",
            "Linux with SQL Server Standard",
            "Linux with SQL Server Web",
            "Linux/UNIX",
            "RHEL with HA",
            "RHEL with HA and SQL Server Enterprise",
            "RHEL with HA and SQL Server Standard",
            "RHEL with SQL Server Enterprise",
            "RHEL with SQL Server Standard",
            "RHEL with SQL Server Web",
            "Red Hat Enterprise Linux",
            "SUSE Linux",
            "Windows",
            "Windows with SQL Server",
            "Windows with SQL Server Enterprise",
            "Windows with SQL Server Standard",
            "Windows with SQL Server Web",
        ]
    ] = Field(default=None, alias="InstancePlatform")
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    tenancy: Optional[Literal["dedicated", "default"]] = Field(
        default=None, alias="Tenancy"
    )
    total_instance_count: Optional[int] = Field(
        default=None, alias="TotalInstanceCount"
    )
    available_instance_count: Optional[int] = Field(
        default=None, alias="AvailableInstanceCount"
    )
    ebs_optimized: Optional[bool] = Field(default=None, alias="EbsOptimized")
    ephemeral_storage: Optional[bool] = Field(default=None, alias="EphemeralStorage")
    state: Optional[
        Literal["active", "cancelled", "expired", "failed", "pending"]
    ] = Field(default=None, alias="State")
    start_date: Optional[datetime] = Field(default=None, alias="StartDate")
    end_date: Optional[datetime] = Field(default=None, alias="EndDate")
    end_date_type: Optional[Literal["limited", "unlimited"]] = Field(
        default=None, alias="EndDateType"
    )
    instance_match_criteria: Optional[Literal["open", "targeted"]] = Field(
        default=None, alias="InstanceMatchCriteria"
    )
    create_date: Optional[datetime] = Field(default=None, alias="CreateDate")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    outpost_arn: Optional[str] = Field(default=None, alias="OutpostArn")
    capacity_reservation_fleet_id: Optional[str] = Field(
        default=None, alias="CapacityReservationFleetId"
    )
    placement_group_arn: Optional[str] = Field(default=None, alias="PlacementGroupArn")
    capacity_allocations: Optional[List[CapacityAllocationModel]] = Field(
        default=None, alias="CapacityAllocations"
    )


class CapacityReservationFleetModel(BaseModel):
    capacity_reservation_fleet_id: Optional[str] = Field(
        default=None, alias="CapacityReservationFleetId"
    )
    capacity_reservation_fleet_arn: Optional[str] = Field(
        default=None, alias="CapacityReservationFleetArn"
    )
    state: Optional[
        Literal[
            "active",
            "cancelled",
            "cancelling",
            "expired",
            "expiring",
            "failed",
            "modifying",
            "partially_fulfilled",
            "submitted",
        ]
    ] = Field(default=None, alias="State")
    total_target_capacity: Optional[int] = Field(
        default=None, alias="TotalTargetCapacity"
    )
    total_fulfilled_capacity: Optional[float] = Field(
        default=None, alias="TotalFulfilledCapacity"
    )
    tenancy: Optional[Literal["default"]] = Field(default=None, alias="Tenancy")
    end_date: Optional[datetime] = Field(default=None, alias="EndDate")
    create_time: Optional[datetime] = Field(default=None, alias="CreateTime")
    instance_match_criteria: Optional[Literal["open"]] = Field(
        default=None, alias="InstanceMatchCriteria"
    )
    allocation_strategy: Optional[str] = Field(default=None, alias="AllocationStrategy")
    instance_type_specifications: Optional[List[FleetCapacityReservationModel]] = Field(
        default=None, alias="InstanceTypeSpecifications"
    )
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class CreateCapacityReservationFleetResultModel(BaseModel):
    capacity_reservation_fleet_id: str = Field(alias="CapacityReservationFleetId")
    state: Literal[
        "active",
        "cancelled",
        "cancelling",
        "expired",
        "expiring",
        "failed",
        "modifying",
        "partially_fulfilled",
        "submitted",
    ] = Field(alias="State")
    total_target_capacity: int = Field(alias="TotalTargetCapacity")
    total_fulfilled_capacity: float = Field(alias="TotalFulfilledCapacity")
    instance_match_criteria: Literal["open"] = Field(alias="InstanceMatchCriteria")
    allocation_strategy: str = Field(alias="AllocationStrategy")
    create_time: datetime = Field(alias="CreateTime")
    end_date: datetime = Field(alias="EndDate")
    tenancy: Literal["default"] = Field(alias="Tenancy")
    fleet_capacity_reservations: List[FleetCapacityReservationModel] = Field(
        alias="FleetCapacityReservations"
    )
    tags: List[TagModel] = Field(alias="Tags")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetGroupsForCapacityReservationResultModel(BaseModel):
    next_token: str = Field(alias="NextToken")
    capacity_reservation_groups: List[CapacityReservationGroupModel] = Field(
        alias="CapacityReservationGroups"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class OnDemandOptionsRequestModel(BaseModel):
    allocation_strategy: Optional[Literal["lowest-price", "prioritized"]] = Field(
        default=None, alias="AllocationStrategy"
    )
    capacity_reservation_options: Optional[
        CapacityReservationOptionsRequestModel
    ] = Field(default=None, alias="CapacityReservationOptions")
    single_instance_type: Optional[bool] = Field(
        default=None, alias="SingleInstanceType"
    )
    single_availability_zone: Optional[bool] = Field(
        default=None, alias="SingleAvailabilityZone"
    )
    min_target_capacity: Optional[int] = Field(default=None, alias="MinTargetCapacity")
    max_total_price: Optional[str] = Field(default=None, alias="MaxTotalPrice")


class OnDemandOptionsModel(BaseModel):
    allocation_strategy: Optional[Literal["lowest-price", "prioritized"]] = Field(
        default=None, alias="AllocationStrategy"
    )
    capacity_reservation_options: Optional[CapacityReservationOptionsModel] = Field(
        default=None, alias="CapacityReservationOptions"
    )
    single_instance_type: Optional[bool] = Field(
        default=None, alias="SingleInstanceType"
    )
    single_availability_zone: Optional[bool] = Field(
        default=None, alias="SingleAvailabilityZone"
    )
    min_target_capacity: Optional[int] = Field(default=None, alias="MinTargetCapacity")
    max_total_price: Optional[str] = Field(default=None, alias="MaxTotalPrice")


class CapacityReservationSpecificationResponseResponseMetadataModel(BaseModel):
    capacity_reservation_preference: Literal["none", "open"] = Field(
        alias="CapacityReservationPreference"
    )
    capacity_reservation_target: CapacityReservationTargetResponseModel = Field(
        alias="CapacityReservationTarget"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CapacityReservationSpecificationResponseModel(BaseModel):
    capacity_reservation_preference: Optional[Literal["none", "open"]] = Field(
        default=None, alias="CapacityReservationPreference"
    )
    capacity_reservation_target: Optional[
        CapacityReservationTargetResponseModel
    ] = Field(default=None, alias="CapacityReservationTarget")


class LaunchTemplateCapacityReservationSpecificationResponseModel(BaseModel):
    capacity_reservation_preference: Optional[Literal["none", "open"]] = Field(
        default=None, alias="CapacityReservationPreference"
    )
    capacity_reservation_target: Optional[
        CapacityReservationTargetResponseModel
    ] = Field(default=None, alias="CapacityReservationTarget")


class CapacityReservationSpecificationModel(BaseModel):
    capacity_reservation_preference: Optional[Literal["none", "open"]] = Field(
        default=None, alias="CapacityReservationPreference"
    )
    capacity_reservation_target: Optional[CapacityReservationTargetModel] = Field(
        default=None, alias="CapacityReservationTarget"
    )


class LaunchTemplateCapacityReservationSpecificationRequestModel(BaseModel):
    capacity_reservation_preference: Optional[Literal["none", "open"]] = Field(
        default=None, alias="CapacityReservationPreference"
    )
    capacity_reservation_target: Optional[CapacityReservationTargetModel] = Field(
        default=None, alias="CapacityReservationTarget"
    )


class DescribeVpcClassicLinkDnsSupportResultModel(BaseModel):
    next_token: str = Field(alias="NextToken")
    vpcs: List[ClassicLinkDnsSupportModel] = Field(alias="Vpcs")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ClassicLinkInstanceModel(BaseModel):
    groups: Optional[List[GroupIdentifierModel]] = Field(default=None, alias="Groups")
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")


class ClassicLoadBalancersConfigModel(BaseModel):
    classic_load_balancers: Optional[List[ClassicLoadBalancerModel]] = Field(
        default=None, alias="ClassicLoadBalancers"
    )


class ExportClientVpnClientCertificateRevocationListResultModel(BaseModel):
    certificate_revocation_list: str = Field(alias="CertificateRevocationList")
    status: ClientCertificateRevocationListStatusModel = Field(alias="Status")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ClientConnectResponseOptionsModel(BaseModel):
    enabled: Optional[bool] = Field(default=None, alias="Enabled")
    lambda_function_arn: Optional[str] = Field(default=None, alias="LambdaFunctionArn")
    status: Optional[ClientVpnEndpointAttributeStatusModel] = Field(
        default=None, alias="Status"
    )


class ClientVpnAuthenticationRequestModel(BaseModel):
    type: Optional[
        Literal[
            "certificate-authentication",
            "directory-service-authentication",
            "federated-authentication",
        ]
    ] = Field(default=None, alias="Type")
    active_directory: Optional[DirectoryServiceAuthenticationRequestModel] = Field(
        default=None, alias="ActiveDirectory"
    )
    mutual_authentication: Optional[CertificateAuthenticationRequestModel] = Field(
        default=None, alias="MutualAuthentication"
    )
    federated_authentication: Optional[FederatedAuthenticationRequestModel] = Field(
        default=None, alias="FederatedAuthentication"
    )


class ClientVpnAuthenticationModel(BaseModel):
    type: Optional[
        Literal[
            "certificate-authentication",
            "directory-service-authentication",
            "federated-authentication",
        ]
    ] = Field(default=None, alias="Type")
    active_directory: Optional[DirectoryServiceAuthenticationModel] = Field(
        default=None, alias="ActiveDirectory"
    )
    mutual_authentication: Optional[CertificateAuthenticationModel] = Field(
        default=None, alias="MutualAuthentication"
    )
    federated_authentication: Optional[FederatedAuthenticationModel] = Field(
        default=None, alias="FederatedAuthentication"
    )


class ClientVpnConnectionModel(BaseModel):
    client_vpn_endpoint_id: Optional[str] = Field(
        default=None, alias="ClientVpnEndpointId"
    )
    timestamp: Optional[str] = Field(default=None, alias="Timestamp")
    connection_id: Optional[str] = Field(default=None, alias="ConnectionId")
    username: Optional[str] = Field(default=None, alias="Username")
    connection_established_time: Optional[str] = Field(
        default=None, alias="ConnectionEstablishedTime"
    )
    ingress_bytes: Optional[str] = Field(default=None, alias="IngressBytes")
    egress_bytes: Optional[str] = Field(default=None, alias="EgressBytes")
    ingress_packets: Optional[str] = Field(default=None, alias="IngressPackets")
    egress_packets: Optional[str] = Field(default=None, alias="EgressPackets")
    client_ip: Optional[str] = Field(default=None, alias="ClientIp")
    common_name: Optional[str] = Field(default=None, alias="CommonName")
    status: Optional[ClientVpnConnectionStatusModel] = Field(
        default=None, alias="Status"
    )
    connection_end_time: Optional[str] = Field(default=None, alias="ConnectionEndTime")
    posture_compliance_statuses: Optional[List[str]] = Field(
        default=None, alias="PostureComplianceStatuses"
    )


class TerminateConnectionStatusModel(BaseModel):
    connection_id: Optional[str] = Field(default=None, alias="ConnectionId")
    previous_status: Optional[ClientVpnConnectionStatusModel] = Field(
        default=None, alias="PreviousStatus"
    )
    current_status: Optional[ClientVpnConnectionStatusModel] = Field(
        default=None, alias="CurrentStatus"
    )


class CreateClientVpnEndpointResultModel(BaseModel):
    client_vpn_endpoint_id: str = Field(alias="ClientVpnEndpointId")
    status: ClientVpnEndpointStatusModel = Field(alias="Status")
    dns_name: str = Field(alias="DnsName")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteClientVpnEndpointResultModel(BaseModel):
    status: ClientVpnEndpointStatusModel = Field(alias="Status")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ClientVpnRouteModel(BaseModel):
    client_vpn_endpoint_id: Optional[str] = Field(
        default=None, alias="ClientVpnEndpointId"
    )
    destination_cidr: Optional[str] = Field(default=None, alias="DestinationCidr")
    target_subnet: Optional[str] = Field(default=None, alias="TargetSubnet")
    type: Optional[str] = Field(default=None, alias="Type")
    origin: Optional[str] = Field(default=None, alias="Origin")
    status: Optional[ClientVpnRouteStatusModel] = Field(default=None, alias="Status")
    description: Optional[str] = Field(default=None, alias="Description")


class CreateClientVpnRouteResultModel(BaseModel):
    status: ClientVpnRouteStatusModel = Field(alias="Status")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteClientVpnRouteResultModel(BaseModel):
    status: ClientVpnRouteStatusModel = Field(alias="Status")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class VpnTunnelLogOptionsSpecificationModel(BaseModel):
    cloud_watch_log_options: Optional[CloudWatchLogOptionsSpecificationModel] = Field(
        default=None, alias="CloudWatchLogOptions"
    )


class VpnTunnelLogOptionsModel(BaseModel):
    cloud_watch_log_options: Optional[CloudWatchLogOptionsModel] = Field(
        default=None, alias="CloudWatchLogOptions"
    )


class GetCoipPoolUsageResultModel(BaseModel):
    coip_pool_id: str = Field(alias="CoipPoolId")
    coip_address_usages: List[CoipAddressUsageModel] = Field(alias="CoipAddressUsages")
    local_gateway_route_table_id: str = Field(alias="LocalGatewayRouteTableId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateCoipCidrResultModel(BaseModel):
    coip_cidr: CoipCidrModel = Field(alias="CoipCidr")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteCoipCidrResultModel(BaseModel):
    coip_cidr: CoipCidrModel = Field(alias="CoipCidr")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateVpcEndpointConnectionNotificationResultModel(BaseModel):
    connection_notification: ConnectionNotificationModel = Field(
        alias="ConnectionNotification"
    )
    client_token: str = Field(alias="ClientToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeVpcEndpointConnectionNotificationsResultModel(BaseModel):
    connection_notification_set: List[ConnectionNotificationModel] = Field(
        alias="ConnectionNotificationSet"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyInstanceEventWindowRequestModel(BaseModel):
    instance_event_window_id: str = Field(alias="InstanceEventWindowId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    name: Optional[str] = Field(default=None, alias="Name")
    time_ranges: Optional[Sequence[InstanceEventWindowTimeRangeRequestModel]] = Field(
        default=None, alias="TimeRanges"
    )
    cron_expression: Optional[str] = Field(default=None, alias="CronExpression")


class ModifyIpamPoolRequestModel(BaseModel):
    ipam_pool_id: str = Field(alias="IpamPoolId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    description: Optional[str] = Field(default=None, alias="Description")
    auto_import: Optional[bool] = Field(default=None, alias="AutoImport")
    allocation_min_netmask_length: Optional[int] = Field(
        default=None, alias="AllocationMinNetmaskLength"
    )
    allocation_max_netmask_length: Optional[int] = Field(
        default=None, alias="AllocationMaxNetmaskLength"
    )
    allocation_default_netmask_length: Optional[int] = Field(
        default=None, alias="AllocationDefaultNetmaskLength"
    )
    clear_allocation_default_netmask_length: Optional[bool] = Field(
        default=None, alias="ClearAllocationDefaultNetmaskLength"
    )
    add_allocation_resource_tags: Optional[
        Sequence[RequestIpamResourceTagModel]
    ] = Field(default=None, alias="AddAllocationResourceTags")
    remove_allocation_resource_tags: Optional[
        Sequence[RequestIpamResourceTagModel]
    ] = Field(default=None, alias="RemoveAllocationResourceTags")


class CreateLocalGatewayRouteResultModel(BaseModel):
    route: LocalGatewayRouteModel = Field(alias="Route")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteLocalGatewayRouteResultModel(BaseModel):
    route: LocalGatewayRouteModel = Field(alias="Route")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyLocalGatewayRouteResultModel(BaseModel):
    route: LocalGatewayRouteModel = Field(alias="Route")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class SearchLocalGatewayRoutesResultModel(BaseModel):
    routes: List[LocalGatewayRouteModel] = Field(alias="Routes")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateNetworkAclEntryRequestNetworkAclCreateEntryModel(BaseModel):
    egress: bool = Field(alias="Egress")
    protocol: str = Field(alias="Protocol")
    rule_action: Literal["allow", "deny"] = Field(alias="RuleAction")
    rule_number: int = Field(alias="RuleNumber")
    cidr_block: Optional[str] = Field(default=None, alias="CidrBlock")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    icmp_type_code: Optional[IcmpTypeCodeModel] = Field(
        default=None, alias="IcmpTypeCode"
    )
    ipv6_cidr_block: Optional[str] = Field(default=None, alias="Ipv6CidrBlock")
    port_range: Optional[PortRangeModel] = Field(default=None, alias="PortRange")


class CreateNetworkAclEntryRequestModel(BaseModel):
    egress: bool = Field(alias="Egress")
    network_acl_id: str = Field(alias="NetworkAclId")
    protocol: str = Field(alias="Protocol")
    rule_action: Literal["allow", "deny"] = Field(alias="RuleAction")
    rule_number: int = Field(alias="RuleNumber")
    cidr_block: Optional[str] = Field(default=None, alias="CidrBlock")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    icmp_type_code: Optional[IcmpTypeCodeModel] = Field(
        default=None, alias="IcmpTypeCode"
    )
    ipv6_cidr_block: Optional[str] = Field(default=None, alias="Ipv6CidrBlock")
    port_range: Optional[PortRangeModel] = Field(default=None, alias="PortRange")


class NetworkAclEntryModel(BaseModel):
    cidr_block: Optional[str] = Field(default=None, alias="CidrBlock")
    egress: Optional[bool] = Field(default=None, alias="Egress")
    icmp_type_code: Optional[IcmpTypeCodeModel] = Field(
        default=None, alias="IcmpTypeCode"
    )
    ipv6_cidr_block: Optional[str] = Field(default=None, alias="Ipv6CidrBlock")
    port_range: Optional[PortRangeModel] = Field(default=None, alias="PortRange")
    protocol: Optional[str] = Field(default=None, alias="Protocol")
    rule_action: Optional[Literal["allow", "deny"]] = Field(
        default=None, alias="RuleAction"
    )
    rule_number: Optional[int] = Field(default=None, alias="RuleNumber")


class ReplaceNetworkAclEntryRequestNetworkAclReplaceEntryModel(BaseModel):
    egress: bool = Field(alias="Egress")
    protocol: str = Field(alias="Protocol")
    rule_action: Literal["allow", "deny"] = Field(alias="RuleAction")
    rule_number: int = Field(alias="RuleNumber")
    cidr_block: Optional[str] = Field(default=None, alias="CidrBlock")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    icmp_type_code: Optional[IcmpTypeCodeModel] = Field(
        default=None, alias="IcmpTypeCode"
    )
    ipv6_cidr_block: Optional[str] = Field(default=None, alias="Ipv6CidrBlock")
    port_range: Optional[PortRangeModel] = Field(default=None, alias="PortRange")


class ReplaceNetworkAclEntryRequestModel(BaseModel):
    egress: bool = Field(alias="Egress")
    network_acl_id: str = Field(alias="NetworkAclId")
    protocol: str = Field(alias="Protocol")
    rule_action: Literal["allow", "deny"] = Field(alias="RuleAction")
    rule_number: int = Field(alias="RuleNumber")
    cidr_block: Optional[str] = Field(default=None, alias="CidrBlock")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    icmp_type_code: Optional[IcmpTypeCodeModel] = Field(
        default=None, alias="IcmpTypeCode"
    )
    ipv6_cidr_block: Optional[str] = Field(default=None, alias="Ipv6CidrBlock")
    port_range: Optional[PortRangeModel] = Field(default=None, alias="PortRange")


class InstanceNetworkInterfaceSpecificationModel(BaseModel):
    associate_public_ip_address: Optional[bool] = Field(
        default=None, alias="AssociatePublicIpAddress"
    )
    delete_on_termination: Optional[bool] = Field(
        default=None, alias="DeleteOnTermination"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    device_index: Optional[int] = Field(default=None, alias="DeviceIndex")
    groups: Optional[List[str]] = Field(default=None, alias="Groups")
    ipv6_address_count: Optional[int] = Field(default=None, alias="Ipv6AddressCount")
    ipv6_addresses: Optional[List[InstanceIpv6AddressModel]] = Field(
        default=None, alias="Ipv6Addresses"
    )
    network_interface_id: Optional[str] = Field(
        default=None, alias="NetworkInterfaceId"
    )
    private_ip_address: Optional[str] = Field(default=None, alias="PrivateIpAddress")
    private_ip_addresses: Optional[List[PrivateIpAddressSpecificationModel]] = Field(
        default=None, alias="PrivateIpAddresses"
    )
    secondary_private_ip_address_count: Optional[int] = Field(
        default=None, alias="SecondaryPrivateIpAddressCount"
    )
    subnet_id: Optional[str] = Field(default=None, alias="SubnetId")
    associate_carrier_ip_address: Optional[bool] = Field(
        default=None, alias="AssociateCarrierIpAddress"
    )
    interface_type: Optional[str] = Field(default=None, alias="InterfaceType")
    network_card_index: Optional[int] = Field(default=None, alias="NetworkCardIndex")
    ipv4_prefixes: Optional[List[Ipv4PrefixSpecificationRequestModel]] = Field(
        default=None, alias="Ipv4Prefixes"
    )
    ipv4_prefix_count: Optional[int] = Field(default=None, alias="Ipv4PrefixCount")
    ipv6_prefixes: Optional[List[Ipv6PrefixSpecificationRequestModel]] = Field(
        default=None, alias="Ipv6Prefixes"
    )
    ipv6_prefix_count: Optional[int] = Field(default=None, alias="Ipv6PrefixCount")


class CreateReservedInstancesListingRequestModel(BaseModel):
    client_token: str = Field(alias="ClientToken")
    instance_count: int = Field(alias="InstanceCount")
    price_schedules: Sequence[PriceScheduleSpecificationModel] = Field(
        alias="PriceSchedules"
    )
    reserved_instances_id: str = Field(alias="ReservedInstancesId")


class CreateStoreImageTaskRequestModel(BaseModel):
    image_id: str = Field(alias="ImageId")
    bucket: str = Field(alias="Bucket")
    s3_object_tags: Optional[Sequence[S3ObjectTagModel]] = Field(
        default=None, alias="S3ObjectTags"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateTrafficMirrorFilterRuleRequestModel(BaseModel):
    traffic_mirror_filter_id: str = Field(alias="TrafficMirrorFilterId")
    traffic_direction: Literal["egress", "ingress"] = Field(alias="TrafficDirection")
    rule_number: int = Field(alias="RuleNumber")
    rule_action: Literal["accept", "reject"] = Field(alias="RuleAction")
    destination_cidr_block: str = Field(alias="DestinationCidrBlock")
    source_cidr_block: str = Field(alias="SourceCidrBlock")
    destination_port_range: Optional[TrafficMirrorPortRangeRequestModel] = Field(
        default=None, alias="DestinationPortRange"
    )
    source_port_range: Optional[TrafficMirrorPortRangeRequestModel] = Field(
        default=None, alias="SourcePortRange"
    )
    protocol: Optional[int] = Field(default=None, alias="Protocol")
    description: Optional[str] = Field(default=None, alias="Description")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")


class ModifyTrafficMirrorFilterRuleRequestModel(BaseModel):
    traffic_mirror_filter_rule_id: str = Field(alias="TrafficMirrorFilterRuleId")
    traffic_direction: Optional[Literal["egress", "ingress"]] = Field(
        default=None, alias="TrafficDirection"
    )
    rule_number: Optional[int] = Field(default=None, alias="RuleNumber")
    rule_action: Optional[Literal["accept", "reject"]] = Field(
        default=None, alias="RuleAction"
    )
    destination_port_range: Optional[TrafficMirrorPortRangeRequestModel] = Field(
        default=None, alias="DestinationPortRange"
    )
    source_port_range: Optional[TrafficMirrorPortRangeRequestModel] = Field(
        default=None, alias="SourcePortRange"
    )
    protocol: Optional[int] = Field(default=None, alias="Protocol")
    destination_cidr_block: Optional[str] = Field(
        default=None, alias="DestinationCidrBlock"
    )
    source_cidr_block: Optional[str] = Field(default=None, alias="SourceCidrBlock")
    description: Optional[str] = Field(default=None, alias="Description")
    remove_fields: Optional[
        Sequence[
            Literal[
                "description", "destination-port-range", "protocol", "source-port-range"
            ]
        ]
    ] = Field(default=None, alias="RemoveFields")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateVolumePermissionModificationsModel(BaseModel):
    add: Optional[Sequence[CreateVolumePermissionModel]] = Field(
        default=None, alias="Add"
    )
    remove: Optional[Sequence[CreateVolumePermissionModel]] = Field(
        default=None, alias="Remove"
    )


class ModifyVpcEndpointRequestModel(BaseModel):
    vpc_endpoint_id: str = Field(alias="VpcEndpointId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    reset_policy: Optional[bool] = Field(default=None, alias="ResetPolicy")
    policy_document: Optional[str] = Field(default=None, alias="PolicyDocument")
    add_route_table_ids: Optional[Sequence[str]] = Field(
        default=None, alias="AddRouteTableIds"
    )
    remove_route_table_ids: Optional[Sequence[str]] = Field(
        default=None, alias="RemoveRouteTableIds"
    )
    add_subnet_ids: Optional[Sequence[str]] = Field(default=None, alias="AddSubnetIds")
    remove_subnet_ids: Optional[Sequence[str]] = Field(
        default=None, alias="RemoveSubnetIds"
    )
    add_security_group_ids: Optional[Sequence[str]] = Field(
        default=None, alias="AddSecurityGroupIds"
    )
    remove_security_group_ids: Optional[Sequence[str]] = Field(
        default=None, alias="RemoveSecurityGroupIds"
    )
    ip_address_type: Optional[Literal["dualstack", "ipv4", "ipv6"]] = Field(
        default=None, alias="IpAddressType"
    )
    dns_options: Optional[DnsOptionsSpecificationModel] = Field(
        default=None, alias="DnsOptions"
    )
    private_dns_enabled: Optional[bool] = Field(default=None, alias="PrivateDnsEnabled")


class GetAwsNetworkPerformanceDataRequestModel(BaseModel):
    data_queries: Optional[Sequence[DataQueryModel]] = Field(
        default=None, alias="DataQueries"
    )
    start_time: Optional[Union[datetime, str]] = Field(default=None, alias="StartTime")
    end_time: Optional[Union[datetime, str]] = Field(default=None, alias="EndTime")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DataResponseModel(BaseModel):
    id: Optional[str] = Field(default=None, alias="Id")
    source: Optional[str] = Field(default=None, alias="Source")
    destination: Optional[str] = Field(default=None, alias="Destination")
    metric: Optional[Literal["aggregate-latency"]] = Field(default=None, alias="Metric")
    statistic: Optional[Literal["p50"]] = Field(default=None, alias="Statistic")
    period: Optional[
        Literal[
            "fifteen-minutes",
            "five-minutes",
            "one-day",
            "one-hour",
            "one-week",
            "three-hours",
        ]
    ] = Field(default=None, alias="Period")
    metric_points: Optional[List[MetricPointModel]] = Field(
        default=None, alias="MetricPoints"
    )


class DeleteFleetErrorItemModel(BaseModel):
    error: Optional[DeleteFleetErrorModel] = Field(default=None, alias="Error")
    fleet_id: Optional[str] = Field(default=None, alias="FleetId")


class DeleteInstanceEventWindowResultModel(BaseModel):
    instance_event_window_state: InstanceEventWindowStateChangeModel = Field(
        alias="InstanceEventWindowState"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteLaunchTemplateVersionsResponseErrorItemModel(BaseModel):
    launch_template_id: Optional[str] = Field(default=None, alias="LaunchTemplateId")
    launch_template_name: Optional[str] = Field(
        default=None, alias="LaunchTemplateName"
    )
    version_number: Optional[int] = Field(default=None, alias="VersionNumber")
    response_error: Optional[ResponseErrorModel] = Field(
        default=None, alias="ResponseError"
    )


class FailedQueuedPurchaseDeletionModel(BaseModel):
    error: Optional[DeleteQueuedReservedInstancesErrorModel] = Field(
        default=None, alias="Error"
    )
    reserved_instances_id: Optional[str] = Field(
        default=None, alias="ReservedInstancesId"
    )


class DeregisterInstanceEventNotificationAttributesRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    instance_tag_attribute: Optional[
        DeregisterInstanceTagAttributeRequestModel
    ] = Field(default=None, alias="InstanceTagAttribute")


class DeregisterInstanceEventNotificationAttributesResultModel(BaseModel):
    instance_tag_attribute: InstanceTagNotificationAttributeModel = Field(
        alias="InstanceTagAttribute"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeInstanceEventNotificationAttributesResultModel(BaseModel):
    instance_tag_attribute: InstanceTagNotificationAttributeModel = Field(
        alias="InstanceTagAttribute"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class RegisterInstanceEventNotificationAttributesResultModel(BaseModel):
    instance_tag_attribute: InstanceTagNotificationAttributeModel = Field(
        alias="InstanceTagAttribute"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeregisterTransitGatewayMulticastGroupMembersResultModel(BaseModel):
    deregistered_multicast_group_members: TransitGatewayMulticastDeregisteredGroupMembersModel = Field(
        alias="DeregisteredMulticastGroupMembers"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeregisterTransitGatewayMulticastGroupSourcesResultModel(BaseModel):
    deregistered_multicast_group_sources: TransitGatewayMulticastDeregisteredGroupSourcesModel = Field(
        alias="DeregisteredMulticastGroupSources"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeAddressTransfersRequestDescribeAddressTransfersPaginateModel(BaseModel):
    allocation_ids: Optional[Sequence[str]] = Field(default=None, alias="AllocationIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeAddressesAttributeRequestDescribeAddressesAttributePaginateModel(
    BaseModel
):
    allocation_ids: Optional[Sequence[str]] = Field(default=None, alias="AllocationIds")
    attribute: Optional[Literal["domain-name"]] = Field(default=None, alias="Attribute")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeByoipCidrsRequestDescribeByoipCidrsPaginateModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribePrincipalIdFormatRequestDescribePrincipalIdFormatPaginateModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    resources: Optional[Sequence[str]] = Field(default=None, alias="Resources")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeSpotFleetInstancesRequestDescribeSpotFleetInstancesPaginateModel(
    BaseModel
):
    spot_fleet_request_id: str = Field(alias="SpotFleetRequestId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeSpotFleetRequestsRequestDescribeSpotFleetRequestsPaginateModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    spot_fleet_request_ids: Optional[Sequence[str]] = Field(
        default=None, alias="SpotFleetRequestIds"
    )
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeStaleSecurityGroupsRequestDescribeStaleSecurityGroupsPaginateModel(
    BaseModel
):
    vpc_id: str = Field(alias="VpcId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeVpcClassicLinkDnsSupportRequestDescribeVpcClassicLinkDnsSupportPaginateModel(
    BaseModel
):
    vpc_ids: Optional[Sequence[str]] = Field(default=None, alias="VpcIds")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class GetAssociatedIpv6PoolCidrsRequestGetAssociatedIpv6PoolCidrsPaginateModel(
    BaseModel
):
    pool_id: str = Field(alias="PoolId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class GetAwsNetworkPerformanceDataRequestGetAwsNetworkPerformanceDataPaginateModel(
    BaseModel
):
    data_queries: Optional[Sequence[DataQueryModel]] = Field(
        default=None, alias="DataQueries"
    )
    start_time: Optional[Union[datetime, str]] = Field(default=None, alias="StartTime")
    end_time: Optional[Union[datetime, str]] = Field(default=None, alias="EndTime")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class GetGroupsForCapacityReservationRequestGetGroupsForCapacityReservationPaginateModel(
    BaseModel
):
    capacity_reservation_id: str = Field(alias="CapacityReservationId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class GetIpamAddressHistoryRequestGetIpamAddressHistoryPaginateModel(BaseModel):
    cidr: str = Field(alias="Cidr")
    ipam_scope_id: str = Field(alias="IpamScopeId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")
    start_time: Optional[Union[datetime, str]] = Field(default=None, alias="StartTime")
    end_time: Optional[Union[datetime, str]] = Field(default=None, alias="EndTime")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class GetManagedPrefixListAssociationsRequestGetManagedPrefixListAssociationsPaginateModel(
    BaseModel
):
    prefix_list_id: str = Field(alias="PrefixListId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class GetManagedPrefixListEntriesRequestGetManagedPrefixListEntriesPaginateModel(
    BaseModel
):
    prefix_list_id: str = Field(alias="PrefixListId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    target_version: Optional[int] = Field(default=None, alias="TargetVersion")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class GetVpnConnectionDeviceTypesRequestGetVpnConnectionDeviceTypesPaginateModel(
    BaseModel
):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class ListImagesInRecycleBinRequestListImagesInRecycleBinPaginateModel(BaseModel):
    image_ids: Optional[Sequence[str]] = Field(default=None, alias="ImageIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class ListSnapshotsInRecycleBinRequestListSnapshotsInRecycleBinPaginateModel(BaseModel):
    snapshot_ids: Optional[Sequence[str]] = Field(default=None, alias="SnapshotIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeAddressesRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    public_ips: Optional[Sequence[str]] = Field(default=None, alias="PublicIps")
    allocation_ids: Optional[Sequence[str]] = Field(default=None, alias="AllocationIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeAvailabilityZonesRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    zone_names: Optional[Sequence[str]] = Field(default=None, alias="ZoneNames")
    zone_ids: Optional[Sequence[str]] = Field(default=None, alias="ZoneIds")
    all_availability_zones: Optional[bool] = Field(
        default=None, alias="AllAvailabilityZones"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeAwsNetworkPerformanceMetricSubscriptionsRequestDescribeAwsNetworkPerformanceMetricSubscriptionsPaginateModel(
    BaseModel
):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeAwsNetworkPerformanceMetricSubscriptionsRequestModel(BaseModel):
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeBundleTasksRequestModel(BaseModel):
    bundle_ids: Optional[Sequence[str]] = Field(default=None, alias="BundleIds")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeCapacityReservationFleetsRequestDescribeCapacityReservationFleetsPaginateModel(
    BaseModel
):
    capacity_reservation_fleet_ids: Optional[Sequence[str]] = Field(
        default=None, alias="CapacityReservationFleetIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeCapacityReservationFleetsRequestModel(BaseModel):
    capacity_reservation_fleet_ids: Optional[Sequence[str]] = Field(
        default=None, alias="CapacityReservationFleetIds"
    )
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeCapacityReservationsRequestDescribeCapacityReservationsPaginateModel(
    BaseModel
):
    capacity_reservation_ids: Optional[Sequence[str]] = Field(
        default=None, alias="CapacityReservationIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeCapacityReservationsRequestModel(BaseModel):
    capacity_reservation_ids: Optional[Sequence[str]] = Field(
        default=None, alias="CapacityReservationIds"
    )
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeCarrierGatewaysRequestDescribeCarrierGatewaysPaginateModel(BaseModel):
    carrier_gateway_ids: Optional[Sequence[str]] = Field(
        default=None, alias="CarrierGatewayIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeCarrierGatewaysRequestModel(BaseModel):
    carrier_gateway_ids: Optional[Sequence[str]] = Field(
        default=None, alias="CarrierGatewayIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeClassicLinkInstancesRequestDescribeClassicLinkInstancesPaginateModel(
    BaseModel
):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    instance_ids: Optional[Sequence[str]] = Field(default=None, alias="InstanceIds")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeClassicLinkInstancesRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    instance_ids: Optional[Sequence[str]] = Field(default=None, alias="InstanceIds")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeClientVpnAuthorizationRulesRequestDescribeClientVpnAuthorizationRulesPaginateModel(
    BaseModel
):
    client_vpn_endpoint_id: str = Field(alias="ClientVpnEndpointId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeClientVpnAuthorizationRulesRequestModel(BaseModel):
    client_vpn_endpoint_id: str = Field(alias="ClientVpnEndpointId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")


class DescribeClientVpnConnectionsRequestDescribeClientVpnConnectionsPaginateModel(
    BaseModel
):
    client_vpn_endpoint_id: str = Field(alias="ClientVpnEndpointId")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeClientVpnConnectionsRequestModel(BaseModel):
    client_vpn_endpoint_id: str = Field(alias="ClientVpnEndpointId")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeClientVpnEndpointsRequestDescribeClientVpnEndpointsPaginateModel(
    BaseModel
):
    client_vpn_endpoint_ids: Optional[Sequence[str]] = Field(
        default=None, alias="ClientVpnEndpointIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeClientVpnEndpointsRequestModel(BaseModel):
    client_vpn_endpoint_ids: Optional[Sequence[str]] = Field(
        default=None, alias="ClientVpnEndpointIds"
    )
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeClientVpnRoutesRequestDescribeClientVpnRoutesPaginateModel(BaseModel):
    client_vpn_endpoint_id: str = Field(alias="ClientVpnEndpointId")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeClientVpnRoutesRequestModel(BaseModel):
    client_vpn_endpoint_id: str = Field(alias="ClientVpnEndpointId")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeClientVpnTargetNetworksRequestDescribeClientVpnTargetNetworksPaginateModel(
    BaseModel
):
    client_vpn_endpoint_id: str = Field(alias="ClientVpnEndpointId")
    association_ids: Optional[Sequence[str]] = Field(
        default=None, alias="AssociationIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeClientVpnTargetNetworksRequestModel(BaseModel):
    client_vpn_endpoint_id: str = Field(alias="ClientVpnEndpointId")
    association_ids: Optional[Sequence[str]] = Field(
        default=None, alias="AssociationIds"
    )
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeCoipPoolsRequestDescribeCoipPoolsPaginateModel(BaseModel):
    pool_ids: Optional[Sequence[str]] = Field(default=None, alias="PoolIds")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeCoipPoolsRequestModel(BaseModel):
    pool_ids: Optional[Sequence[str]] = Field(default=None, alias="PoolIds")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeCustomerGatewaysRequestModel(BaseModel):
    customer_gateway_ids: Optional[Sequence[str]] = Field(
        default=None, alias="CustomerGatewayIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeDhcpOptionsRequestDescribeDhcpOptionsPaginateModel(BaseModel):
    dhcp_options_ids: Optional[Sequence[str]] = Field(
        default=None, alias="DhcpOptionsIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeDhcpOptionsRequestModel(BaseModel):
    dhcp_options_ids: Optional[Sequence[str]] = Field(
        default=None, alias="DhcpOptionsIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")


class DescribeEgressOnlyInternetGatewaysRequestDescribeEgressOnlyInternetGatewaysPaginateModel(
    BaseModel
):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    egress_only_internet_gateway_ids: Optional[Sequence[str]] = Field(
        default=None, alias="EgressOnlyInternetGatewayIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeEgressOnlyInternetGatewaysRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    egress_only_internet_gateway_ids: Optional[Sequence[str]] = Field(
        default=None, alias="EgressOnlyInternetGatewayIds"
    )
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")


class DescribeElasticGpusRequestModel(BaseModel):
    elastic_gpu_ids: Optional[Sequence[str]] = Field(
        default=None, alias="ElasticGpuIds"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeExportImageTasksRequestDescribeExportImageTasksPaginateModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    export_image_task_ids: Optional[Sequence[str]] = Field(
        default=None, alias="ExportImageTaskIds"
    )
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeExportImageTasksRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    export_image_task_ids: Optional[Sequence[str]] = Field(
        default=None, alias="ExportImageTaskIds"
    )
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeExportTasksRequestModel(BaseModel):
    export_task_ids: Optional[Sequence[str]] = Field(
        default=None, alias="ExportTaskIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")


class DescribeFastLaunchImagesRequestDescribeFastLaunchImagesPaginateModel(BaseModel):
    image_ids: Optional[Sequence[str]] = Field(default=None, alias="ImageIds")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeFastLaunchImagesRequestModel(BaseModel):
    image_ids: Optional[Sequence[str]] = Field(default=None, alias="ImageIds")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeFastSnapshotRestoresRequestDescribeFastSnapshotRestoresPaginateModel(
    BaseModel
):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeFastSnapshotRestoresRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeFleetInstancesRequestModel(BaseModel):
    fleet_id: str = Field(alias="FleetId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")


class DescribeFleetsRequestDescribeFleetsPaginateModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    fleet_ids: Optional[Sequence[str]] = Field(default=None, alias="FleetIds")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeFleetsRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    fleet_ids: Optional[Sequence[str]] = Field(default=None, alias="FleetIds")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")


class DescribeFlowLogsRequestDescribeFlowLogsPaginateModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    flow_log_ids: Optional[Sequence[str]] = Field(default=None, alias="FlowLogIds")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeFlowLogsRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    flow_log_ids: Optional[Sequence[str]] = Field(default=None, alias="FlowLogIds")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeFpgaImagesRequestDescribeFpgaImagesPaginateModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    fpga_image_ids: Optional[Sequence[str]] = Field(default=None, alias="FpgaImageIds")
    owners: Optional[Sequence[str]] = Field(default=None, alias="Owners")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeFpgaImagesRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    fpga_image_ids: Optional[Sequence[str]] = Field(default=None, alias="FpgaImageIds")
    owners: Optional[Sequence[str]] = Field(default=None, alias="Owners")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")


class DescribeHostReservationOfferingsRequestDescribeHostReservationOfferingsPaginateModel(
    BaseModel
):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_duration: Optional[int] = Field(default=None, alias="MaxDuration")
    min_duration: Optional[int] = Field(default=None, alias="MinDuration")
    offering_id: Optional[str] = Field(default=None, alias="OfferingId")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeHostReservationOfferingsRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_duration: Optional[int] = Field(default=None, alias="MaxDuration")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    min_duration: Optional[int] = Field(default=None, alias="MinDuration")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    offering_id: Optional[str] = Field(default=None, alias="OfferingId")


class DescribeHostReservationsRequestDescribeHostReservationsPaginateModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    host_reservation_id_set: Optional[Sequence[str]] = Field(
        default=None, alias="HostReservationIdSet"
    )
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeHostReservationsRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    host_reservation_id_set: Optional[Sequence[str]] = Field(
        default=None, alias="HostReservationIdSet"
    )
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeHostsRequestDescribeHostsPaginateModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    host_ids: Optional[Sequence[str]] = Field(default=None, alias="HostIds")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeHostsRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    host_ids: Optional[Sequence[str]] = Field(default=None, alias="HostIds")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeIamInstanceProfileAssociationsRequestDescribeIamInstanceProfileAssociationsPaginateModel(
    BaseModel
):
    association_ids: Optional[Sequence[str]] = Field(
        default=None, alias="AssociationIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeIamInstanceProfileAssociationsRequestModel(BaseModel):
    association_ids: Optional[Sequence[str]] = Field(
        default=None, alias="AssociationIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeImagesRequestDescribeImagesPaginateModel(BaseModel):
    executable_users: Optional[Sequence[str]] = Field(
        default=None, alias="ExecutableUsers"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    image_ids: Optional[Sequence[str]] = Field(default=None, alias="ImageIds")
    owners: Optional[Sequence[str]] = Field(default=None, alias="Owners")
    include_deprecated: Optional[bool] = Field(default=None, alias="IncludeDeprecated")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeImagesRequestModel(BaseModel):
    executable_users: Optional[Sequence[str]] = Field(
        default=None, alias="ExecutableUsers"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    image_ids: Optional[Sequence[str]] = Field(default=None, alias="ImageIds")
    owners: Optional[Sequence[str]] = Field(default=None, alias="Owners")
    include_deprecated: Optional[bool] = Field(default=None, alias="IncludeDeprecated")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeImportImageTasksRequestDescribeImportImageTasksPaginateModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    import_task_ids: Optional[Sequence[str]] = Field(
        default=None, alias="ImportTaskIds"
    )
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeImportImageTasksRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    import_task_ids: Optional[Sequence[str]] = Field(
        default=None, alias="ImportTaskIds"
    )
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeImportSnapshotTasksRequestDescribeImportSnapshotTasksPaginateModel(
    BaseModel
):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    import_task_ids: Optional[Sequence[str]] = Field(
        default=None, alias="ImportTaskIds"
    )
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeImportSnapshotTasksRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    import_task_ids: Optional[Sequence[str]] = Field(
        default=None, alias="ImportTaskIds"
    )
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeInstanceCreditSpecificationsRequestDescribeInstanceCreditSpecificationsPaginateModel(
    BaseModel
):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    instance_ids: Optional[Sequence[str]] = Field(default=None, alias="InstanceIds")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeInstanceCreditSpecificationsRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    instance_ids: Optional[Sequence[str]] = Field(default=None, alias="InstanceIds")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeInstanceEventWindowsRequestDescribeInstanceEventWindowsPaginateModel(
    BaseModel
):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    instance_event_window_ids: Optional[Sequence[str]] = Field(
        default=None, alias="InstanceEventWindowIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeInstanceEventWindowsRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    instance_event_window_ids: Optional[Sequence[str]] = Field(
        default=None, alias="InstanceEventWindowIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeInstanceStatusRequestDescribeInstanceStatusPaginateModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    instance_ids: Optional[Sequence[str]] = Field(default=None, alias="InstanceIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    include_all_instances: Optional[bool] = Field(
        default=None, alias="IncludeAllInstances"
    )
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeInstanceStatusRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    instance_ids: Optional[Sequence[str]] = Field(default=None, alias="InstanceIds")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    include_all_instances: Optional[bool] = Field(
        default=None, alias="IncludeAllInstances"
    )


class DescribeInstanceTypeOfferingsRequestDescribeInstanceTypeOfferingsPaginateModel(
    BaseModel
):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    location_type: Optional[
        Literal["availability-zone", "availability-zone-id", "region"]
    ] = Field(default=None, alias="LocationType")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeInstanceTypeOfferingsRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    location_type: Optional[
        Literal["availability-zone", "availability-zone-id", "region"]
    ] = Field(default=None, alias="LocationType")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeInstanceTypesRequestDescribeInstanceTypesPaginateModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    instance_types: Optional[
        Sequence[
            Literal[
                "a1.2xlarge",
                "a1.4xlarge",
                "a1.large",
                "a1.medium",
                "a1.metal",
                "a1.xlarge",
                "c1.medium",
                "c1.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c3.large",
                "c3.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "c4.large",
                "c4.xlarge",
                "c5.12xlarge",
                "c5.18xlarge",
                "c5.24xlarge",
                "c5.2xlarge",
                "c5.4xlarge",
                "c5.9xlarge",
                "c5.large",
                "c5.metal",
                "c5.xlarge",
                "c5a.12xlarge",
                "c5a.16xlarge",
                "c5a.24xlarge",
                "c5a.2xlarge",
                "c5a.4xlarge",
                "c5a.8xlarge",
                "c5a.large",
                "c5a.xlarge",
                "c5ad.12xlarge",
                "c5ad.16xlarge",
                "c5ad.24xlarge",
                "c5ad.2xlarge",
                "c5ad.4xlarge",
                "c5ad.8xlarge",
                "c5ad.large",
                "c5ad.xlarge",
                "c5d.12xlarge",
                "c5d.18xlarge",
                "c5d.24xlarge",
                "c5d.2xlarge",
                "c5d.4xlarge",
                "c5d.9xlarge",
                "c5d.large",
                "c5d.metal",
                "c5d.xlarge",
                "c5n.18xlarge",
                "c5n.2xlarge",
                "c5n.4xlarge",
                "c5n.9xlarge",
                "c5n.large",
                "c5n.metal",
                "c5n.xlarge",
                "c6a.12xlarge",
                "c6a.16xlarge",
                "c6a.24xlarge",
                "c6a.2xlarge",
                "c6a.32xlarge",
                "c6a.48xlarge",
                "c6a.4xlarge",
                "c6a.8xlarge",
                "c6a.large",
                "c6a.metal",
                "c6a.xlarge",
                "c6g.12xlarge",
                "c6g.16xlarge",
                "c6g.2xlarge",
                "c6g.4xlarge",
                "c6g.8xlarge",
                "c6g.large",
                "c6g.medium",
                "c6g.metal",
                "c6g.xlarge",
                "c6gd.12xlarge",
                "c6gd.16xlarge",
                "c6gd.2xlarge",
                "c6gd.4xlarge",
                "c6gd.8xlarge",
                "c6gd.large",
                "c6gd.medium",
                "c6gd.metal",
                "c6gd.xlarge",
                "c6gn.12xlarge",
                "c6gn.16xlarge",
                "c6gn.2xlarge",
                "c6gn.4xlarge",
                "c6gn.8xlarge",
                "c6gn.large",
                "c6gn.medium",
                "c6gn.xlarge",
                "c6i.12xlarge",
                "c6i.16xlarge",
                "c6i.24xlarge",
                "c6i.2xlarge",
                "c6i.32xlarge",
                "c6i.4xlarge",
                "c6i.8xlarge",
                "c6i.large",
                "c6i.metal",
                "c6i.xlarge",
                "c6id.12xlarge",
                "c6id.16xlarge",
                "c6id.24xlarge",
                "c6id.2xlarge",
                "c6id.32xlarge",
                "c6id.4xlarge",
                "c6id.8xlarge",
                "c6id.large",
                "c6id.metal",
                "c6id.xlarge",
                "c6in.12xlarge",
                "c6in.16xlarge",
                "c6in.24xlarge",
                "c6in.2xlarge",
                "c6in.32xlarge",
                "c6in.4xlarge",
                "c6in.8xlarge",
                "c6in.large",
                "c6in.xlarge",
                "c7g.12xlarge",
                "c7g.16xlarge",
                "c7g.2xlarge",
                "c7g.4xlarge",
                "c7g.8xlarge",
                "c7g.large",
                "c7g.medium",
                "c7g.xlarge",
                "cc1.4xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge",
                "cr1.8xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "d2.xlarge",
                "d3.2xlarge",
                "d3.4xlarge",
                "d3.8xlarge",
                "d3.xlarge",
                "d3en.12xlarge",
                "d3en.2xlarge",
                "d3en.4xlarge",
                "d3en.6xlarge",
                "d3en.8xlarge",
                "d3en.xlarge",
                "dl1.24xlarge",
                "f1.16xlarge",
                "f1.2xlarge",
                "f1.4xlarge",
                "g2.2xlarge",
                "g2.8xlarge",
                "g3.16xlarge",
                "g3.4xlarge",
                "g3.8xlarge",
                "g3s.xlarge",
                "g4ad.16xlarge",
                "g4ad.2xlarge",
                "g4ad.4xlarge",
                "g4ad.8xlarge",
                "g4ad.xlarge",
                "g4dn.12xlarge",
                "g4dn.16xlarge",
                "g4dn.2xlarge",
                "g4dn.4xlarge",
                "g4dn.8xlarge",
                "g4dn.metal",
                "g4dn.xlarge",
                "g5.12xlarge",
                "g5.16xlarge",
                "g5.24xlarge",
                "g5.2xlarge",
                "g5.48xlarge",
                "g5.4xlarge",
                "g5.8xlarge",
                "g5.xlarge",
                "g5g.16xlarge",
                "g5g.2xlarge",
                "g5g.4xlarge",
                "g5g.8xlarge",
                "g5g.metal",
                "g5g.xlarge",
                "h1.16xlarge",
                "h1.2xlarge",
                "h1.4xlarge",
                "h1.8xlarge",
                "hi1.4xlarge",
                "hpc6a.48xlarge",
                "hpc6id.32xlarge",
                "hs1.8xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "i2.xlarge",
                "i3.16xlarge",
                "i3.2xlarge",
                "i3.4xlarge",
                "i3.8xlarge",
                "i3.large",
                "i3.metal",
                "i3.xlarge",
                "i3en.12xlarge",
                "i3en.24xlarge",
                "i3en.2xlarge",
                "i3en.3xlarge",
                "i3en.6xlarge",
                "i3en.large",
                "i3en.metal",
                "i3en.xlarge",
                "i4i.16xlarge",
                "i4i.2xlarge",
                "i4i.32xlarge",
                "i4i.4xlarge",
                "i4i.8xlarge",
                "i4i.large",
                "i4i.metal",
                "i4i.xlarge",
                "im4gn.16xlarge",
                "im4gn.2xlarge",
                "im4gn.4xlarge",
                "im4gn.8xlarge",
                "im4gn.large",
                "im4gn.xlarge",
                "inf1.24xlarge",
                "inf1.2xlarge",
                "inf1.6xlarge",
                "inf1.xlarge",
                "is4gen.2xlarge",
                "is4gen.4xlarge",
                "is4gen.8xlarge",
                "is4gen.large",
                "is4gen.medium",
                "is4gen.xlarge",
                "m1.large",
                "m1.medium",
                "m1.small",
                "m1.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m2.xlarge",
                "m3.2xlarge",
                "m3.large",
                "m3.medium",
                "m3.xlarge",
                "m4.10xlarge",
                "m4.16xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.large",
                "m4.xlarge",
                "m5.12xlarge",
                "m5.16xlarge",
                "m5.24xlarge",
                "m5.2xlarge",
                "m5.4xlarge",
                "m5.8xlarge",
                "m5.large",
                "m5.metal",
                "m5.xlarge",
                "m5a.12xlarge",
                "m5a.16xlarge",
                "m5a.24xlarge",
                "m5a.2xlarge",
                "m5a.4xlarge",
                "m5a.8xlarge",
                "m5a.large",
                "m5a.xlarge",
                "m5ad.12xlarge",
                "m5ad.16xlarge",
                "m5ad.24xlarge",
                "m5ad.2xlarge",
                "m5ad.4xlarge",
                "m5ad.8xlarge",
                "m5ad.large",
                "m5ad.xlarge",
                "m5d.12xlarge",
                "m5d.16xlarge",
                "m5d.24xlarge",
                "m5d.2xlarge",
                "m5d.4xlarge",
                "m5d.8xlarge",
                "m5d.large",
                "m5d.metal",
                "m5d.xlarge",
                "m5dn.12xlarge",
                "m5dn.16xlarge",
                "m5dn.24xlarge",
                "m5dn.2xlarge",
                "m5dn.4xlarge",
                "m5dn.8xlarge",
                "m5dn.large",
                "m5dn.metal",
                "m5dn.xlarge",
                "m5n.12xlarge",
                "m5n.16xlarge",
                "m5n.24xlarge",
                "m5n.2xlarge",
                "m5n.4xlarge",
                "m5n.8xlarge",
                "m5n.large",
                "m5n.metal",
                "m5n.xlarge",
                "m5zn.12xlarge",
                "m5zn.2xlarge",
                "m5zn.3xlarge",
                "m5zn.6xlarge",
                "m5zn.large",
                "m5zn.metal",
                "m5zn.xlarge",
                "m6a.12xlarge",
                "m6a.16xlarge",
                "m6a.24xlarge",
                "m6a.2xlarge",
                "m6a.32xlarge",
                "m6a.48xlarge",
                "m6a.4xlarge",
                "m6a.8xlarge",
                "m6a.large",
                "m6a.metal",
                "m6a.xlarge",
                "m6g.12xlarge",
                "m6g.16xlarge",
                "m6g.2xlarge",
                "m6g.4xlarge",
                "m6g.8xlarge",
                "m6g.large",
                "m6g.medium",
                "m6g.metal",
                "m6g.xlarge",
                "m6gd.12xlarge",
                "m6gd.16xlarge",
                "m6gd.2xlarge",
                "m6gd.4xlarge",
                "m6gd.8xlarge",
                "m6gd.large",
                "m6gd.medium",
                "m6gd.metal",
                "m6gd.xlarge",
                "m6i.12xlarge",
                "m6i.16xlarge",
                "m6i.24xlarge",
                "m6i.2xlarge",
                "m6i.32xlarge",
                "m6i.4xlarge",
                "m6i.8xlarge",
                "m6i.large",
                "m6i.metal",
                "m6i.xlarge",
                "m6id.12xlarge",
                "m6id.16xlarge",
                "m6id.24xlarge",
                "m6id.2xlarge",
                "m6id.32xlarge",
                "m6id.4xlarge",
                "m6id.8xlarge",
                "m6id.large",
                "m6id.metal",
                "m6id.xlarge",
                "m6idn.12xlarge",
                "m6idn.16xlarge",
                "m6idn.24xlarge",
                "m6idn.2xlarge",
                "m6idn.32xlarge",
                "m6idn.4xlarge",
                "m6idn.8xlarge",
                "m6idn.large",
                "m6idn.xlarge",
                "m6in.12xlarge",
                "m6in.16xlarge",
                "m6in.24xlarge",
                "m6in.2xlarge",
                "m6in.32xlarge",
                "m6in.4xlarge",
                "m6in.8xlarge",
                "m6in.large",
                "m6in.xlarge",
                "mac1.metal",
                "mac2.metal",
                "p2.16xlarge",
                "p2.8xlarge",
                "p2.xlarge",
                "p3.16xlarge",
                "p3.2xlarge",
                "p3.8xlarge",
                "p3dn.24xlarge",
                "p4d.24xlarge",
                "p4de.24xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "r3.large",
                "r3.xlarge",
                "r4.16xlarge",
                "r4.2xlarge",
                "r4.4xlarge",
                "r4.8xlarge",
                "r4.large",
                "r4.xlarge",
                "r5.12xlarge",
                "r5.16xlarge",
                "r5.24xlarge",
                "r5.2xlarge",
                "r5.4xlarge",
                "r5.8xlarge",
                "r5.large",
                "r5.metal",
                "r5.xlarge",
                "r5a.12xlarge",
                "r5a.16xlarge",
                "r5a.24xlarge",
                "r5a.2xlarge",
                "r5a.4xlarge",
                "r5a.8xlarge",
                "r5a.large",
                "r5a.xlarge",
                "r5ad.12xlarge",
                "r5ad.16xlarge",
                "r5ad.24xlarge",
                "r5ad.2xlarge",
                "r5ad.4xlarge",
                "r5ad.8xlarge",
                "r5ad.large",
                "r5ad.xlarge",
                "r5b.12xlarge",
                "r5b.16xlarge",
                "r5b.24xlarge",
                "r5b.2xlarge",
                "r5b.4xlarge",
                "r5b.8xlarge",
                "r5b.large",
                "r5b.metal",
                "r5b.xlarge",
                "r5d.12xlarge",
                "r5d.16xlarge",
                "r5d.24xlarge",
                "r5d.2xlarge",
                "r5d.4xlarge",
                "r5d.8xlarge",
                "r5d.large",
                "r5d.metal",
                "r5d.xlarge",
                "r5dn.12xlarge",
                "r5dn.16xlarge",
                "r5dn.24xlarge",
                "r5dn.2xlarge",
                "r5dn.4xlarge",
                "r5dn.8xlarge",
                "r5dn.large",
                "r5dn.metal",
                "r5dn.xlarge",
                "r5n.12xlarge",
                "r5n.16xlarge",
                "r5n.24xlarge",
                "r5n.2xlarge",
                "r5n.4xlarge",
                "r5n.8xlarge",
                "r5n.large",
                "r5n.metal",
                "r5n.xlarge",
                "r6a.12xlarge",
                "r6a.16xlarge",
                "r6a.24xlarge",
                "r6a.2xlarge",
                "r6a.32xlarge",
                "r6a.48xlarge",
                "r6a.4xlarge",
                "r6a.8xlarge",
                "r6a.large",
                "r6a.metal",
                "r6a.xlarge",
                "r6g.12xlarge",
                "r6g.16xlarge",
                "r6g.2xlarge",
                "r6g.4xlarge",
                "r6g.8xlarge",
                "r6g.large",
                "r6g.medium",
                "r6g.metal",
                "r6g.xlarge",
                "r6gd.12xlarge",
                "r6gd.16xlarge",
                "r6gd.2xlarge",
                "r6gd.4xlarge",
                "r6gd.8xlarge",
                "r6gd.large",
                "r6gd.medium",
                "r6gd.metal",
                "r6gd.xlarge",
                "r6i.12xlarge",
                "r6i.16xlarge",
                "r6i.24xlarge",
                "r6i.2xlarge",
                "r6i.32xlarge",
                "r6i.4xlarge",
                "r6i.8xlarge",
                "r6i.large",
                "r6i.metal",
                "r6i.xlarge",
                "r6id.12xlarge",
                "r6id.16xlarge",
                "r6id.24xlarge",
                "r6id.2xlarge",
                "r6id.32xlarge",
                "r6id.4xlarge",
                "r6id.8xlarge",
                "r6id.large",
                "r6id.metal",
                "r6id.xlarge",
                "r6idn.12xlarge",
                "r6idn.16xlarge",
                "r6idn.24xlarge",
                "r6idn.2xlarge",
                "r6idn.32xlarge",
                "r6idn.4xlarge",
                "r6idn.8xlarge",
                "r6idn.large",
                "r6idn.xlarge",
                "r6in.12xlarge",
                "r6in.16xlarge",
                "r6in.24xlarge",
                "r6in.2xlarge",
                "r6in.32xlarge",
                "r6in.4xlarge",
                "r6in.8xlarge",
                "r6in.large",
                "r6in.xlarge",
                "t1.micro",
                "t2.2xlarge",
                "t2.large",
                "t2.medium",
                "t2.micro",
                "t2.nano",
                "t2.small",
                "t2.xlarge",
                "t3.2xlarge",
                "t3.large",
                "t3.medium",
                "t3.micro",
                "t3.nano",
                "t3.small",
                "t3.xlarge",
                "t3a.2xlarge",
                "t3a.large",
                "t3a.medium",
                "t3a.micro",
                "t3a.nano",
                "t3a.small",
                "t3a.xlarge",
                "t4g.2xlarge",
                "t4g.large",
                "t4g.medium",
                "t4g.micro",
                "t4g.nano",
                "t4g.small",
                "t4g.xlarge",
                "trn1.2xlarge",
                "trn1.32xlarge",
                "u-12tb1.112xlarge",
                "u-12tb1.metal",
                "u-18tb1.112xlarge",
                "u-18tb1.metal",
                "u-24tb1.112xlarge",
                "u-24tb1.metal",
                "u-3tb1.56xlarge",
                "u-6tb1.112xlarge",
                "u-6tb1.56xlarge",
                "u-6tb1.metal",
                "u-9tb1.112xlarge",
                "u-9tb1.metal",
                "vt1.24xlarge",
                "vt1.3xlarge",
                "vt1.6xlarge",
                "x1.16xlarge",
                "x1.32xlarge",
                "x1e.16xlarge",
                "x1e.2xlarge",
                "x1e.32xlarge",
                "x1e.4xlarge",
                "x1e.8xlarge",
                "x1e.xlarge",
                "x2gd.12xlarge",
                "x2gd.16xlarge",
                "x2gd.2xlarge",
                "x2gd.4xlarge",
                "x2gd.8xlarge",
                "x2gd.large",
                "x2gd.medium",
                "x2gd.metal",
                "x2gd.xlarge",
                "x2idn.16xlarge",
                "x2idn.24xlarge",
                "x2idn.32xlarge",
                "x2idn.metal",
                "x2iedn.16xlarge",
                "x2iedn.24xlarge",
                "x2iedn.2xlarge",
                "x2iedn.32xlarge",
                "x2iedn.4xlarge",
                "x2iedn.8xlarge",
                "x2iedn.metal",
                "x2iedn.xlarge",
                "x2iezn.12xlarge",
                "x2iezn.2xlarge",
                "x2iezn.4xlarge",
                "x2iezn.6xlarge",
                "x2iezn.8xlarge",
                "x2iezn.metal",
                "z1d.12xlarge",
                "z1d.2xlarge",
                "z1d.3xlarge",
                "z1d.6xlarge",
                "z1d.large",
                "z1d.metal",
                "z1d.xlarge",
            ]
        ]
    ] = Field(default=None, alias="InstanceTypes")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeInstanceTypesRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    instance_types: Optional[
        Sequence[
            Literal[
                "a1.2xlarge",
                "a1.4xlarge",
                "a1.large",
                "a1.medium",
                "a1.metal",
                "a1.xlarge",
                "c1.medium",
                "c1.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c3.large",
                "c3.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "c4.large",
                "c4.xlarge",
                "c5.12xlarge",
                "c5.18xlarge",
                "c5.24xlarge",
                "c5.2xlarge",
                "c5.4xlarge",
                "c5.9xlarge",
                "c5.large",
                "c5.metal",
                "c5.xlarge",
                "c5a.12xlarge",
                "c5a.16xlarge",
                "c5a.24xlarge",
                "c5a.2xlarge",
                "c5a.4xlarge",
                "c5a.8xlarge",
                "c5a.large",
                "c5a.xlarge",
                "c5ad.12xlarge",
                "c5ad.16xlarge",
                "c5ad.24xlarge",
                "c5ad.2xlarge",
                "c5ad.4xlarge",
                "c5ad.8xlarge",
                "c5ad.large",
                "c5ad.xlarge",
                "c5d.12xlarge",
                "c5d.18xlarge",
                "c5d.24xlarge",
                "c5d.2xlarge",
                "c5d.4xlarge",
                "c5d.9xlarge",
                "c5d.large",
                "c5d.metal",
                "c5d.xlarge",
                "c5n.18xlarge",
                "c5n.2xlarge",
                "c5n.4xlarge",
                "c5n.9xlarge",
                "c5n.large",
                "c5n.metal",
                "c5n.xlarge",
                "c6a.12xlarge",
                "c6a.16xlarge",
                "c6a.24xlarge",
                "c6a.2xlarge",
                "c6a.32xlarge",
                "c6a.48xlarge",
                "c6a.4xlarge",
                "c6a.8xlarge",
                "c6a.large",
                "c6a.metal",
                "c6a.xlarge",
                "c6g.12xlarge",
                "c6g.16xlarge",
                "c6g.2xlarge",
                "c6g.4xlarge",
                "c6g.8xlarge",
                "c6g.large",
                "c6g.medium",
                "c6g.metal",
                "c6g.xlarge",
                "c6gd.12xlarge",
                "c6gd.16xlarge",
                "c6gd.2xlarge",
                "c6gd.4xlarge",
                "c6gd.8xlarge",
                "c6gd.large",
                "c6gd.medium",
                "c6gd.metal",
                "c6gd.xlarge",
                "c6gn.12xlarge",
                "c6gn.16xlarge",
                "c6gn.2xlarge",
                "c6gn.4xlarge",
                "c6gn.8xlarge",
                "c6gn.large",
                "c6gn.medium",
                "c6gn.xlarge",
                "c6i.12xlarge",
                "c6i.16xlarge",
                "c6i.24xlarge",
                "c6i.2xlarge",
                "c6i.32xlarge",
                "c6i.4xlarge",
                "c6i.8xlarge",
                "c6i.large",
                "c6i.metal",
                "c6i.xlarge",
                "c6id.12xlarge",
                "c6id.16xlarge",
                "c6id.24xlarge",
                "c6id.2xlarge",
                "c6id.32xlarge",
                "c6id.4xlarge",
                "c6id.8xlarge",
                "c6id.large",
                "c6id.metal",
                "c6id.xlarge",
                "c6in.12xlarge",
                "c6in.16xlarge",
                "c6in.24xlarge",
                "c6in.2xlarge",
                "c6in.32xlarge",
                "c6in.4xlarge",
                "c6in.8xlarge",
                "c6in.large",
                "c6in.xlarge",
                "c7g.12xlarge",
                "c7g.16xlarge",
                "c7g.2xlarge",
                "c7g.4xlarge",
                "c7g.8xlarge",
                "c7g.large",
                "c7g.medium",
                "c7g.xlarge",
                "cc1.4xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge",
                "cr1.8xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "d2.xlarge",
                "d3.2xlarge",
                "d3.4xlarge",
                "d3.8xlarge",
                "d3.xlarge",
                "d3en.12xlarge",
                "d3en.2xlarge",
                "d3en.4xlarge",
                "d3en.6xlarge",
                "d3en.8xlarge",
                "d3en.xlarge",
                "dl1.24xlarge",
                "f1.16xlarge",
                "f1.2xlarge",
                "f1.4xlarge",
                "g2.2xlarge",
                "g2.8xlarge",
                "g3.16xlarge",
                "g3.4xlarge",
                "g3.8xlarge",
                "g3s.xlarge",
                "g4ad.16xlarge",
                "g4ad.2xlarge",
                "g4ad.4xlarge",
                "g4ad.8xlarge",
                "g4ad.xlarge",
                "g4dn.12xlarge",
                "g4dn.16xlarge",
                "g4dn.2xlarge",
                "g4dn.4xlarge",
                "g4dn.8xlarge",
                "g4dn.metal",
                "g4dn.xlarge",
                "g5.12xlarge",
                "g5.16xlarge",
                "g5.24xlarge",
                "g5.2xlarge",
                "g5.48xlarge",
                "g5.4xlarge",
                "g5.8xlarge",
                "g5.xlarge",
                "g5g.16xlarge",
                "g5g.2xlarge",
                "g5g.4xlarge",
                "g5g.8xlarge",
                "g5g.metal",
                "g5g.xlarge",
                "h1.16xlarge",
                "h1.2xlarge",
                "h1.4xlarge",
                "h1.8xlarge",
                "hi1.4xlarge",
                "hpc6a.48xlarge",
                "hpc6id.32xlarge",
                "hs1.8xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "i2.xlarge",
                "i3.16xlarge",
                "i3.2xlarge",
                "i3.4xlarge",
                "i3.8xlarge",
                "i3.large",
                "i3.metal",
                "i3.xlarge",
                "i3en.12xlarge",
                "i3en.24xlarge",
                "i3en.2xlarge",
                "i3en.3xlarge",
                "i3en.6xlarge",
                "i3en.large",
                "i3en.metal",
                "i3en.xlarge",
                "i4i.16xlarge",
                "i4i.2xlarge",
                "i4i.32xlarge",
                "i4i.4xlarge",
                "i4i.8xlarge",
                "i4i.large",
                "i4i.metal",
                "i4i.xlarge",
                "im4gn.16xlarge",
                "im4gn.2xlarge",
                "im4gn.4xlarge",
                "im4gn.8xlarge",
                "im4gn.large",
                "im4gn.xlarge",
                "inf1.24xlarge",
                "inf1.2xlarge",
                "inf1.6xlarge",
                "inf1.xlarge",
                "is4gen.2xlarge",
                "is4gen.4xlarge",
                "is4gen.8xlarge",
                "is4gen.large",
                "is4gen.medium",
                "is4gen.xlarge",
                "m1.large",
                "m1.medium",
                "m1.small",
                "m1.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m2.xlarge",
                "m3.2xlarge",
                "m3.large",
                "m3.medium",
                "m3.xlarge",
                "m4.10xlarge",
                "m4.16xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.large",
                "m4.xlarge",
                "m5.12xlarge",
                "m5.16xlarge",
                "m5.24xlarge",
                "m5.2xlarge",
                "m5.4xlarge",
                "m5.8xlarge",
                "m5.large",
                "m5.metal",
                "m5.xlarge",
                "m5a.12xlarge",
                "m5a.16xlarge",
                "m5a.24xlarge",
                "m5a.2xlarge",
                "m5a.4xlarge",
                "m5a.8xlarge",
                "m5a.large",
                "m5a.xlarge",
                "m5ad.12xlarge",
                "m5ad.16xlarge",
                "m5ad.24xlarge",
                "m5ad.2xlarge",
                "m5ad.4xlarge",
                "m5ad.8xlarge",
                "m5ad.large",
                "m5ad.xlarge",
                "m5d.12xlarge",
                "m5d.16xlarge",
                "m5d.24xlarge",
                "m5d.2xlarge",
                "m5d.4xlarge",
                "m5d.8xlarge",
                "m5d.large",
                "m5d.metal",
                "m5d.xlarge",
                "m5dn.12xlarge",
                "m5dn.16xlarge",
                "m5dn.24xlarge",
                "m5dn.2xlarge",
                "m5dn.4xlarge",
                "m5dn.8xlarge",
                "m5dn.large",
                "m5dn.metal",
                "m5dn.xlarge",
                "m5n.12xlarge",
                "m5n.16xlarge",
                "m5n.24xlarge",
                "m5n.2xlarge",
                "m5n.4xlarge",
                "m5n.8xlarge",
                "m5n.large",
                "m5n.metal",
                "m5n.xlarge",
                "m5zn.12xlarge",
                "m5zn.2xlarge",
                "m5zn.3xlarge",
                "m5zn.6xlarge",
                "m5zn.large",
                "m5zn.metal",
                "m5zn.xlarge",
                "m6a.12xlarge",
                "m6a.16xlarge",
                "m6a.24xlarge",
                "m6a.2xlarge",
                "m6a.32xlarge",
                "m6a.48xlarge",
                "m6a.4xlarge",
                "m6a.8xlarge",
                "m6a.large",
                "m6a.metal",
                "m6a.xlarge",
                "m6g.12xlarge",
                "m6g.16xlarge",
                "m6g.2xlarge",
                "m6g.4xlarge",
                "m6g.8xlarge",
                "m6g.large",
                "m6g.medium",
                "m6g.metal",
                "m6g.xlarge",
                "m6gd.12xlarge",
                "m6gd.16xlarge",
                "m6gd.2xlarge",
                "m6gd.4xlarge",
                "m6gd.8xlarge",
                "m6gd.large",
                "m6gd.medium",
                "m6gd.metal",
                "m6gd.xlarge",
                "m6i.12xlarge",
                "m6i.16xlarge",
                "m6i.24xlarge",
                "m6i.2xlarge",
                "m6i.32xlarge",
                "m6i.4xlarge",
                "m6i.8xlarge",
                "m6i.large",
                "m6i.metal",
                "m6i.xlarge",
                "m6id.12xlarge",
                "m6id.16xlarge",
                "m6id.24xlarge",
                "m6id.2xlarge",
                "m6id.32xlarge",
                "m6id.4xlarge",
                "m6id.8xlarge",
                "m6id.large",
                "m6id.metal",
                "m6id.xlarge",
                "m6idn.12xlarge",
                "m6idn.16xlarge",
                "m6idn.24xlarge",
                "m6idn.2xlarge",
                "m6idn.32xlarge",
                "m6idn.4xlarge",
                "m6idn.8xlarge",
                "m6idn.large",
                "m6idn.xlarge",
                "m6in.12xlarge",
                "m6in.16xlarge",
                "m6in.24xlarge",
                "m6in.2xlarge",
                "m6in.32xlarge",
                "m6in.4xlarge",
                "m6in.8xlarge",
                "m6in.large",
                "m6in.xlarge",
                "mac1.metal",
                "mac2.metal",
                "p2.16xlarge",
                "p2.8xlarge",
                "p2.xlarge",
                "p3.16xlarge",
                "p3.2xlarge",
                "p3.8xlarge",
                "p3dn.24xlarge",
                "p4d.24xlarge",
                "p4de.24xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "r3.large",
                "r3.xlarge",
                "r4.16xlarge",
                "r4.2xlarge",
                "r4.4xlarge",
                "r4.8xlarge",
                "r4.large",
                "r4.xlarge",
                "r5.12xlarge",
                "r5.16xlarge",
                "r5.24xlarge",
                "r5.2xlarge",
                "r5.4xlarge",
                "r5.8xlarge",
                "r5.large",
                "r5.metal",
                "r5.xlarge",
                "r5a.12xlarge",
                "r5a.16xlarge",
                "r5a.24xlarge",
                "r5a.2xlarge",
                "r5a.4xlarge",
                "r5a.8xlarge",
                "r5a.large",
                "r5a.xlarge",
                "r5ad.12xlarge",
                "r5ad.16xlarge",
                "r5ad.24xlarge",
                "r5ad.2xlarge",
                "r5ad.4xlarge",
                "r5ad.8xlarge",
                "r5ad.large",
                "r5ad.xlarge",
                "r5b.12xlarge",
                "r5b.16xlarge",
                "r5b.24xlarge",
                "r5b.2xlarge",
                "r5b.4xlarge",
                "r5b.8xlarge",
                "r5b.large",
                "r5b.metal",
                "r5b.xlarge",
                "r5d.12xlarge",
                "r5d.16xlarge",
                "r5d.24xlarge",
                "r5d.2xlarge",
                "r5d.4xlarge",
                "r5d.8xlarge",
                "r5d.large",
                "r5d.metal",
                "r5d.xlarge",
                "r5dn.12xlarge",
                "r5dn.16xlarge",
                "r5dn.24xlarge",
                "r5dn.2xlarge",
                "r5dn.4xlarge",
                "r5dn.8xlarge",
                "r5dn.large",
                "r5dn.metal",
                "r5dn.xlarge",
                "r5n.12xlarge",
                "r5n.16xlarge",
                "r5n.24xlarge",
                "r5n.2xlarge",
                "r5n.4xlarge",
                "r5n.8xlarge",
                "r5n.large",
                "r5n.metal",
                "r5n.xlarge",
                "r6a.12xlarge",
                "r6a.16xlarge",
                "r6a.24xlarge",
                "r6a.2xlarge",
                "r6a.32xlarge",
                "r6a.48xlarge",
                "r6a.4xlarge",
                "r6a.8xlarge",
                "r6a.large",
                "r6a.metal",
                "r6a.xlarge",
                "r6g.12xlarge",
                "r6g.16xlarge",
                "r6g.2xlarge",
                "r6g.4xlarge",
                "r6g.8xlarge",
                "r6g.large",
                "r6g.medium",
                "r6g.metal",
                "r6g.xlarge",
                "r6gd.12xlarge",
                "r6gd.16xlarge",
                "r6gd.2xlarge",
                "r6gd.4xlarge",
                "r6gd.8xlarge",
                "r6gd.large",
                "r6gd.medium",
                "r6gd.metal",
                "r6gd.xlarge",
                "r6i.12xlarge",
                "r6i.16xlarge",
                "r6i.24xlarge",
                "r6i.2xlarge",
                "r6i.32xlarge",
                "r6i.4xlarge",
                "r6i.8xlarge",
                "r6i.large",
                "r6i.metal",
                "r6i.xlarge",
                "r6id.12xlarge",
                "r6id.16xlarge",
                "r6id.24xlarge",
                "r6id.2xlarge",
                "r6id.32xlarge",
                "r6id.4xlarge",
                "r6id.8xlarge",
                "r6id.large",
                "r6id.metal",
                "r6id.xlarge",
                "r6idn.12xlarge",
                "r6idn.16xlarge",
                "r6idn.24xlarge",
                "r6idn.2xlarge",
                "r6idn.32xlarge",
                "r6idn.4xlarge",
                "r6idn.8xlarge",
                "r6idn.large",
                "r6idn.xlarge",
                "r6in.12xlarge",
                "r6in.16xlarge",
                "r6in.24xlarge",
                "r6in.2xlarge",
                "r6in.32xlarge",
                "r6in.4xlarge",
                "r6in.8xlarge",
                "r6in.large",
                "r6in.xlarge",
                "t1.micro",
                "t2.2xlarge",
                "t2.large",
                "t2.medium",
                "t2.micro",
                "t2.nano",
                "t2.small",
                "t2.xlarge",
                "t3.2xlarge",
                "t3.large",
                "t3.medium",
                "t3.micro",
                "t3.nano",
                "t3.small",
                "t3.xlarge",
                "t3a.2xlarge",
                "t3a.large",
                "t3a.medium",
                "t3a.micro",
                "t3a.nano",
                "t3a.small",
                "t3a.xlarge",
                "t4g.2xlarge",
                "t4g.large",
                "t4g.medium",
                "t4g.micro",
                "t4g.nano",
                "t4g.small",
                "t4g.xlarge",
                "trn1.2xlarge",
                "trn1.32xlarge",
                "u-12tb1.112xlarge",
                "u-12tb1.metal",
                "u-18tb1.112xlarge",
                "u-18tb1.metal",
                "u-24tb1.112xlarge",
                "u-24tb1.metal",
                "u-3tb1.56xlarge",
                "u-6tb1.112xlarge",
                "u-6tb1.56xlarge",
                "u-6tb1.metal",
                "u-9tb1.112xlarge",
                "u-9tb1.metal",
                "vt1.24xlarge",
                "vt1.3xlarge",
                "vt1.6xlarge",
                "x1.16xlarge",
                "x1.32xlarge",
                "x1e.16xlarge",
                "x1e.2xlarge",
                "x1e.32xlarge",
                "x1e.4xlarge",
                "x1e.8xlarge",
                "x1e.xlarge",
                "x2gd.12xlarge",
                "x2gd.16xlarge",
                "x2gd.2xlarge",
                "x2gd.4xlarge",
                "x2gd.8xlarge",
                "x2gd.large",
                "x2gd.medium",
                "x2gd.metal",
                "x2gd.xlarge",
                "x2idn.16xlarge",
                "x2idn.24xlarge",
                "x2idn.32xlarge",
                "x2idn.metal",
                "x2iedn.16xlarge",
                "x2iedn.24xlarge",
                "x2iedn.2xlarge",
                "x2iedn.32xlarge",
                "x2iedn.4xlarge",
                "x2iedn.8xlarge",
                "x2iedn.metal",
                "x2iedn.xlarge",
                "x2iezn.12xlarge",
                "x2iezn.2xlarge",
                "x2iezn.4xlarge",
                "x2iezn.6xlarge",
                "x2iezn.8xlarge",
                "x2iezn.metal",
                "z1d.12xlarge",
                "z1d.2xlarge",
                "z1d.3xlarge",
                "z1d.6xlarge",
                "z1d.large",
                "z1d.metal",
                "z1d.xlarge",
            ]
        ]
    ] = Field(default=None, alias="InstanceTypes")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeInstancesRequestDescribeInstancesPaginateModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    instance_ids: Optional[Sequence[str]] = Field(default=None, alias="InstanceIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeInstancesRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    instance_ids: Optional[Sequence[str]] = Field(default=None, alias="InstanceIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeInternetGatewaysRequestDescribeInternetGatewaysPaginateModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    internet_gateway_ids: Optional[Sequence[str]] = Field(
        default=None, alias="InternetGatewayIds"
    )
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeInternetGatewaysRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    internet_gateway_ids: Optional[Sequence[str]] = Field(
        default=None, alias="InternetGatewayIds"
    )
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")


class DescribeIpamPoolsRequestDescribeIpamPoolsPaginateModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    ipam_pool_ids: Optional[Sequence[str]] = Field(default=None, alias="IpamPoolIds")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeIpamPoolsRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    ipam_pool_ids: Optional[Sequence[str]] = Field(default=None, alias="IpamPoolIds")


class DescribeIpamResourceDiscoveriesRequestDescribeIpamResourceDiscoveriesPaginateModel(
    BaseModel
):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    ipam_resource_discovery_ids: Optional[Sequence[str]] = Field(
        default=None, alias="IpamResourceDiscoveryIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeIpamResourceDiscoveriesRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    ipam_resource_discovery_ids: Optional[Sequence[str]] = Field(
        default=None, alias="IpamResourceDiscoveryIds"
    )
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")


class DescribeIpamResourceDiscoveryAssociationsRequestDescribeIpamResourceDiscoveryAssociationsPaginateModel(
    BaseModel
):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    ipam_resource_discovery_association_ids: Optional[Sequence[str]] = Field(
        default=None, alias="IpamResourceDiscoveryAssociationIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeIpamResourceDiscoveryAssociationsRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    ipam_resource_discovery_association_ids: Optional[Sequence[str]] = Field(
        default=None, alias="IpamResourceDiscoveryAssociationIds"
    )
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")


class DescribeIpamScopesRequestDescribeIpamScopesPaginateModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    ipam_scope_ids: Optional[Sequence[str]] = Field(default=None, alias="IpamScopeIds")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeIpamScopesRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    ipam_scope_ids: Optional[Sequence[str]] = Field(default=None, alias="IpamScopeIds")


class DescribeIpamsRequestDescribeIpamsPaginateModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    ipam_ids: Optional[Sequence[str]] = Field(default=None, alias="IpamIds")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeIpamsRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    ipam_ids: Optional[Sequence[str]] = Field(default=None, alias="IpamIds")


class DescribeIpv6PoolsRequestDescribeIpv6PoolsPaginateModel(BaseModel):
    pool_ids: Optional[Sequence[str]] = Field(default=None, alias="PoolIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeIpv6PoolsRequestModel(BaseModel):
    pool_ids: Optional[Sequence[str]] = Field(default=None, alias="PoolIds")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")


class DescribeKeyPairsRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    key_names: Optional[Sequence[str]] = Field(default=None, alias="KeyNames")
    key_pair_ids: Optional[Sequence[str]] = Field(default=None, alias="KeyPairIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    include_public_key: Optional[bool] = Field(default=None, alias="IncludePublicKey")


class DescribeLaunchTemplateVersionsRequestDescribeLaunchTemplateVersionsPaginateModel(
    BaseModel
):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    launch_template_id: Optional[str] = Field(default=None, alias="LaunchTemplateId")
    launch_template_name: Optional[str] = Field(
        default=None, alias="LaunchTemplateName"
    )
    versions: Optional[Sequence[str]] = Field(default=None, alias="Versions")
    min_version: Optional[str] = Field(default=None, alias="MinVersion")
    max_version: Optional[str] = Field(default=None, alias="MaxVersion")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    resolve_alias: Optional[bool] = Field(default=None, alias="ResolveAlias")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeLaunchTemplateVersionsRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    launch_template_id: Optional[str] = Field(default=None, alias="LaunchTemplateId")
    launch_template_name: Optional[str] = Field(
        default=None, alias="LaunchTemplateName"
    )
    versions: Optional[Sequence[str]] = Field(default=None, alias="Versions")
    min_version: Optional[str] = Field(default=None, alias="MinVersion")
    max_version: Optional[str] = Field(default=None, alias="MaxVersion")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    resolve_alias: Optional[bool] = Field(default=None, alias="ResolveAlias")


class DescribeLaunchTemplatesRequestDescribeLaunchTemplatesPaginateModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    launch_template_ids: Optional[Sequence[str]] = Field(
        default=None, alias="LaunchTemplateIds"
    )
    launch_template_names: Optional[Sequence[str]] = Field(
        default=None, alias="LaunchTemplateNames"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeLaunchTemplatesRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    launch_template_ids: Optional[Sequence[str]] = Field(
        default=None, alias="LaunchTemplateIds"
    )
    launch_template_names: Optional[Sequence[str]] = Field(
        default=None, alias="LaunchTemplateNames"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")


class DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequestDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsPaginateModel(
    BaseModel
):
    local_gateway_route_table_virtual_interface_group_association_ids: Optional[
        Sequence[str]
    ] = Field(
        default=None, alias="LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequestModel(
    BaseModel
):
    local_gateway_route_table_virtual_interface_group_association_ids: Optional[
        Sequence[str]
    ] = Field(
        default=None, alias="LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeLocalGatewayRouteTableVpcAssociationsRequestDescribeLocalGatewayRouteTableVpcAssociationsPaginateModel(
    BaseModel
):
    local_gateway_route_table_vpc_association_ids: Optional[Sequence[str]] = Field(
        default=None, alias="LocalGatewayRouteTableVpcAssociationIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeLocalGatewayRouteTableVpcAssociationsRequestModel(BaseModel):
    local_gateway_route_table_vpc_association_ids: Optional[Sequence[str]] = Field(
        default=None, alias="LocalGatewayRouteTableVpcAssociationIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeLocalGatewayRouteTablesRequestDescribeLocalGatewayRouteTablesPaginateModel(
    BaseModel
):
    local_gateway_route_table_ids: Optional[Sequence[str]] = Field(
        default=None, alias="LocalGatewayRouteTableIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeLocalGatewayRouteTablesRequestModel(BaseModel):
    local_gateway_route_table_ids: Optional[Sequence[str]] = Field(
        default=None, alias="LocalGatewayRouteTableIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeLocalGatewayVirtualInterfaceGroupsRequestDescribeLocalGatewayVirtualInterfaceGroupsPaginateModel(
    BaseModel
):
    local_gateway_virtual_interface_group_ids: Optional[Sequence[str]] = Field(
        default=None, alias="LocalGatewayVirtualInterfaceGroupIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeLocalGatewayVirtualInterfaceGroupsRequestModel(BaseModel):
    local_gateway_virtual_interface_group_ids: Optional[Sequence[str]] = Field(
        default=None, alias="LocalGatewayVirtualInterfaceGroupIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeLocalGatewayVirtualInterfacesRequestDescribeLocalGatewayVirtualInterfacesPaginateModel(
    BaseModel
):
    local_gateway_virtual_interface_ids: Optional[Sequence[str]] = Field(
        default=None, alias="LocalGatewayVirtualInterfaceIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeLocalGatewayVirtualInterfacesRequestModel(BaseModel):
    local_gateway_virtual_interface_ids: Optional[Sequence[str]] = Field(
        default=None, alias="LocalGatewayVirtualInterfaceIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeLocalGatewaysRequestDescribeLocalGatewaysPaginateModel(BaseModel):
    local_gateway_ids: Optional[Sequence[str]] = Field(
        default=None, alias="LocalGatewayIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeLocalGatewaysRequestModel(BaseModel):
    local_gateway_ids: Optional[Sequence[str]] = Field(
        default=None, alias="LocalGatewayIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeManagedPrefixListsRequestDescribeManagedPrefixListsPaginateModel(
    BaseModel
):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    prefix_list_ids: Optional[Sequence[str]] = Field(
        default=None, alias="PrefixListIds"
    )
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeManagedPrefixListsRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    prefix_list_ids: Optional[Sequence[str]] = Field(
        default=None, alias="PrefixListIds"
    )


class DescribeMovingAddressesRequestDescribeMovingAddressesPaginateModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    public_ips: Optional[Sequence[str]] = Field(default=None, alias="PublicIps")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeMovingAddressesRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    public_ips: Optional[Sequence[str]] = Field(default=None, alias="PublicIps")


class DescribeNatGatewaysRequestDescribeNatGatewaysPaginateModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    nat_gateway_ids: Optional[Sequence[str]] = Field(
        default=None, alias="NatGatewayIds"
    )
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeNatGatewaysRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    nat_gateway_ids: Optional[Sequence[str]] = Field(
        default=None, alias="NatGatewayIds"
    )
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeNetworkAclsRequestDescribeNetworkAclsPaginateModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    network_acl_ids: Optional[Sequence[str]] = Field(
        default=None, alias="NetworkAclIds"
    )
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeNetworkAclsRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    network_acl_ids: Optional[Sequence[str]] = Field(
        default=None, alias="NetworkAclIds"
    )
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")


class DescribeNetworkInsightsAccessScopeAnalysesRequestDescribeNetworkInsightsAccessScopeAnalysesPaginateModel(
    BaseModel
):
    network_insights_access_scope_analysis_ids: Optional[Sequence[str]] = Field(
        default=None, alias="NetworkInsightsAccessScopeAnalysisIds"
    )
    network_insights_access_scope_id: Optional[str] = Field(
        default=None, alias="NetworkInsightsAccessScopeId"
    )
    analysis_start_time_begin: Optional[Union[datetime, str]] = Field(
        default=None, alias="AnalysisStartTimeBegin"
    )
    analysis_start_time_end: Optional[Union[datetime, str]] = Field(
        default=None, alias="AnalysisStartTimeEnd"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeNetworkInsightsAccessScopeAnalysesRequestModel(BaseModel):
    network_insights_access_scope_analysis_ids: Optional[Sequence[str]] = Field(
        default=None, alias="NetworkInsightsAccessScopeAnalysisIds"
    )
    network_insights_access_scope_id: Optional[str] = Field(
        default=None, alias="NetworkInsightsAccessScopeId"
    )
    analysis_start_time_begin: Optional[Union[datetime, str]] = Field(
        default=None, alias="AnalysisStartTimeBegin"
    )
    analysis_start_time_end: Optional[Union[datetime, str]] = Field(
        default=None, alias="AnalysisStartTimeEnd"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeNetworkInsightsAccessScopesRequestDescribeNetworkInsightsAccessScopesPaginateModel(
    BaseModel
):
    network_insights_access_scope_ids: Optional[Sequence[str]] = Field(
        default=None, alias="NetworkInsightsAccessScopeIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeNetworkInsightsAccessScopesRequestModel(BaseModel):
    network_insights_access_scope_ids: Optional[Sequence[str]] = Field(
        default=None, alias="NetworkInsightsAccessScopeIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeNetworkInsightsAnalysesRequestDescribeNetworkInsightsAnalysesPaginateModel(
    BaseModel
):
    network_insights_analysis_ids: Optional[Sequence[str]] = Field(
        default=None, alias="NetworkInsightsAnalysisIds"
    )
    network_insights_path_id: Optional[str] = Field(
        default=None, alias="NetworkInsightsPathId"
    )
    analysis_start_time: Optional[Union[datetime, str]] = Field(
        default=None, alias="AnalysisStartTime"
    )
    analysis_end_time: Optional[Union[datetime, str]] = Field(
        default=None, alias="AnalysisEndTime"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeNetworkInsightsAnalysesRequestModel(BaseModel):
    network_insights_analysis_ids: Optional[Sequence[str]] = Field(
        default=None, alias="NetworkInsightsAnalysisIds"
    )
    network_insights_path_id: Optional[str] = Field(
        default=None, alias="NetworkInsightsPathId"
    )
    analysis_start_time: Optional[Union[datetime, str]] = Field(
        default=None, alias="AnalysisStartTime"
    )
    analysis_end_time: Optional[Union[datetime, str]] = Field(
        default=None, alias="AnalysisEndTime"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeNetworkInsightsPathsRequestDescribeNetworkInsightsPathsPaginateModel(
    BaseModel
):
    network_insights_path_ids: Optional[Sequence[str]] = Field(
        default=None, alias="NetworkInsightsPathIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeNetworkInsightsPathsRequestModel(BaseModel):
    network_insights_path_ids: Optional[Sequence[str]] = Field(
        default=None, alias="NetworkInsightsPathIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeNetworkInterfacePermissionsRequestDescribeNetworkInterfacePermissionsPaginateModel(
    BaseModel
):
    network_interface_permission_ids: Optional[Sequence[str]] = Field(
        default=None, alias="NetworkInterfacePermissionIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeNetworkInterfacePermissionsRequestModel(BaseModel):
    network_interface_permission_ids: Optional[Sequence[str]] = Field(
        default=None, alias="NetworkInterfacePermissionIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")


class DescribeNetworkInterfacesRequestDescribeNetworkInterfacesPaginateModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    network_interface_ids: Optional[Sequence[str]] = Field(
        default=None, alias="NetworkInterfaceIds"
    )
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeNetworkInterfacesRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    network_interface_ids: Optional[Sequence[str]] = Field(
        default=None, alias="NetworkInterfaceIds"
    )
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")


class DescribePlacementGroupsRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    group_names: Optional[Sequence[str]] = Field(default=None, alias="GroupNames")
    group_ids: Optional[Sequence[str]] = Field(default=None, alias="GroupIds")


class DescribePrefixListsRequestDescribePrefixListsPaginateModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    prefix_list_ids: Optional[Sequence[str]] = Field(
        default=None, alias="PrefixListIds"
    )
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribePrefixListsRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    prefix_list_ids: Optional[Sequence[str]] = Field(
        default=None, alias="PrefixListIds"
    )


class DescribePublicIpv4PoolsRequestDescribePublicIpv4PoolsPaginateModel(BaseModel):
    pool_ids: Optional[Sequence[str]] = Field(default=None, alias="PoolIds")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribePublicIpv4PoolsRequestModel(BaseModel):
    pool_ids: Optional[Sequence[str]] = Field(default=None, alias="PoolIds")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")


class DescribeRegionsRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    region_names: Optional[Sequence[str]] = Field(default=None, alias="RegionNames")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    all_regions: Optional[bool] = Field(default=None, alias="AllRegions")


class DescribeReplaceRootVolumeTasksRequestDescribeReplaceRootVolumeTasksPaginateModel(
    BaseModel
):
    replace_root_volume_task_ids: Optional[Sequence[str]] = Field(
        default=None, alias="ReplaceRootVolumeTaskIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeReplaceRootVolumeTasksRequestModel(BaseModel):
    replace_root_volume_task_ids: Optional[Sequence[str]] = Field(
        default=None, alias="ReplaceRootVolumeTaskIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeReservedInstancesListingsRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    reserved_instances_id: Optional[str] = Field(
        default=None, alias="ReservedInstancesId"
    )
    reserved_instances_listing_id: Optional[str] = Field(
        default=None, alias="ReservedInstancesListingId"
    )


class DescribeReservedInstancesModificationsRequestDescribeReservedInstancesModificationsPaginateModel(
    BaseModel
):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    reserved_instances_modification_ids: Optional[Sequence[str]] = Field(
        default=None, alias="ReservedInstancesModificationIds"
    )
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeReservedInstancesModificationsRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    reserved_instances_modification_ids: Optional[Sequence[str]] = Field(
        default=None, alias="ReservedInstancesModificationIds"
    )
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeReservedInstancesOfferingsRequestDescribeReservedInstancesOfferingsPaginateModel(
    BaseModel
):
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    include_marketplace: Optional[bool] = Field(
        default=None, alias="IncludeMarketplace"
    )
    instance_type: Optional[
        Literal[
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.large",
            "a1.medium",
            "a1.metal",
            "a1.xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c3.large",
            "c3.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.large",
            "c5.metal",
            "c5.xlarge",
            "c5a.12xlarge",
            "c5a.16xlarge",
            "c5a.24xlarge",
            "c5a.2xlarge",
            "c5a.4xlarge",
            "c5a.8xlarge",
            "c5a.large",
            "c5a.xlarge",
            "c5ad.12xlarge",
            "c5ad.16xlarge",
            "c5ad.24xlarge",
            "c5ad.2xlarge",
            "c5ad.4xlarge",
            "c5ad.8xlarge",
            "c5ad.large",
            "c5ad.xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.large",
            "c5d.metal",
            "c5d.xlarge",
            "c5n.18xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.large",
            "c5n.metal",
            "c5n.xlarge",
            "c6a.12xlarge",
            "c6a.16xlarge",
            "c6a.24xlarge",
            "c6a.2xlarge",
            "c6a.32xlarge",
            "c6a.48xlarge",
            "c6a.4xlarge",
            "c6a.8xlarge",
            "c6a.large",
            "c6a.metal",
            "c6a.xlarge",
            "c6g.12xlarge",
            "c6g.16xlarge",
            "c6g.2xlarge",
            "c6g.4xlarge",
            "c6g.8xlarge",
            "c6g.large",
            "c6g.medium",
            "c6g.metal",
            "c6g.xlarge",
            "c6gd.12xlarge",
            "c6gd.16xlarge",
            "c6gd.2xlarge",
            "c6gd.4xlarge",
            "c6gd.8xlarge",
            "c6gd.large",
            "c6gd.medium",
            "c6gd.metal",
            "c6gd.xlarge",
            "c6gn.12xlarge",
            "c6gn.16xlarge",
            "c6gn.2xlarge",
            "c6gn.4xlarge",
            "c6gn.8xlarge",
            "c6gn.large",
            "c6gn.medium",
            "c6gn.xlarge",
            "c6i.12xlarge",
            "c6i.16xlarge",
            "c6i.24xlarge",
            "c6i.2xlarge",
            "c6i.32xlarge",
            "c6i.4xlarge",
            "c6i.8xlarge",
            "c6i.large",
            "c6i.metal",
            "c6i.xlarge",
            "c6id.12xlarge",
            "c6id.16xlarge",
            "c6id.24xlarge",
            "c6id.2xlarge",
            "c6id.32xlarge",
            "c6id.4xlarge",
            "c6id.8xlarge",
            "c6id.large",
            "c6id.metal",
            "c6id.xlarge",
            "c6in.12xlarge",
            "c6in.16xlarge",
            "c6in.24xlarge",
            "c6in.2xlarge",
            "c6in.32xlarge",
            "c6in.4xlarge",
            "c6in.8xlarge",
            "c6in.large",
            "c6in.xlarge",
            "c7g.12xlarge",
            "c7g.16xlarge",
            "c7g.2xlarge",
            "c7g.4xlarge",
            "c7g.8xlarge",
            "c7g.large",
            "c7g.medium",
            "c7g.xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "cg1.4xlarge",
            "cr1.8xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "d2.xlarge",
            "d3.2xlarge",
            "d3.4xlarge",
            "d3.8xlarge",
            "d3.xlarge",
            "d3en.12xlarge",
            "d3en.2xlarge",
            "d3en.4xlarge",
            "d3en.6xlarge",
            "d3en.8xlarge",
            "d3en.xlarge",
            "dl1.24xlarge",
            "f1.16xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.16xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3s.xlarge",
            "g4ad.16xlarge",
            "g4ad.2xlarge",
            "g4ad.4xlarge",
            "g4ad.8xlarge",
            "g4ad.xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.metal",
            "g4dn.xlarge",
            "g5.12xlarge",
            "g5.16xlarge",
            "g5.24xlarge",
            "g5.2xlarge",
            "g5.48xlarge",
            "g5.4xlarge",
            "g5.8xlarge",
            "g5.xlarge",
            "g5g.16xlarge",
            "g5g.2xlarge",
            "g5g.4xlarge",
            "g5g.8xlarge",
            "g5g.metal",
            "g5g.xlarge",
            "h1.16xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "hi1.4xlarge",
            "hpc6a.48xlarge",
            "hpc6id.32xlarge",
            "hs1.8xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i2.xlarge",
            "i3.16xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.large",
            "i3.metal",
            "i3.xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.large",
            "i3en.metal",
            "i3en.xlarge",
            "i4i.16xlarge",
            "i4i.2xlarge",
            "i4i.32xlarge",
            "i4i.4xlarge",
            "i4i.8xlarge",
            "i4i.large",
            "i4i.metal",
            "i4i.xlarge",
            "im4gn.16xlarge",
            "im4gn.2xlarge",
            "im4gn.4xlarge",
            "im4gn.8xlarge",
            "im4gn.large",
            "im4gn.xlarge",
            "inf1.24xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.xlarge",
            "is4gen.2xlarge",
            "is4gen.4xlarge",
            "is4gen.8xlarge",
            "is4gen.large",
            "is4gen.medium",
            "is4gen.xlarge",
            "m1.large",
            "m1.medium",
            "m1.small",
            "m1.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "m2.xlarge",
            "m3.2xlarge",
            "m3.large",
            "m3.medium",
            "m3.xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.large",
            "m4.xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.large",
            "m5.metal",
            "m5.xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.large",
            "m5a.xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.large",
            "m5ad.xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.large",
            "m5d.metal",
            "m5d.xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.large",
            "m5dn.metal",
            "m5dn.xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.large",
            "m5n.metal",
            "m5n.xlarge",
            "m5zn.12xlarge",
            "m5zn.2xlarge",
            "m5zn.3xlarge",
            "m5zn.6xlarge",
            "m5zn.large",
            "m5zn.metal",
            "m5zn.xlarge",
            "m6a.12xlarge",
            "m6a.16xlarge",
            "m6a.24xlarge",
            "m6a.2xlarge",
            "m6a.32xlarge",
            "m6a.48xlarge",
            "m6a.4xlarge",
            "m6a.8xlarge",
            "m6a.large",
            "m6a.metal",
            "m6a.xlarge",
            "m6g.12xlarge",
            "m6g.16xlarge",
            "m6g.2xlarge",
            "m6g.4xlarge",
            "m6g.8xlarge",
            "m6g.large",
            "m6g.medium",
            "m6g.metal",
            "m6g.xlarge",
            "m6gd.12xlarge",
            "m6gd.16xlarge",
            "m6gd.2xlarge",
            "m6gd.4xlarge",
            "m6gd.8xlarge",
            "m6gd.large",
            "m6gd.medium",
            "m6gd.metal",
            "m6gd.xlarge",
            "m6i.12xlarge",
            "m6i.16xlarge",
            "m6i.24xlarge",
            "m6i.2xlarge",
            "m6i.32xlarge",
            "m6i.4xlarge",
            "m6i.8xlarge",
            "m6i.large",
            "m6i.metal",
            "m6i.xlarge",
            "m6id.12xlarge",
            "m6id.16xlarge",
            "m6id.24xlarge",
            "m6id.2xlarge",
            "m6id.32xlarge",
            "m6id.4xlarge",
            "m6id.8xlarge",
            "m6id.large",
            "m6id.metal",
            "m6id.xlarge",
            "m6idn.12xlarge",
            "m6idn.16xlarge",
            "m6idn.24xlarge",
            "m6idn.2xlarge",
            "m6idn.32xlarge",
            "m6idn.4xlarge",
            "m6idn.8xlarge",
            "m6idn.large",
            "m6idn.xlarge",
            "m6in.12xlarge",
            "m6in.16xlarge",
            "m6in.24xlarge",
            "m6in.2xlarge",
            "m6in.32xlarge",
            "m6in.4xlarge",
            "m6in.8xlarge",
            "m6in.large",
            "m6in.xlarge",
            "mac1.metal",
            "mac2.metal",
            "p2.16xlarge",
            "p2.8xlarge",
            "p2.xlarge",
            "p3.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3dn.24xlarge",
            "p4d.24xlarge",
            "p4de.24xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r4.16xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.large",
            "r5.metal",
            "r5.xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.large",
            "r5a.xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.large",
            "r5ad.xlarge",
            "r5b.12xlarge",
            "r5b.16xlarge",
            "r5b.24xlarge",
            "r5b.2xlarge",
            "r5b.4xlarge",
            "r5b.8xlarge",
            "r5b.large",
            "r5b.metal",
            "r5b.xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.large",
            "r5d.metal",
            "r5d.xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.large",
            "r5dn.metal",
            "r5dn.xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.large",
            "r5n.metal",
            "r5n.xlarge",
            "r6a.12xlarge",
            "r6a.16xlarge",
            "r6a.24xlarge",
            "r6a.2xlarge",
            "r6a.32xlarge",
            "r6a.48xlarge",
            "r6a.4xlarge",
            "r6a.8xlarge",
            "r6a.large",
            "r6a.metal",
            "r6a.xlarge",
            "r6g.12xlarge",
            "r6g.16xlarge",
            "r6g.2xlarge",
            "r6g.4xlarge",
            "r6g.8xlarge",
            "r6g.large",
            "r6g.medium",
            "r6g.metal",
            "r6g.xlarge",
            "r6gd.12xlarge",
            "r6gd.16xlarge",
            "r6gd.2xlarge",
            "r6gd.4xlarge",
            "r6gd.8xlarge",
            "r6gd.large",
            "r6gd.medium",
            "r6gd.metal",
            "r6gd.xlarge",
            "r6i.12xlarge",
            "r6i.16xlarge",
            "r6i.24xlarge",
            "r6i.2xlarge",
            "r6i.32xlarge",
            "r6i.4xlarge",
            "r6i.8xlarge",
            "r6i.large",
            "r6i.metal",
            "r6i.xlarge",
            "r6id.12xlarge",
            "r6id.16xlarge",
            "r6id.24xlarge",
            "r6id.2xlarge",
            "r6id.32xlarge",
            "r6id.4xlarge",
            "r6id.8xlarge",
            "r6id.large",
            "r6id.metal",
            "r6id.xlarge",
            "r6idn.12xlarge",
            "r6idn.16xlarge",
            "r6idn.24xlarge",
            "r6idn.2xlarge",
            "r6idn.32xlarge",
            "r6idn.4xlarge",
            "r6idn.8xlarge",
            "r6idn.large",
            "r6idn.xlarge",
            "r6in.12xlarge",
            "r6in.16xlarge",
            "r6in.24xlarge",
            "r6in.2xlarge",
            "r6in.32xlarge",
            "r6in.4xlarge",
            "r6in.8xlarge",
            "r6in.large",
            "r6in.xlarge",
            "t1.micro",
            "t2.2xlarge",
            "t2.large",
            "t2.medium",
            "t2.micro",
            "t2.nano",
            "t2.small",
            "t2.xlarge",
            "t3.2xlarge",
            "t3.large",
            "t3.medium",
            "t3.micro",
            "t3.nano",
            "t3.small",
            "t3.xlarge",
            "t3a.2xlarge",
            "t3a.large",
            "t3a.medium",
            "t3a.micro",
            "t3a.nano",
            "t3a.small",
            "t3a.xlarge",
            "t4g.2xlarge",
            "t4g.large",
            "t4g.medium",
            "t4g.micro",
            "t4g.nano",
            "t4g.small",
            "t4g.xlarge",
            "trn1.2xlarge",
            "trn1.32xlarge",
            "u-12tb1.112xlarge",
            "u-12tb1.metal",
            "u-18tb1.112xlarge",
            "u-18tb1.metal",
            "u-24tb1.112xlarge",
            "u-24tb1.metal",
            "u-3tb1.56xlarge",
            "u-6tb1.112xlarge",
            "u-6tb1.56xlarge",
            "u-6tb1.metal",
            "u-9tb1.112xlarge",
            "u-9tb1.metal",
            "vt1.24xlarge",
            "vt1.3xlarge",
            "vt1.6xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.16xlarge",
            "x1e.2xlarge",
            "x1e.32xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.xlarge",
            "x2gd.12xlarge",
            "x2gd.16xlarge",
            "x2gd.2xlarge",
            "x2gd.4xlarge",
            "x2gd.8xlarge",
            "x2gd.large",
            "x2gd.medium",
            "x2gd.metal",
            "x2gd.xlarge",
            "x2idn.16xlarge",
            "x2idn.24xlarge",
            "x2idn.32xlarge",
            "x2idn.metal",
            "x2iedn.16xlarge",
            "x2iedn.24xlarge",
            "x2iedn.2xlarge",
            "x2iedn.32xlarge",
            "x2iedn.4xlarge",
            "x2iedn.8xlarge",
            "x2iedn.metal",
            "x2iedn.xlarge",
            "x2iezn.12xlarge",
            "x2iezn.2xlarge",
            "x2iezn.4xlarge",
            "x2iezn.6xlarge",
            "x2iezn.8xlarge",
            "x2iezn.metal",
            "z1d.12xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.large",
            "z1d.metal",
            "z1d.xlarge",
        ]
    ] = Field(default=None, alias="InstanceType")
    max_duration: Optional[int] = Field(default=None, alias="MaxDuration")
    max_instance_count: Optional[int] = Field(default=None, alias="MaxInstanceCount")
    min_duration: Optional[int] = Field(default=None, alias="MinDuration")
    offering_class: Optional[Literal["convertible", "standard"]] = Field(
        default=None, alias="OfferingClass"
    )
    product_description: Optional[
        Literal[
            "Linux/UNIX", "Linux/UNIX (Amazon VPC)", "Windows", "Windows (Amazon VPC)"
        ]
    ] = Field(default=None, alias="ProductDescription")
    reserved_instances_offering_ids: Optional[Sequence[str]] = Field(
        default=None, alias="ReservedInstancesOfferingIds"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    instance_tenancy: Optional[Literal["dedicated", "default", "host"]] = Field(
        default=None, alias="InstanceTenancy"
    )
    offering_type: Optional[
        Literal[
            "All Upfront",
            "Heavy Utilization",
            "Light Utilization",
            "Medium Utilization",
            "No Upfront",
            "Partial Upfront",
        ]
    ] = Field(default=None, alias="OfferingType")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeReservedInstancesOfferingsRequestModel(BaseModel):
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    include_marketplace: Optional[bool] = Field(
        default=None, alias="IncludeMarketplace"
    )
    instance_type: Optional[
        Literal[
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.large",
            "a1.medium",
            "a1.metal",
            "a1.xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c3.large",
            "c3.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.large",
            "c5.metal",
            "c5.xlarge",
            "c5a.12xlarge",
            "c5a.16xlarge",
            "c5a.24xlarge",
            "c5a.2xlarge",
            "c5a.4xlarge",
            "c5a.8xlarge",
            "c5a.large",
            "c5a.xlarge",
            "c5ad.12xlarge",
            "c5ad.16xlarge",
            "c5ad.24xlarge",
            "c5ad.2xlarge",
            "c5ad.4xlarge",
            "c5ad.8xlarge",
            "c5ad.large",
            "c5ad.xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.large",
            "c5d.metal",
            "c5d.xlarge",
            "c5n.18xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.large",
            "c5n.metal",
            "c5n.xlarge",
            "c6a.12xlarge",
            "c6a.16xlarge",
            "c6a.24xlarge",
            "c6a.2xlarge",
            "c6a.32xlarge",
            "c6a.48xlarge",
            "c6a.4xlarge",
            "c6a.8xlarge",
            "c6a.large",
            "c6a.metal",
            "c6a.xlarge",
            "c6g.12xlarge",
            "c6g.16xlarge",
            "c6g.2xlarge",
            "c6g.4xlarge",
            "c6g.8xlarge",
            "c6g.large",
            "c6g.medium",
            "c6g.metal",
            "c6g.xlarge",
            "c6gd.12xlarge",
            "c6gd.16xlarge",
            "c6gd.2xlarge",
            "c6gd.4xlarge",
            "c6gd.8xlarge",
            "c6gd.large",
            "c6gd.medium",
            "c6gd.metal",
            "c6gd.xlarge",
            "c6gn.12xlarge",
            "c6gn.16xlarge",
            "c6gn.2xlarge",
            "c6gn.4xlarge",
            "c6gn.8xlarge",
            "c6gn.large",
            "c6gn.medium",
            "c6gn.xlarge",
            "c6i.12xlarge",
            "c6i.16xlarge",
            "c6i.24xlarge",
            "c6i.2xlarge",
            "c6i.32xlarge",
            "c6i.4xlarge",
            "c6i.8xlarge",
            "c6i.large",
            "c6i.metal",
            "c6i.xlarge",
            "c6id.12xlarge",
            "c6id.16xlarge",
            "c6id.24xlarge",
            "c6id.2xlarge",
            "c6id.32xlarge",
            "c6id.4xlarge",
            "c6id.8xlarge",
            "c6id.large",
            "c6id.metal",
            "c6id.xlarge",
            "c6in.12xlarge",
            "c6in.16xlarge",
            "c6in.24xlarge",
            "c6in.2xlarge",
            "c6in.32xlarge",
            "c6in.4xlarge",
            "c6in.8xlarge",
            "c6in.large",
            "c6in.xlarge",
            "c7g.12xlarge",
            "c7g.16xlarge",
            "c7g.2xlarge",
            "c7g.4xlarge",
            "c7g.8xlarge",
            "c7g.large",
            "c7g.medium",
            "c7g.xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "cg1.4xlarge",
            "cr1.8xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "d2.xlarge",
            "d3.2xlarge",
            "d3.4xlarge",
            "d3.8xlarge",
            "d3.xlarge",
            "d3en.12xlarge",
            "d3en.2xlarge",
            "d3en.4xlarge",
            "d3en.6xlarge",
            "d3en.8xlarge",
            "d3en.xlarge",
            "dl1.24xlarge",
            "f1.16xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.16xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3s.xlarge",
            "g4ad.16xlarge",
            "g4ad.2xlarge",
            "g4ad.4xlarge",
            "g4ad.8xlarge",
            "g4ad.xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.metal",
            "g4dn.xlarge",
            "g5.12xlarge",
            "g5.16xlarge",
            "g5.24xlarge",
            "g5.2xlarge",
            "g5.48xlarge",
            "g5.4xlarge",
            "g5.8xlarge",
            "g5.xlarge",
            "g5g.16xlarge",
            "g5g.2xlarge",
            "g5g.4xlarge",
            "g5g.8xlarge",
            "g5g.metal",
            "g5g.xlarge",
            "h1.16xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "hi1.4xlarge",
            "hpc6a.48xlarge",
            "hpc6id.32xlarge",
            "hs1.8xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i2.xlarge",
            "i3.16xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.large",
            "i3.metal",
            "i3.xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.large",
            "i3en.metal",
            "i3en.xlarge",
            "i4i.16xlarge",
            "i4i.2xlarge",
            "i4i.32xlarge",
            "i4i.4xlarge",
            "i4i.8xlarge",
            "i4i.large",
            "i4i.metal",
            "i4i.xlarge",
            "im4gn.16xlarge",
            "im4gn.2xlarge",
            "im4gn.4xlarge",
            "im4gn.8xlarge",
            "im4gn.large",
            "im4gn.xlarge",
            "inf1.24xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.xlarge",
            "is4gen.2xlarge",
            "is4gen.4xlarge",
            "is4gen.8xlarge",
            "is4gen.large",
            "is4gen.medium",
            "is4gen.xlarge",
            "m1.large",
            "m1.medium",
            "m1.small",
            "m1.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "m2.xlarge",
            "m3.2xlarge",
            "m3.large",
            "m3.medium",
            "m3.xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.large",
            "m4.xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.large",
            "m5.metal",
            "m5.xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.large",
            "m5a.xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.large",
            "m5ad.xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.large",
            "m5d.metal",
            "m5d.xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.large",
            "m5dn.metal",
            "m5dn.xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.large",
            "m5n.metal",
            "m5n.xlarge",
            "m5zn.12xlarge",
            "m5zn.2xlarge",
            "m5zn.3xlarge",
            "m5zn.6xlarge",
            "m5zn.large",
            "m5zn.metal",
            "m5zn.xlarge",
            "m6a.12xlarge",
            "m6a.16xlarge",
            "m6a.24xlarge",
            "m6a.2xlarge",
            "m6a.32xlarge",
            "m6a.48xlarge",
            "m6a.4xlarge",
            "m6a.8xlarge",
            "m6a.large",
            "m6a.metal",
            "m6a.xlarge",
            "m6g.12xlarge",
            "m6g.16xlarge",
            "m6g.2xlarge",
            "m6g.4xlarge",
            "m6g.8xlarge",
            "m6g.large",
            "m6g.medium",
            "m6g.metal",
            "m6g.xlarge",
            "m6gd.12xlarge",
            "m6gd.16xlarge",
            "m6gd.2xlarge",
            "m6gd.4xlarge",
            "m6gd.8xlarge",
            "m6gd.large",
            "m6gd.medium",
            "m6gd.metal",
            "m6gd.xlarge",
            "m6i.12xlarge",
            "m6i.16xlarge",
            "m6i.24xlarge",
            "m6i.2xlarge",
            "m6i.32xlarge",
            "m6i.4xlarge",
            "m6i.8xlarge",
            "m6i.large",
            "m6i.metal",
            "m6i.xlarge",
            "m6id.12xlarge",
            "m6id.16xlarge",
            "m6id.24xlarge",
            "m6id.2xlarge",
            "m6id.32xlarge",
            "m6id.4xlarge",
            "m6id.8xlarge",
            "m6id.large",
            "m6id.metal",
            "m6id.xlarge",
            "m6idn.12xlarge",
            "m6idn.16xlarge",
            "m6idn.24xlarge",
            "m6idn.2xlarge",
            "m6idn.32xlarge",
            "m6idn.4xlarge",
            "m6idn.8xlarge",
            "m6idn.large",
            "m6idn.xlarge",
            "m6in.12xlarge",
            "m6in.16xlarge",
            "m6in.24xlarge",
            "m6in.2xlarge",
            "m6in.32xlarge",
            "m6in.4xlarge",
            "m6in.8xlarge",
            "m6in.large",
            "m6in.xlarge",
            "mac1.metal",
            "mac2.metal",
            "p2.16xlarge",
            "p2.8xlarge",
            "p2.xlarge",
            "p3.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3dn.24xlarge",
            "p4d.24xlarge",
            "p4de.24xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r4.16xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.large",
            "r5.metal",
            "r5.xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.large",
            "r5a.xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.large",
            "r5ad.xlarge",
            "r5b.12xlarge",
            "r5b.16xlarge",
            "r5b.24xlarge",
            "r5b.2xlarge",
            "r5b.4xlarge",
            "r5b.8xlarge",
            "r5b.large",
            "r5b.metal",
            "r5b.xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.large",
            "r5d.metal",
            "r5d.xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.large",
            "r5dn.metal",
            "r5dn.xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.large",
            "r5n.metal",
            "r5n.xlarge",
            "r6a.12xlarge",
            "r6a.16xlarge",
            "r6a.24xlarge",
            "r6a.2xlarge",
            "r6a.32xlarge",
            "r6a.48xlarge",
            "r6a.4xlarge",
            "r6a.8xlarge",
            "r6a.large",
            "r6a.metal",
            "r6a.xlarge",
            "r6g.12xlarge",
            "r6g.16xlarge",
            "r6g.2xlarge",
            "r6g.4xlarge",
            "r6g.8xlarge",
            "r6g.large",
            "r6g.medium",
            "r6g.metal",
            "r6g.xlarge",
            "r6gd.12xlarge",
            "r6gd.16xlarge",
            "r6gd.2xlarge",
            "r6gd.4xlarge",
            "r6gd.8xlarge",
            "r6gd.large",
            "r6gd.medium",
            "r6gd.metal",
            "r6gd.xlarge",
            "r6i.12xlarge",
            "r6i.16xlarge",
            "r6i.24xlarge",
            "r6i.2xlarge",
            "r6i.32xlarge",
            "r6i.4xlarge",
            "r6i.8xlarge",
            "r6i.large",
            "r6i.metal",
            "r6i.xlarge",
            "r6id.12xlarge",
            "r6id.16xlarge",
            "r6id.24xlarge",
            "r6id.2xlarge",
            "r6id.32xlarge",
            "r6id.4xlarge",
            "r6id.8xlarge",
            "r6id.large",
            "r6id.metal",
            "r6id.xlarge",
            "r6idn.12xlarge",
            "r6idn.16xlarge",
            "r6idn.24xlarge",
            "r6idn.2xlarge",
            "r6idn.32xlarge",
            "r6idn.4xlarge",
            "r6idn.8xlarge",
            "r6idn.large",
            "r6idn.xlarge",
            "r6in.12xlarge",
            "r6in.16xlarge",
            "r6in.24xlarge",
            "r6in.2xlarge",
            "r6in.32xlarge",
            "r6in.4xlarge",
            "r6in.8xlarge",
            "r6in.large",
            "r6in.xlarge",
            "t1.micro",
            "t2.2xlarge",
            "t2.large",
            "t2.medium",
            "t2.micro",
            "t2.nano",
            "t2.small",
            "t2.xlarge",
            "t3.2xlarge",
            "t3.large",
            "t3.medium",
            "t3.micro",
            "t3.nano",
            "t3.small",
            "t3.xlarge",
            "t3a.2xlarge",
            "t3a.large",
            "t3a.medium",
            "t3a.micro",
            "t3a.nano",
            "t3a.small",
            "t3a.xlarge",
            "t4g.2xlarge",
            "t4g.large",
            "t4g.medium",
            "t4g.micro",
            "t4g.nano",
            "t4g.small",
            "t4g.xlarge",
            "trn1.2xlarge",
            "trn1.32xlarge",
            "u-12tb1.112xlarge",
            "u-12tb1.metal",
            "u-18tb1.112xlarge",
            "u-18tb1.metal",
            "u-24tb1.112xlarge",
            "u-24tb1.metal",
            "u-3tb1.56xlarge",
            "u-6tb1.112xlarge",
            "u-6tb1.56xlarge",
            "u-6tb1.metal",
            "u-9tb1.112xlarge",
            "u-9tb1.metal",
            "vt1.24xlarge",
            "vt1.3xlarge",
            "vt1.6xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.16xlarge",
            "x1e.2xlarge",
            "x1e.32xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.xlarge",
            "x2gd.12xlarge",
            "x2gd.16xlarge",
            "x2gd.2xlarge",
            "x2gd.4xlarge",
            "x2gd.8xlarge",
            "x2gd.large",
            "x2gd.medium",
            "x2gd.metal",
            "x2gd.xlarge",
            "x2idn.16xlarge",
            "x2idn.24xlarge",
            "x2idn.32xlarge",
            "x2idn.metal",
            "x2iedn.16xlarge",
            "x2iedn.24xlarge",
            "x2iedn.2xlarge",
            "x2iedn.32xlarge",
            "x2iedn.4xlarge",
            "x2iedn.8xlarge",
            "x2iedn.metal",
            "x2iedn.xlarge",
            "x2iezn.12xlarge",
            "x2iezn.2xlarge",
            "x2iezn.4xlarge",
            "x2iezn.6xlarge",
            "x2iezn.8xlarge",
            "x2iezn.metal",
            "z1d.12xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.large",
            "z1d.metal",
            "z1d.xlarge",
        ]
    ] = Field(default=None, alias="InstanceType")
    max_duration: Optional[int] = Field(default=None, alias="MaxDuration")
    max_instance_count: Optional[int] = Field(default=None, alias="MaxInstanceCount")
    min_duration: Optional[int] = Field(default=None, alias="MinDuration")
    offering_class: Optional[Literal["convertible", "standard"]] = Field(
        default=None, alias="OfferingClass"
    )
    product_description: Optional[
        Literal[
            "Linux/UNIX", "Linux/UNIX (Amazon VPC)", "Windows", "Windows (Amazon VPC)"
        ]
    ] = Field(default=None, alias="ProductDescription")
    reserved_instances_offering_ids: Optional[Sequence[str]] = Field(
        default=None, alias="ReservedInstancesOfferingIds"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    instance_tenancy: Optional[Literal["dedicated", "default", "host"]] = Field(
        default=None, alias="InstanceTenancy"
    )
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    offering_type: Optional[
        Literal[
            "All Upfront",
            "Heavy Utilization",
            "Light Utilization",
            "Medium Utilization",
            "No Upfront",
            "Partial Upfront",
        ]
    ] = Field(default=None, alias="OfferingType")


class DescribeReservedInstancesRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    offering_class: Optional[Literal["convertible", "standard"]] = Field(
        default=None, alias="OfferingClass"
    )
    reserved_instances_ids: Optional[Sequence[str]] = Field(
        default=None, alias="ReservedInstancesIds"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    offering_type: Optional[
        Literal[
            "All Upfront",
            "Heavy Utilization",
            "Light Utilization",
            "Medium Utilization",
            "No Upfront",
            "Partial Upfront",
        ]
    ] = Field(default=None, alias="OfferingType")


class DescribeRouteTablesRequestDescribeRouteTablesPaginateModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    route_table_ids: Optional[Sequence[str]] = Field(
        default=None, alias="RouteTableIds"
    )
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeRouteTablesRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    route_table_ids: Optional[Sequence[str]] = Field(
        default=None, alias="RouteTableIds"
    )
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")


class DescribeSecurityGroupRulesRequestDescribeSecurityGroupRulesPaginateModel(
    BaseModel
):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    security_group_rule_ids: Optional[Sequence[str]] = Field(
        default=None, alias="SecurityGroupRuleIds"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeSecurityGroupRulesRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    security_group_rule_ids: Optional[Sequence[str]] = Field(
        default=None, alias="SecurityGroupRuleIds"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")


class DescribeSecurityGroupsRequestDescribeSecurityGroupsPaginateModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    group_ids: Optional[Sequence[str]] = Field(default=None, alias="GroupIds")
    group_names: Optional[Sequence[str]] = Field(default=None, alias="GroupNames")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeSecurityGroupsRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    group_ids: Optional[Sequence[str]] = Field(default=None, alias="GroupIds")
    group_names: Optional[Sequence[str]] = Field(default=None, alias="GroupNames")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")


class DescribeSnapshotTierStatusRequestDescribeSnapshotTierStatusPaginateModel(
    BaseModel
):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeSnapshotTierStatusRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")


class DescribeSnapshotsRequestDescribeSnapshotsPaginateModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    owner_ids: Optional[Sequence[str]] = Field(default=None, alias="OwnerIds")
    restorable_by_user_ids: Optional[Sequence[str]] = Field(
        default=None, alias="RestorableByUserIds"
    )
    snapshot_ids: Optional[Sequence[str]] = Field(default=None, alias="SnapshotIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeSnapshotsRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    owner_ids: Optional[Sequence[str]] = Field(default=None, alias="OwnerIds")
    restorable_by_user_ids: Optional[Sequence[str]] = Field(
        default=None, alias="RestorableByUserIds"
    )
    snapshot_ids: Optional[Sequence[str]] = Field(default=None, alias="SnapshotIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeSpotInstanceRequestsRequestDescribeSpotInstanceRequestsPaginateModel(
    BaseModel
):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    spot_instance_request_ids: Optional[Sequence[str]] = Field(
        default=None, alias="SpotInstanceRequestIds"
    )
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeSpotInstanceRequestsRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    spot_instance_request_ids: Optional[Sequence[str]] = Field(
        default=None, alias="SpotInstanceRequestIds"
    )
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")


class DescribeSpotPriceHistoryRequestDescribeSpotPriceHistoryPaginateModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    end_time: Optional[Union[datetime, str]] = Field(default=None, alias="EndTime")
    instance_types: Optional[
        Sequence[
            Literal[
                "a1.2xlarge",
                "a1.4xlarge",
                "a1.large",
                "a1.medium",
                "a1.metal",
                "a1.xlarge",
                "c1.medium",
                "c1.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c3.large",
                "c3.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "c4.large",
                "c4.xlarge",
                "c5.12xlarge",
                "c5.18xlarge",
                "c5.24xlarge",
                "c5.2xlarge",
                "c5.4xlarge",
                "c5.9xlarge",
                "c5.large",
                "c5.metal",
                "c5.xlarge",
                "c5a.12xlarge",
                "c5a.16xlarge",
                "c5a.24xlarge",
                "c5a.2xlarge",
                "c5a.4xlarge",
                "c5a.8xlarge",
                "c5a.large",
                "c5a.xlarge",
                "c5ad.12xlarge",
                "c5ad.16xlarge",
                "c5ad.24xlarge",
                "c5ad.2xlarge",
                "c5ad.4xlarge",
                "c5ad.8xlarge",
                "c5ad.large",
                "c5ad.xlarge",
                "c5d.12xlarge",
                "c5d.18xlarge",
                "c5d.24xlarge",
                "c5d.2xlarge",
                "c5d.4xlarge",
                "c5d.9xlarge",
                "c5d.large",
                "c5d.metal",
                "c5d.xlarge",
                "c5n.18xlarge",
                "c5n.2xlarge",
                "c5n.4xlarge",
                "c5n.9xlarge",
                "c5n.large",
                "c5n.metal",
                "c5n.xlarge",
                "c6a.12xlarge",
                "c6a.16xlarge",
                "c6a.24xlarge",
                "c6a.2xlarge",
                "c6a.32xlarge",
                "c6a.48xlarge",
                "c6a.4xlarge",
                "c6a.8xlarge",
                "c6a.large",
                "c6a.metal",
                "c6a.xlarge",
                "c6g.12xlarge",
                "c6g.16xlarge",
                "c6g.2xlarge",
                "c6g.4xlarge",
                "c6g.8xlarge",
                "c6g.large",
                "c6g.medium",
                "c6g.metal",
                "c6g.xlarge",
                "c6gd.12xlarge",
                "c6gd.16xlarge",
                "c6gd.2xlarge",
                "c6gd.4xlarge",
                "c6gd.8xlarge",
                "c6gd.large",
                "c6gd.medium",
                "c6gd.metal",
                "c6gd.xlarge",
                "c6gn.12xlarge",
                "c6gn.16xlarge",
                "c6gn.2xlarge",
                "c6gn.4xlarge",
                "c6gn.8xlarge",
                "c6gn.large",
                "c6gn.medium",
                "c6gn.xlarge",
                "c6i.12xlarge",
                "c6i.16xlarge",
                "c6i.24xlarge",
                "c6i.2xlarge",
                "c6i.32xlarge",
                "c6i.4xlarge",
                "c6i.8xlarge",
                "c6i.large",
                "c6i.metal",
                "c6i.xlarge",
                "c6id.12xlarge",
                "c6id.16xlarge",
                "c6id.24xlarge",
                "c6id.2xlarge",
                "c6id.32xlarge",
                "c6id.4xlarge",
                "c6id.8xlarge",
                "c6id.large",
                "c6id.metal",
                "c6id.xlarge",
                "c6in.12xlarge",
                "c6in.16xlarge",
                "c6in.24xlarge",
                "c6in.2xlarge",
                "c6in.32xlarge",
                "c6in.4xlarge",
                "c6in.8xlarge",
                "c6in.large",
                "c6in.xlarge",
                "c7g.12xlarge",
                "c7g.16xlarge",
                "c7g.2xlarge",
                "c7g.4xlarge",
                "c7g.8xlarge",
                "c7g.large",
                "c7g.medium",
                "c7g.xlarge",
                "cc1.4xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge",
                "cr1.8xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "d2.xlarge",
                "d3.2xlarge",
                "d3.4xlarge",
                "d3.8xlarge",
                "d3.xlarge",
                "d3en.12xlarge",
                "d3en.2xlarge",
                "d3en.4xlarge",
                "d3en.6xlarge",
                "d3en.8xlarge",
                "d3en.xlarge",
                "dl1.24xlarge",
                "f1.16xlarge",
                "f1.2xlarge",
                "f1.4xlarge",
                "g2.2xlarge",
                "g2.8xlarge",
                "g3.16xlarge",
                "g3.4xlarge",
                "g3.8xlarge",
                "g3s.xlarge",
                "g4ad.16xlarge",
                "g4ad.2xlarge",
                "g4ad.4xlarge",
                "g4ad.8xlarge",
                "g4ad.xlarge",
                "g4dn.12xlarge",
                "g4dn.16xlarge",
                "g4dn.2xlarge",
                "g4dn.4xlarge",
                "g4dn.8xlarge",
                "g4dn.metal",
                "g4dn.xlarge",
                "g5.12xlarge",
                "g5.16xlarge",
                "g5.24xlarge",
                "g5.2xlarge",
                "g5.48xlarge",
                "g5.4xlarge",
                "g5.8xlarge",
                "g5.xlarge",
                "g5g.16xlarge",
                "g5g.2xlarge",
                "g5g.4xlarge",
                "g5g.8xlarge",
                "g5g.metal",
                "g5g.xlarge",
                "h1.16xlarge",
                "h1.2xlarge",
                "h1.4xlarge",
                "h1.8xlarge",
                "hi1.4xlarge",
                "hpc6a.48xlarge",
                "hpc6id.32xlarge",
                "hs1.8xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "i2.xlarge",
                "i3.16xlarge",
                "i3.2xlarge",
                "i3.4xlarge",
                "i3.8xlarge",
                "i3.large",
                "i3.metal",
                "i3.xlarge",
                "i3en.12xlarge",
                "i3en.24xlarge",
                "i3en.2xlarge",
                "i3en.3xlarge",
                "i3en.6xlarge",
                "i3en.large",
                "i3en.metal",
                "i3en.xlarge",
                "i4i.16xlarge",
                "i4i.2xlarge",
                "i4i.32xlarge",
                "i4i.4xlarge",
                "i4i.8xlarge",
                "i4i.large",
                "i4i.metal",
                "i4i.xlarge",
                "im4gn.16xlarge",
                "im4gn.2xlarge",
                "im4gn.4xlarge",
                "im4gn.8xlarge",
                "im4gn.large",
                "im4gn.xlarge",
                "inf1.24xlarge",
                "inf1.2xlarge",
                "inf1.6xlarge",
                "inf1.xlarge",
                "is4gen.2xlarge",
                "is4gen.4xlarge",
                "is4gen.8xlarge",
                "is4gen.large",
                "is4gen.medium",
                "is4gen.xlarge",
                "m1.large",
                "m1.medium",
                "m1.small",
                "m1.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m2.xlarge",
                "m3.2xlarge",
                "m3.large",
                "m3.medium",
                "m3.xlarge",
                "m4.10xlarge",
                "m4.16xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.large",
                "m4.xlarge",
                "m5.12xlarge",
                "m5.16xlarge",
                "m5.24xlarge",
                "m5.2xlarge",
                "m5.4xlarge",
                "m5.8xlarge",
                "m5.large",
                "m5.metal",
                "m5.xlarge",
                "m5a.12xlarge",
                "m5a.16xlarge",
                "m5a.24xlarge",
                "m5a.2xlarge",
                "m5a.4xlarge",
                "m5a.8xlarge",
                "m5a.large",
                "m5a.xlarge",
                "m5ad.12xlarge",
                "m5ad.16xlarge",
                "m5ad.24xlarge",
                "m5ad.2xlarge",
                "m5ad.4xlarge",
                "m5ad.8xlarge",
                "m5ad.large",
                "m5ad.xlarge",
                "m5d.12xlarge",
                "m5d.16xlarge",
                "m5d.24xlarge",
                "m5d.2xlarge",
                "m5d.4xlarge",
                "m5d.8xlarge",
                "m5d.large",
                "m5d.metal",
                "m5d.xlarge",
                "m5dn.12xlarge",
                "m5dn.16xlarge",
                "m5dn.24xlarge",
                "m5dn.2xlarge",
                "m5dn.4xlarge",
                "m5dn.8xlarge",
                "m5dn.large",
                "m5dn.metal",
                "m5dn.xlarge",
                "m5n.12xlarge",
                "m5n.16xlarge",
                "m5n.24xlarge",
                "m5n.2xlarge",
                "m5n.4xlarge",
                "m5n.8xlarge",
                "m5n.large",
                "m5n.metal",
                "m5n.xlarge",
                "m5zn.12xlarge",
                "m5zn.2xlarge",
                "m5zn.3xlarge",
                "m5zn.6xlarge",
                "m5zn.large",
                "m5zn.metal",
                "m5zn.xlarge",
                "m6a.12xlarge",
                "m6a.16xlarge",
                "m6a.24xlarge",
                "m6a.2xlarge",
                "m6a.32xlarge",
                "m6a.48xlarge",
                "m6a.4xlarge",
                "m6a.8xlarge",
                "m6a.large",
                "m6a.metal",
                "m6a.xlarge",
                "m6g.12xlarge",
                "m6g.16xlarge",
                "m6g.2xlarge",
                "m6g.4xlarge",
                "m6g.8xlarge",
                "m6g.large",
                "m6g.medium",
                "m6g.metal",
                "m6g.xlarge",
                "m6gd.12xlarge",
                "m6gd.16xlarge",
                "m6gd.2xlarge",
                "m6gd.4xlarge",
                "m6gd.8xlarge",
                "m6gd.large",
                "m6gd.medium",
                "m6gd.metal",
                "m6gd.xlarge",
                "m6i.12xlarge",
                "m6i.16xlarge",
                "m6i.24xlarge",
                "m6i.2xlarge",
                "m6i.32xlarge",
                "m6i.4xlarge",
                "m6i.8xlarge",
                "m6i.large",
                "m6i.metal",
                "m6i.xlarge",
                "m6id.12xlarge",
                "m6id.16xlarge",
                "m6id.24xlarge",
                "m6id.2xlarge",
                "m6id.32xlarge",
                "m6id.4xlarge",
                "m6id.8xlarge",
                "m6id.large",
                "m6id.metal",
                "m6id.xlarge",
                "m6idn.12xlarge",
                "m6idn.16xlarge",
                "m6idn.24xlarge",
                "m6idn.2xlarge",
                "m6idn.32xlarge",
                "m6idn.4xlarge",
                "m6idn.8xlarge",
                "m6idn.large",
                "m6idn.xlarge",
                "m6in.12xlarge",
                "m6in.16xlarge",
                "m6in.24xlarge",
                "m6in.2xlarge",
                "m6in.32xlarge",
                "m6in.4xlarge",
                "m6in.8xlarge",
                "m6in.large",
                "m6in.xlarge",
                "mac1.metal",
                "mac2.metal",
                "p2.16xlarge",
                "p2.8xlarge",
                "p2.xlarge",
                "p3.16xlarge",
                "p3.2xlarge",
                "p3.8xlarge",
                "p3dn.24xlarge",
                "p4d.24xlarge",
                "p4de.24xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "r3.large",
                "r3.xlarge",
                "r4.16xlarge",
                "r4.2xlarge",
                "r4.4xlarge",
                "r4.8xlarge",
                "r4.large",
                "r4.xlarge",
                "r5.12xlarge",
                "r5.16xlarge",
                "r5.24xlarge",
                "r5.2xlarge",
                "r5.4xlarge",
                "r5.8xlarge",
                "r5.large",
                "r5.metal",
                "r5.xlarge",
                "r5a.12xlarge",
                "r5a.16xlarge",
                "r5a.24xlarge",
                "r5a.2xlarge",
                "r5a.4xlarge",
                "r5a.8xlarge",
                "r5a.large",
                "r5a.xlarge",
                "r5ad.12xlarge",
                "r5ad.16xlarge",
                "r5ad.24xlarge",
                "r5ad.2xlarge",
                "r5ad.4xlarge",
                "r5ad.8xlarge",
                "r5ad.large",
                "r5ad.xlarge",
                "r5b.12xlarge",
                "r5b.16xlarge",
                "r5b.24xlarge",
                "r5b.2xlarge",
                "r5b.4xlarge",
                "r5b.8xlarge",
                "r5b.large",
                "r5b.metal",
                "r5b.xlarge",
                "r5d.12xlarge",
                "r5d.16xlarge",
                "r5d.24xlarge",
                "r5d.2xlarge",
                "r5d.4xlarge",
                "r5d.8xlarge",
                "r5d.large",
                "r5d.metal",
                "r5d.xlarge",
                "r5dn.12xlarge",
                "r5dn.16xlarge",
                "r5dn.24xlarge",
                "r5dn.2xlarge",
                "r5dn.4xlarge",
                "r5dn.8xlarge",
                "r5dn.large",
                "r5dn.metal",
                "r5dn.xlarge",
                "r5n.12xlarge",
                "r5n.16xlarge",
                "r5n.24xlarge",
                "r5n.2xlarge",
                "r5n.4xlarge",
                "r5n.8xlarge",
                "r5n.large",
                "r5n.metal",
                "r5n.xlarge",
                "r6a.12xlarge",
                "r6a.16xlarge",
                "r6a.24xlarge",
                "r6a.2xlarge",
                "r6a.32xlarge",
                "r6a.48xlarge",
                "r6a.4xlarge",
                "r6a.8xlarge",
                "r6a.large",
                "r6a.metal",
                "r6a.xlarge",
                "r6g.12xlarge",
                "r6g.16xlarge",
                "r6g.2xlarge",
                "r6g.4xlarge",
                "r6g.8xlarge",
                "r6g.large",
                "r6g.medium",
                "r6g.metal",
                "r6g.xlarge",
                "r6gd.12xlarge",
                "r6gd.16xlarge",
                "r6gd.2xlarge",
                "r6gd.4xlarge",
                "r6gd.8xlarge",
                "r6gd.large",
                "r6gd.medium",
                "r6gd.metal",
                "r6gd.xlarge",
                "r6i.12xlarge",
                "r6i.16xlarge",
                "r6i.24xlarge",
                "r6i.2xlarge",
                "r6i.32xlarge",
                "r6i.4xlarge",
                "r6i.8xlarge",
                "r6i.large",
                "r6i.metal",
                "r6i.xlarge",
                "r6id.12xlarge",
                "r6id.16xlarge",
                "r6id.24xlarge",
                "r6id.2xlarge",
                "r6id.32xlarge",
                "r6id.4xlarge",
                "r6id.8xlarge",
                "r6id.large",
                "r6id.metal",
                "r6id.xlarge",
                "r6idn.12xlarge",
                "r6idn.16xlarge",
                "r6idn.24xlarge",
                "r6idn.2xlarge",
                "r6idn.32xlarge",
                "r6idn.4xlarge",
                "r6idn.8xlarge",
                "r6idn.large",
                "r6idn.xlarge",
                "r6in.12xlarge",
                "r6in.16xlarge",
                "r6in.24xlarge",
                "r6in.2xlarge",
                "r6in.32xlarge",
                "r6in.4xlarge",
                "r6in.8xlarge",
                "r6in.large",
                "r6in.xlarge",
                "t1.micro",
                "t2.2xlarge",
                "t2.large",
                "t2.medium",
                "t2.micro",
                "t2.nano",
                "t2.small",
                "t2.xlarge",
                "t3.2xlarge",
                "t3.large",
                "t3.medium",
                "t3.micro",
                "t3.nano",
                "t3.small",
                "t3.xlarge",
                "t3a.2xlarge",
                "t3a.large",
                "t3a.medium",
                "t3a.micro",
                "t3a.nano",
                "t3a.small",
                "t3a.xlarge",
                "t4g.2xlarge",
                "t4g.large",
                "t4g.medium",
                "t4g.micro",
                "t4g.nano",
                "t4g.small",
                "t4g.xlarge",
                "trn1.2xlarge",
                "trn1.32xlarge",
                "u-12tb1.112xlarge",
                "u-12tb1.metal",
                "u-18tb1.112xlarge",
                "u-18tb1.metal",
                "u-24tb1.112xlarge",
                "u-24tb1.metal",
                "u-3tb1.56xlarge",
                "u-6tb1.112xlarge",
                "u-6tb1.56xlarge",
                "u-6tb1.metal",
                "u-9tb1.112xlarge",
                "u-9tb1.metal",
                "vt1.24xlarge",
                "vt1.3xlarge",
                "vt1.6xlarge",
                "x1.16xlarge",
                "x1.32xlarge",
                "x1e.16xlarge",
                "x1e.2xlarge",
                "x1e.32xlarge",
                "x1e.4xlarge",
                "x1e.8xlarge",
                "x1e.xlarge",
                "x2gd.12xlarge",
                "x2gd.16xlarge",
                "x2gd.2xlarge",
                "x2gd.4xlarge",
                "x2gd.8xlarge",
                "x2gd.large",
                "x2gd.medium",
                "x2gd.metal",
                "x2gd.xlarge",
                "x2idn.16xlarge",
                "x2idn.24xlarge",
                "x2idn.32xlarge",
                "x2idn.metal",
                "x2iedn.16xlarge",
                "x2iedn.24xlarge",
                "x2iedn.2xlarge",
                "x2iedn.32xlarge",
                "x2iedn.4xlarge",
                "x2iedn.8xlarge",
                "x2iedn.metal",
                "x2iedn.xlarge",
                "x2iezn.12xlarge",
                "x2iezn.2xlarge",
                "x2iezn.4xlarge",
                "x2iezn.6xlarge",
                "x2iezn.8xlarge",
                "x2iezn.metal",
                "z1d.12xlarge",
                "z1d.2xlarge",
                "z1d.3xlarge",
                "z1d.6xlarge",
                "z1d.large",
                "z1d.metal",
                "z1d.xlarge",
            ]
        ]
    ] = Field(default=None, alias="InstanceTypes")
    product_descriptions: Optional[Sequence[str]] = Field(
        default=None, alias="ProductDescriptions"
    )
    start_time: Optional[Union[datetime, str]] = Field(default=None, alias="StartTime")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeSpotPriceHistoryRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    end_time: Optional[Union[datetime, str]] = Field(default=None, alias="EndTime")
    instance_types: Optional[
        Sequence[
            Literal[
                "a1.2xlarge",
                "a1.4xlarge",
                "a1.large",
                "a1.medium",
                "a1.metal",
                "a1.xlarge",
                "c1.medium",
                "c1.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c3.large",
                "c3.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "c4.large",
                "c4.xlarge",
                "c5.12xlarge",
                "c5.18xlarge",
                "c5.24xlarge",
                "c5.2xlarge",
                "c5.4xlarge",
                "c5.9xlarge",
                "c5.large",
                "c5.metal",
                "c5.xlarge",
                "c5a.12xlarge",
                "c5a.16xlarge",
                "c5a.24xlarge",
                "c5a.2xlarge",
                "c5a.4xlarge",
                "c5a.8xlarge",
                "c5a.large",
                "c5a.xlarge",
                "c5ad.12xlarge",
                "c5ad.16xlarge",
                "c5ad.24xlarge",
                "c5ad.2xlarge",
                "c5ad.4xlarge",
                "c5ad.8xlarge",
                "c5ad.large",
                "c5ad.xlarge",
                "c5d.12xlarge",
                "c5d.18xlarge",
                "c5d.24xlarge",
                "c5d.2xlarge",
                "c5d.4xlarge",
                "c5d.9xlarge",
                "c5d.large",
                "c5d.metal",
                "c5d.xlarge",
                "c5n.18xlarge",
                "c5n.2xlarge",
                "c5n.4xlarge",
                "c5n.9xlarge",
                "c5n.large",
                "c5n.metal",
                "c5n.xlarge",
                "c6a.12xlarge",
                "c6a.16xlarge",
                "c6a.24xlarge",
                "c6a.2xlarge",
                "c6a.32xlarge",
                "c6a.48xlarge",
                "c6a.4xlarge",
                "c6a.8xlarge",
                "c6a.large",
                "c6a.metal",
                "c6a.xlarge",
                "c6g.12xlarge",
                "c6g.16xlarge",
                "c6g.2xlarge",
                "c6g.4xlarge",
                "c6g.8xlarge",
                "c6g.large",
                "c6g.medium",
                "c6g.metal",
                "c6g.xlarge",
                "c6gd.12xlarge",
                "c6gd.16xlarge",
                "c6gd.2xlarge",
                "c6gd.4xlarge",
                "c6gd.8xlarge",
                "c6gd.large",
                "c6gd.medium",
                "c6gd.metal",
                "c6gd.xlarge",
                "c6gn.12xlarge",
                "c6gn.16xlarge",
                "c6gn.2xlarge",
                "c6gn.4xlarge",
                "c6gn.8xlarge",
                "c6gn.large",
                "c6gn.medium",
                "c6gn.xlarge",
                "c6i.12xlarge",
                "c6i.16xlarge",
                "c6i.24xlarge",
                "c6i.2xlarge",
                "c6i.32xlarge",
                "c6i.4xlarge",
                "c6i.8xlarge",
                "c6i.large",
                "c6i.metal",
                "c6i.xlarge",
                "c6id.12xlarge",
                "c6id.16xlarge",
                "c6id.24xlarge",
                "c6id.2xlarge",
                "c6id.32xlarge",
                "c6id.4xlarge",
                "c6id.8xlarge",
                "c6id.large",
                "c6id.metal",
                "c6id.xlarge",
                "c6in.12xlarge",
                "c6in.16xlarge",
                "c6in.24xlarge",
                "c6in.2xlarge",
                "c6in.32xlarge",
                "c6in.4xlarge",
                "c6in.8xlarge",
                "c6in.large",
                "c6in.xlarge",
                "c7g.12xlarge",
                "c7g.16xlarge",
                "c7g.2xlarge",
                "c7g.4xlarge",
                "c7g.8xlarge",
                "c7g.large",
                "c7g.medium",
                "c7g.xlarge",
                "cc1.4xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge",
                "cr1.8xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "d2.xlarge",
                "d3.2xlarge",
                "d3.4xlarge",
                "d3.8xlarge",
                "d3.xlarge",
                "d3en.12xlarge",
                "d3en.2xlarge",
                "d3en.4xlarge",
                "d3en.6xlarge",
                "d3en.8xlarge",
                "d3en.xlarge",
                "dl1.24xlarge",
                "f1.16xlarge",
                "f1.2xlarge",
                "f1.4xlarge",
                "g2.2xlarge",
                "g2.8xlarge",
                "g3.16xlarge",
                "g3.4xlarge",
                "g3.8xlarge",
                "g3s.xlarge",
                "g4ad.16xlarge",
                "g4ad.2xlarge",
                "g4ad.4xlarge",
                "g4ad.8xlarge",
                "g4ad.xlarge",
                "g4dn.12xlarge",
                "g4dn.16xlarge",
                "g4dn.2xlarge",
                "g4dn.4xlarge",
                "g4dn.8xlarge",
                "g4dn.metal",
                "g4dn.xlarge",
                "g5.12xlarge",
                "g5.16xlarge",
                "g5.24xlarge",
                "g5.2xlarge",
                "g5.48xlarge",
                "g5.4xlarge",
                "g5.8xlarge",
                "g5.xlarge",
                "g5g.16xlarge",
                "g5g.2xlarge",
                "g5g.4xlarge",
                "g5g.8xlarge",
                "g5g.metal",
                "g5g.xlarge",
                "h1.16xlarge",
                "h1.2xlarge",
                "h1.4xlarge",
                "h1.8xlarge",
                "hi1.4xlarge",
                "hpc6a.48xlarge",
                "hpc6id.32xlarge",
                "hs1.8xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "i2.xlarge",
                "i3.16xlarge",
                "i3.2xlarge",
                "i3.4xlarge",
                "i3.8xlarge",
                "i3.large",
                "i3.metal",
                "i3.xlarge",
                "i3en.12xlarge",
                "i3en.24xlarge",
                "i3en.2xlarge",
                "i3en.3xlarge",
                "i3en.6xlarge",
                "i3en.large",
                "i3en.metal",
                "i3en.xlarge",
                "i4i.16xlarge",
                "i4i.2xlarge",
                "i4i.32xlarge",
                "i4i.4xlarge",
                "i4i.8xlarge",
                "i4i.large",
                "i4i.metal",
                "i4i.xlarge",
                "im4gn.16xlarge",
                "im4gn.2xlarge",
                "im4gn.4xlarge",
                "im4gn.8xlarge",
                "im4gn.large",
                "im4gn.xlarge",
                "inf1.24xlarge",
                "inf1.2xlarge",
                "inf1.6xlarge",
                "inf1.xlarge",
                "is4gen.2xlarge",
                "is4gen.4xlarge",
                "is4gen.8xlarge",
                "is4gen.large",
                "is4gen.medium",
                "is4gen.xlarge",
                "m1.large",
                "m1.medium",
                "m1.small",
                "m1.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m2.xlarge",
                "m3.2xlarge",
                "m3.large",
                "m3.medium",
                "m3.xlarge",
                "m4.10xlarge",
                "m4.16xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.large",
                "m4.xlarge",
                "m5.12xlarge",
                "m5.16xlarge",
                "m5.24xlarge",
                "m5.2xlarge",
                "m5.4xlarge",
                "m5.8xlarge",
                "m5.large",
                "m5.metal",
                "m5.xlarge",
                "m5a.12xlarge",
                "m5a.16xlarge",
                "m5a.24xlarge",
                "m5a.2xlarge",
                "m5a.4xlarge",
                "m5a.8xlarge",
                "m5a.large",
                "m5a.xlarge",
                "m5ad.12xlarge",
                "m5ad.16xlarge",
                "m5ad.24xlarge",
                "m5ad.2xlarge",
                "m5ad.4xlarge",
                "m5ad.8xlarge",
                "m5ad.large",
                "m5ad.xlarge",
                "m5d.12xlarge",
                "m5d.16xlarge",
                "m5d.24xlarge",
                "m5d.2xlarge",
                "m5d.4xlarge",
                "m5d.8xlarge",
                "m5d.large",
                "m5d.metal",
                "m5d.xlarge",
                "m5dn.12xlarge",
                "m5dn.16xlarge",
                "m5dn.24xlarge",
                "m5dn.2xlarge",
                "m5dn.4xlarge",
                "m5dn.8xlarge",
                "m5dn.large",
                "m5dn.metal",
                "m5dn.xlarge",
                "m5n.12xlarge",
                "m5n.16xlarge",
                "m5n.24xlarge",
                "m5n.2xlarge",
                "m5n.4xlarge",
                "m5n.8xlarge",
                "m5n.large",
                "m5n.metal",
                "m5n.xlarge",
                "m5zn.12xlarge",
                "m5zn.2xlarge",
                "m5zn.3xlarge",
                "m5zn.6xlarge",
                "m5zn.large",
                "m5zn.metal",
                "m5zn.xlarge",
                "m6a.12xlarge",
                "m6a.16xlarge",
                "m6a.24xlarge",
                "m6a.2xlarge",
                "m6a.32xlarge",
                "m6a.48xlarge",
                "m6a.4xlarge",
                "m6a.8xlarge",
                "m6a.large",
                "m6a.metal",
                "m6a.xlarge",
                "m6g.12xlarge",
                "m6g.16xlarge",
                "m6g.2xlarge",
                "m6g.4xlarge",
                "m6g.8xlarge",
                "m6g.large",
                "m6g.medium",
                "m6g.metal",
                "m6g.xlarge",
                "m6gd.12xlarge",
                "m6gd.16xlarge",
                "m6gd.2xlarge",
                "m6gd.4xlarge",
                "m6gd.8xlarge",
                "m6gd.large",
                "m6gd.medium",
                "m6gd.metal",
                "m6gd.xlarge",
                "m6i.12xlarge",
                "m6i.16xlarge",
                "m6i.24xlarge",
                "m6i.2xlarge",
                "m6i.32xlarge",
                "m6i.4xlarge",
                "m6i.8xlarge",
                "m6i.large",
                "m6i.metal",
                "m6i.xlarge",
                "m6id.12xlarge",
                "m6id.16xlarge",
                "m6id.24xlarge",
                "m6id.2xlarge",
                "m6id.32xlarge",
                "m6id.4xlarge",
                "m6id.8xlarge",
                "m6id.large",
                "m6id.metal",
                "m6id.xlarge",
                "m6idn.12xlarge",
                "m6idn.16xlarge",
                "m6idn.24xlarge",
                "m6idn.2xlarge",
                "m6idn.32xlarge",
                "m6idn.4xlarge",
                "m6idn.8xlarge",
                "m6idn.large",
                "m6idn.xlarge",
                "m6in.12xlarge",
                "m6in.16xlarge",
                "m6in.24xlarge",
                "m6in.2xlarge",
                "m6in.32xlarge",
                "m6in.4xlarge",
                "m6in.8xlarge",
                "m6in.large",
                "m6in.xlarge",
                "mac1.metal",
                "mac2.metal",
                "p2.16xlarge",
                "p2.8xlarge",
                "p2.xlarge",
                "p3.16xlarge",
                "p3.2xlarge",
                "p3.8xlarge",
                "p3dn.24xlarge",
                "p4d.24xlarge",
                "p4de.24xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "r3.large",
                "r3.xlarge",
                "r4.16xlarge",
                "r4.2xlarge",
                "r4.4xlarge",
                "r4.8xlarge",
                "r4.large",
                "r4.xlarge",
                "r5.12xlarge",
                "r5.16xlarge",
                "r5.24xlarge",
                "r5.2xlarge",
                "r5.4xlarge",
                "r5.8xlarge",
                "r5.large",
                "r5.metal",
                "r5.xlarge",
                "r5a.12xlarge",
                "r5a.16xlarge",
                "r5a.24xlarge",
                "r5a.2xlarge",
                "r5a.4xlarge",
                "r5a.8xlarge",
                "r5a.large",
                "r5a.xlarge",
                "r5ad.12xlarge",
                "r5ad.16xlarge",
                "r5ad.24xlarge",
                "r5ad.2xlarge",
                "r5ad.4xlarge",
                "r5ad.8xlarge",
                "r5ad.large",
                "r5ad.xlarge",
                "r5b.12xlarge",
                "r5b.16xlarge",
                "r5b.24xlarge",
                "r5b.2xlarge",
                "r5b.4xlarge",
                "r5b.8xlarge",
                "r5b.large",
                "r5b.metal",
                "r5b.xlarge",
                "r5d.12xlarge",
                "r5d.16xlarge",
                "r5d.24xlarge",
                "r5d.2xlarge",
                "r5d.4xlarge",
                "r5d.8xlarge",
                "r5d.large",
                "r5d.metal",
                "r5d.xlarge",
                "r5dn.12xlarge",
                "r5dn.16xlarge",
                "r5dn.24xlarge",
                "r5dn.2xlarge",
                "r5dn.4xlarge",
                "r5dn.8xlarge",
                "r5dn.large",
                "r5dn.metal",
                "r5dn.xlarge",
                "r5n.12xlarge",
                "r5n.16xlarge",
                "r5n.24xlarge",
                "r5n.2xlarge",
                "r5n.4xlarge",
                "r5n.8xlarge",
                "r5n.large",
                "r5n.metal",
                "r5n.xlarge",
                "r6a.12xlarge",
                "r6a.16xlarge",
                "r6a.24xlarge",
                "r6a.2xlarge",
                "r6a.32xlarge",
                "r6a.48xlarge",
                "r6a.4xlarge",
                "r6a.8xlarge",
                "r6a.large",
                "r6a.metal",
                "r6a.xlarge",
                "r6g.12xlarge",
                "r6g.16xlarge",
                "r6g.2xlarge",
                "r6g.4xlarge",
                "r6g.8xlarge",
                "r6g.large",
                "r6g.medium",
                "r6g.metal",
                "r6g.xlarge",
                "r6gd.12xlarge",
                "r6gd.16xlarge",
                "r6gd.2xlarge",
                "r6gd.4xlarge",
                "r6gd.8xlarge",
                "r6gd.large",
                "r6gd.medium",
                "r6gd.metal",
                "r6gd.xlarge",
                "r6i.12xlarge",
                "r6i.16xlarge",
                "r6i.24xlarge",
                "r6i.2xlarge",
                "r6i.32xlarge",
                "r6i.4xlarge",
                "r6i.8xlarge",
                "r6i.large",
                "r6i.metal",
                "r6i.xlarge",
                "r6id.12xlarge",
                "r6id.16xlarge",
                "r6id.24xlarge",
                "r6id.2xlarge",
                "r6id.32xlarge",
                "r6id.4xlarge",
                "r6id.8xlarge",
                "r6id.large",
                "r6id.metal",
                "r6id.xlarge",
                "r6idn.12xlarge",
                "r6idn.16xlarge",
                "r6idn.24xlarge",
                "r6idn.2xlarge",
                "r6idn.32xlarge",
                "r6idn.4xlarge",
                "r6idn.8xlarge",
                "r6idn.large",
                "r6idn.xlarge",
                "r6in.12xlarge",
                "r6in.16xlarge",
                "r6in.24xlarge",
                "r6in.2xlarge",
                "r6in.32xlarge",
                "r6in.4xlarge",
                "r6in.8xlarge",
                "r6in.large",
                "r6in.xlarge",
                "t1.micro",
                "t2.2xlarge",
                "t2.large",
                "t2.medium",
                "t2.micro",
                "t2.nano",
                "t2.small",
                "t2.xlarge",
                "t3.2xlarge",
                "t3.large",
                "t3.medium",
                "t3.micro",
                "t3.nano",
                "t3.small",
                "t3.xlarge",
                "t3a.2xlarge",
                "t3a.large",
                "t3a.medium",
                "t3a.micro",
                "t3a.nano",
                "t3a.small",
                "t3a.xlarge",
                "t4g.2xlarge",
                "t4g.large",
                "t4g.medium",
                "t4g.micro",
                "t4g.nano",
                "t4g.small",
                "t4g.xlarge",
                "trn1.2xlarge",
                "trn1.32xlarge",
                "u-12tb1.112xlarge",
                "u-12tb1.metal",
                "u-18tb1.112xlarge",
                "u-18tb1.metal",
                "u-24tb1.112xlarge",
                "u-24tb1.metal",
                "u-3tb1.56xlarge",
                "u-6tb1.112xlarge",
                "u-6tb1.56xlarge",
                "u-6tb1.metal",
                "u-9tb1.112xlarge",
                "u-9tb1.metal",
                "vt1.24xlarge",
                "vt1.3xlarge",
                "vt1.6xlarge",
                "x1.16xlarge",
                "x1.32xlarge",
                "x1e.16xlarge",
                "x1e.2xlarge",
                "x1e.32xlarge",
                "x1e.4xlarge",
                "x1e.8xlarge",
                "x1e.xlarge",
                "x2gd.12xlarge",
                "x2gd.16xlarge",
                "x2gd.2xlarge",
                "x2gd.4xlarge",
                "x2gd.8xlarge",
                "x2gd.large",
                "x2gd.medium",
                "x2gd.metal",
                "x2gd.xlarge",
                "x2idn.16xlarge",
                "x2idn.24xlarge",
                "x2idn.32xlarge",
                "x2idn.metal",
                "x2iedn.16xlarge",
                "x2iedn.24xlarge",
                "x2iedn.2xlarge",
                "x2iedn.32xlarge",
                "x2iedn.4xlarge",
                "x2iedn.8xlarge",
                "x2iedn.metal",
                "x2iedn.xlarge",
                "x2iezn.12xlarge",
                "x2iezn.2xlarge",
                "x2iezn.4xlarge",
                "x2iezn.6xlarge",
                "x2iezn.8xlarge",
                "x2iezn.metal",
                "z1d.12xlarge",
                "z1d.2xlarge",
                "z1d.3xlarge",
                "z1d.6xlarge",
                "z1d.large",
                "z1d.metal",
                "z1d.xlarge",
            ]
        ]
    ] = Field(default=None, alias="InstanceTypes")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    product_descriptions: Optional[Sequence[str]] = Field(
        default=None, alias="ProductDescriptions"
    )
    start_time: Optional[Union[datetime, str]] = Field(default=None, alias="StartTime")


class DescribeStoreImageTasksRequestDescribeStoreImageTasksPaginateModel(BaseModel):
    image_ids: Optional[Sequence[str]] = Field(default=None, alias="ImageIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeStoreImageTasksRequestModel(BaseModel):
    image_ids: Optional[Sequence[str]] = Field(default=None, alias="ImageIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")


class DescribeSubnetsRequestDescribeSubnetsPaginateModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    subnet_ids: Optional[Sequence[str]] = Field(default=None, alias="SubnetIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeSubnetsRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    subnet_ids: Optional[Sequence[str]] = Field(default=None, alias="SubnetIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")


class DescribeTagsRequestDescribeTagsPaginateModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeTagsRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeTrafficMirrorFiltersRequestDescribeTrafficMirrorFiltersPaginateModel(
    BaseModel
):
    traffic_mirror_filter_ids: Optional[Sequence[str]] = Field(
        default=None, alias="TrafficMirrorFilterIds"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeTrafficMirrorFiltersRequestModel(BaseModel):
    traffic_mirror_filter_ids: Optional[Sequence[str]] = Field(
        default=None, alias="TrafficMirrorFilterIds"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeTrafficMirrorSessionsRequestDescribeTrafficMirrorSessionsPaginateModel(
    BaseModel
):
    traffic_mirror_session_ids: Optional[Sequence[str]] = Field(
        default=None, alias="TrafficMirrorSessionIds"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeTrafficMirrorSessionsRequestModel(BaseModel):
    traffic_mirror_session_ids: Optional[Sequence[str]] = Field(
        default=None, alias="TrafficMirrorSessionIds"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeTrafficMirrorTargetsRequestDescribeTrafficMirrorTargetsPaginateModel(
    BaseModel
):
    traffic_mirror_target_ids: Optional[Sequence[str]] = Field(
        default=None, alias="TrafficMirrorTargetIds"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeTrafficMirrorTargetsRequestModel(BaseModel):
    traffic_mirror_target_ids: Optional[Sequence[str]] = Field(
        default=None, alias="TrafficMirrorTargetIds"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeTransitGatewayAttachmentsRequestDescribeTransitGatewayAttachmentsPaginateModel(
    BaseModel
):
    transit_gateway_attachment_ids: Optional[Sequence[str]] = Field(
        default=None, alias="TransitGatewayAttachmentIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeTransitGatewayAttachmentsRequestModel(BaseModel):
    transit_gateway_attachment_ids: Optional[Sequence[str]] = Field(
        default=None, alias="TransitGatewayAttachmentIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeTransitGatewayConnectPeersRequestDescribeTransitGatewayConnectPeersPaginateModel(
    BaseModel
):
    transit_gateway_connect_peer_ids: Optional[Sequence[str]] = Field(
        default=None, alias="TransitGatewayConnectPeerIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeTransitGatewayConnectPeersRequestModel(BaseModel):
    transit_gateway_connect_peer_ids: Optional[Sequence[str]] = Field(
        default=None, alias="TransitGatewayConnectPeerIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeTransitGatewayConnectsRequestDescribeTransitGatewayConnectsPaginateModel(
    BaseModel
):
    transit_gateway_attachment_ids: Optional[Sequence[str]] = Field(
        default=None, alias="TransitGatewayAttachmentIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeTransitGatewayConnectsRequestModel(BaseModel):
    transit_gateway_attachment_ids: Optional[Sequence[str]] = Field(
        default=None, alias="TransitGatewayAttachmentIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeTransitGatewayMulticastDomainsRequestDescribeTransitGatewayMulticastDomainsPaginateModel(
    BaseModel
):
    transit_gateway_multicast_domain_ids: Optional[Sequence[str]] = Field(
        default=None, alias="TransitGatewayMulticastDomainIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeTransitGatewayMulticastDomainsRequestModel(BaseModel):
    transit_gateway_multicast_domain_ids: Optional[Sequence[str]] = Field(
        default=None, alias="TransitGatewayMulticastDomainIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeTransitGatewayPeeringAttachmentsRequestDescribeTransitGatewayPeeringAttachmentsPaginateModel(
    BaseModel
):
    transit_gateway_attachment_ids: Optional[Sequence[str]] = Field(
        default=None, alias="TransitGatewayAttachmentIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeTransitGatewayPeeringAttachmentsRequestModel(BaseModel):
    transit_gateway_attachment_ids: Optional[Sequence[str]] = Field(
        default=None, alias="TransitGatewayAttachmentIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeTransitGatewayPolicyTablesRequestDescribeTransitGatewayPolicyTablesPaginateModel(
    BaseModel
):
    transit_gateway_policy_table_ids: Optional[Sequence[str]] = Field(
        default=None, alias="TransitGatewayPolicyTableIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeTransitGatewayPolicyTablesRequestModel(BaseModel):
    transit_gateway_policy_table_ids: Optional[Sequence[str]] = Field(
        default=None, alias="TransitGatewayPolicyTableIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeTransitGatewayRouteTableAnnouncementsRequestDescribeTransitGatewayRouteTableAnnouncementsPaginateModel(
    BaseModel
):
    transit_gateway_route_table_announcement_ids: Optional[Sequence[str]] = Field(
        default=None, alias="TransitGatewayRouteTableAnnouncementIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeTransitGatewayRouteTableAnnouncementsRequestModel(BaseModel):
    transit_gateway_route_table_announcement_ids: Optional[Sequence[str]] = Field(
        default=None, alias="TransitGatewayRouteTableAnnouncementIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeTransitGatewayRouteTablesRequestDescribeTransitGatewayRouteTablesPaginateModel(
    BaseModel
):
    transit_gateway_route_table_ids: Optional[Sequence[str]] = Field(
        default=None, alias="TransitGatewayRouteTableIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeTransitGatewayRouteTablesRequestModel(BaseModel):
    transit_gateway_route_table_ids: Optional[Sequence[str]] = Field(
        default=None, alias="TransitGatewayRouteTableIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeTransitGatewayVpcAttachmentsRequestDescribeTransitGatewayVpcAttachmentsPaginateModel(
    BaseModel
):
    transit_gateway_attachment_ids: Optional[Sequence[str]] = Field(
        default=None, alias="TransitGatewayAttachmentIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeTransitGatewayVpcAttachmentsRequestModel(BaseModel):
    transit_gateway_attachment_ids: Optional[Sequence[str]] = Field(
        default=None, alias="TransitGatewayAttachmentIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeTransitGatewaysRequestDescribeTransitGatewaysPaginateModel(BaseModel):
    transit_gateway_ids: Optional[Sequence[str]] = Field(
        default=None, alias="TransitGatewayIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeTransitGatewaysRequestModel(BaseModel):
    transit_gateway_ids: Optional[Sequence[str]] = Field(
        default=None, alias="TransitGatewayIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeTrunkInterfaceAssociationsRequestDescribeTrunkInterfaceAssociationsPaginateModel(
    BaseModel
):
    association_ids: Optional[Sequence[str]] = Field(
        default=None, alias="AssociationIds"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeTrunkInterfaceAssociationsRequestModel(BaseModel):
    association_ids: Optional[Sequence[str]] = Field(
        default=None, alias="AssociationIds"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")


class DescribeVerifiedAccessEndpointsRequestDescribeVerifiedAccessEndpointsPaginateModel(
    BaseModel
):
    verified_access_endpoint_ids: Optional[Sequence[str]] = Field(
        default=None, alias="VerifiedAccessEndpointIds"
    )
    verified_access_instance_id: Optional[str] = Field(
        default=None, alias="VerifiedAccessInstanceId"
    )
    verified_access_group_id: Optional[str] = Field(
        default=None, alias="VerifiedAccessGroupId"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeVerifiedAccessEndpointsRequestModel(BaseModel):
    verified_access_endpoint_ids: Optional[Sequence[str]] = Field(
        default=None, alias="VerifiedAccessEndpointIds"
    )
    verified_access_instance_id: Optional[str] = Field(
        default=None, alias="VerifiedAccessInstanceId"
    )
    verified_access_group_id: Optional[str] = Field(
        default=None, alias="VerifiedAccessGroupId"
    )
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeVerifiedAccessGroupsRequestDescribeVerifiedAccessGroupsPaginateModel(
    BaseModel
):
    verified_access_group_ids: Optional[Sequence[str]] = Field(
        default=None, alias="VerifiedAccessGroupIds"
    )
    verified_access_instance_id: Optional[str] = Field(
        default=None, alias="VerifiedAccessInstanceId"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeVerifiedAccessGroupsRequestModel(BaseModel):
    verified_access_group_ids: Optional[Sequence[str]] = Field(
        default=None, alias="VerifiedAccessGroupIds"
    )
    verified_access_instance_id: Optional[str] = Field(
        default=None, alias="VerifiedAccessInstanceId"
    )
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeVerifiedAccessInstanceLoggingConfigurationsRequestDescribeVerifiedAccessInstanceLoggingConfigurationsPaginateModel(
    BaseModel
):
    verified_access_instance_ids: Optional[Sequence[str]] = Field(
        default=None, alias="VerifiedAccessInstanceIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeVerifiedAccessInstanceLoggingConfigurationsRequestModel(BaseModel):
    verified_access_instance_ids: Optional[Sequence[str]] = Field(
        default=None, alias="VerifiedAccessInstanceIds"
    )
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeVerifiedAccessInstancesRequestDescribeVerifiedAccessInstancesPaginateModel(
    BaseModel
):
    verified_access_instance_ids: Optional[Sequence[str]] = Field(
        default=None, alias="VerifiedAccessInstanceIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeVerifiedAccessInstancesRequestModel(BaseModel):
    verified_access_instance_ids: Optional[Sequence[str]] = Field(
        default=None, alias="VerifiedAccessInstanceIds"
    )
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeVerifiedAccessTrustProvidersRequestDescribeVerifiedAccessTrustProvidersPaginateModel(
    BaseModel
):
    verified_access_trust_provider_ids: Optional[Sequence[str]] = Field(
        default=None, alias="VerifiedAccessTrustProviderIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeVerifiedAccessTrustProvidersRequestModel(BaseModel):
    verified_access_trust_provider_ids: Optional[Sequence[str]] = Field(
        default=None, alias="VerifiedAccessTrustProviderIds"
    )
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeVolumeStatusRequestDescribeVolumeStatusPaginateModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    volume_ids: Optional[Sequence[str]] = Field(default=None, alias="VolumeIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeVolumeStatusRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    volume_ids: Optional[Sequence[str]] = Field(default=None, alias="VolumeIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeVolumeStatusRequestVolumeDescribeStatusModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeVolumesModificationsRequestDescribeVolumesModificationsPaginateModel(
    BaseModel
):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    volume_ids: Optional[Sequence[str]] = Field(default=None, alias="VolumeIds")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeVolumesModificationsRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    volume_ids: Optional[Sequence[str]] = Field(default=None, alias="VolumeIds")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")


class DescribeVolumesRequestDescribeVolumesPaginateModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    volume_ids: Optional[Sequence[str]] = Field(default=None, alias="VolumeIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeVolumesRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    volume_ids: Optional[Sequence[str]] = Field(default=None, alias="VolumeIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeVpcClassicLinkRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    vpc_ids: Optional[Sequence[str]] = Field(default=None, alias="VpcIds")


class DescribeVpcEndpointConnectionNotificationsRequestDescribeVpcEndpointConnectionNotificationsPaginateModel(
    BaseModel
):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    connection_notification_id: Optional[str] = Field(
        default=None, alias="ConnectionNotificationId"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeVpcEndpointConnectionNotificationsRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    connection_notification_id: Optional[str] = Field(
        default=None, alias="ConnectionNotificationId"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeVpcEndpointConnectionsRequestDescribeVpcEndpointConnectionsPaginateModel(
    BaseModel
):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeVpcEndpointConnectionsRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeVpcEndpointServiceConfigurationsRequestDescribeVpcEndpointServiceConfigurationsPaginateModel(
    BaseModel
):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    service_ids: Optional[Sequence[str]] = Field(default=None, alias="ServiceIds")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeVpcEndpointServiceConfigurationsRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    service_ids: Optional[Sequence[str]] = Field(default=None, alias="ServiceIds")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeVpcEndpointServicePermissionsRequestDescribeVpcEndpointServicePermissionsPaginateModel(
    BaseModel
):
    service_id: str = Field(alias="ServiceId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeVpcEndpointServicePermissionsRequestModel(BaseModel):
    service_id: str = Field(alias="ServiceId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeVpcEndpointServicesRequestDescribeVpcEndpointServicesPaginateModel(
    BaseModel
):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    service_names: Optional[Sequence[str]] = Field(default=None, alias="ServiceNames")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeVpcEndpointServicesRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    service_names: Optional[Sequence[str]] = Field(default=None, alias="ServiceNames")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeVpcEndpointsRequestDescribeVpcEndpointsPaginateModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    vpc_endpoint_ids: Optional[Sequence[str]] = Field(
        default=None, alias="VpcEndpointIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeVpcEndpointsRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    vpc_endpoint_ids: Optional[Sequence[str]] = Field(
        default=None, alias="VpcEndpointIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeVpcPeeringConnectionsRequestDescribeVpcPeeringConnectionsPaginateModel(
    BaseModel
):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    vpc_peering_connection_ids: Optional[Sequence[str]] = Field(
        default=None, alias="VpcPeeringConnectionIds"
    )
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeVpcPeeringConnectionsRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    vpc_peering_connection_ids: Optional[Sequence[str]] = Field(
        default=None, alias="VpcPeeringConnectionIds"
    )
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")


class DescribeVpcsRequestDescribeVpcsPaginateModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    vpc_ids: Optional[Sequence[str]] = Field(default=None, alias="VpcIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeVpcsRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    vpc_ids: Optional[Sequence[str]] = Field(default=None, alias="VpcIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")


class DescribeVpnConnectionsRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    vpn_connection_ids: Optional[Sequence[str]] = Field(
        default=None, alias="VpnConnectionIds"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeVpnGatewaysRequestModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    vpn_gateway_ids: Optional[Sequence[str]] = Field(
        default=None, alias="VpnGatewayIds"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ExportTransitGatewayRoutesRequestModel(BaseModel):
    transit_gateway_route_table_id: str = Field(alias="TransitGatewayRouteTableId")
    s3_bucket: str = Field(alias="S3Bucket")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class GetCoipPoolUsageRequestModel(BaseModel):
    pool_id: str = Field(alias="PoolId")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class GetIpamDiscoveredAccountsRequestGetIpamDiscoveredAccountsPaginateModel(BaseModel):
    ipam_resource_discovery_id: str = Field(alias="IpamResourceDiscoveryId")
    discovery_region: str = Field(alias="DiscoveryRegion")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class GetIpamDiscoveredAccountsRequestModel(BaseModel):
    ipam_resource_discovery_id: str = Field(alias="IpamResourceDiscoveryId")
    discovery_region: str = Field(alias="DiscoveryRegion")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")


class GetIpamDiscoveredResourceCidrsRequestGetIpamDiscoveredResourceCidrsPaginateModel(
    BaseModel
):
    ipam_resource_discovery_id: str = Field(alias="IpamResourceDiscoveryId")
    resource_region: str = Field(alias="ResourceRegion")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class GetIpamDiscoveredResourceCidrsRequestModel(BaseModel):
    ipam_resource_discovery_id: str = Field(alias="IpamResourceDiscoveryId")
    resource_region: str = Field(alias="ResourceRegion")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")


class GetIpamPoolAllocationsRequestGetIpamPoolAllocationsPaginateModel(BaseModel):
    ipam_pool_id: str = Field(alias="IpamPoolId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    ipam_pool_allocation_id: Optional[str] = Field(
        default=None, alias="IpamPoolAllocationId"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class GetIpamPoolAllocationsRequestModel(BaseModel):
    ipam_pool_id: str = Field(alias="IpamPoolId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    ipam_pool_allocation_id: Optional[str] = Field(
        default=None, alias="IpamPoolAllocationId"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class GetIpamPoolCidrsRequestGetIpamPoolCidrsPaginateModel(BaseModel):
    ipam_pool_id: str = Field(alias="IpamPoolId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class GetIpamPoolCidrsRequestModel(BaseModel):
    ipam_pool_id: str = Field(alias="IpamPoolId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class GetIpamResourceCidrsRequestGetIpamResourceCidrsPaginateModel(BaseModel):
    ipam_scope_id: str = Field(alias="IpamScopeId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    ipam_pool_id: Optional[str] = Field(default=None, alias="IpamPoolId")
    resource_id: Optional[str] = Field(default=None, alias="ResourceId")
    resource_type: Optional[
        Literal["eip", "ipv6-pool", "public-ipv4-pool", "subnet", "vpc"]
    ] = Field(default=None, alias="ResourceType")
    resource_tag: Optional[RequestIpamResourceTagModel] = Field(
        default=None, alias="ResourceTag"
    )
    resource_owner: Optional[str] = Field(default=None, alias="ResourceOwner")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class GetIpamResourceCidrsRequestModel(BaseModel):
    ipam_scope_id: str = Field(alias="IpamScopeId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    ipam_pool_id: Optional[str] = Field(default=None, alias="IpamPoolId")
    resource_id: Optional[str] = Field(default=None, alias="ResourceId")
    resource_type: Optional[
        Literal["eip", "ipv6-pool", "public-ipv4-pool", "subnet", "vpc"]
    ] = Field(default=None, alias="ResourceType")
    resource_tag: Optional[RequestIpamResourceTagModel] = Field(
        default=None, alias="ResourceTag"
    )
    resource_owner: Optional[str] = Field(default=None, alias="ResourceOwner")


class GetSubnetCidrReservationsRequestModel(BaseModel):
    subnet_id: str = Field(alias="SubnetId")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")


class GetTransitGatewayAttachmentPropagationsRequestGetTransitGatewayAttachmentPropagationsPaginateModel(
    BaseModel
):
    transit_gateway_attachment_id: str = Field(alias="TransitGatewayAttachmentId")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class GetTransitGatewayAttachmentPropagationsRequestModel(BaseModel):
    transit_gateway_attachment_id: str = Field(alias="TransitGatewayAttachmentId")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class GetTransitGatewayMulticastDomainAssociationsRequestGetTransitGatewayMulticastDomainAssociationsPaginateModel(
    BaseModel
):
    transit_gateway_multicast_domain_id: str = Field(
        alias="TransitGatewayMulticastDomainId"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class GetTransitGatewayMulticastDomainAssociationsRequestModel(BaseModel):
    transit_gateway_multicast_domain_id: str = Field(
        alias="TransitGatewayMulticastDomainId"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class GetTransitGatewayPolicyTableAssociationsRequestGetTransitGatewayPolicyTableAssociationsPaginateModel(
    BaseModel
):
    transit_gateway_policy_table_id: str = Field(alias="TransitGatewayPolicyTableId")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class GetTransitGatewayPolicyTableAssociationsRequestModel(BaseModel):
    transit_gateway_policy_table_id: str = Field(alias="TransitGatewayPolicyTableId")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class GetTransitGatewayPolicyTableEntriesRequestModel(BaseModel):
    transit_gateway_policy_table_id: str = Field(alias="TransitGatewayPolicyTableId")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class GetTransitGatewayPrefixListReferencesRequestGetTransitGatewayPrefixListReferencesPaginateModel(
    BaseModel
):
    transit_gateway_route_table_id: str = Field(alias="TransitGatewayRouteTableId")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class GetTransitGatewayPrefixListReferencesRequestModel(BaseModel):
    transit_gateway_route_table_id: str = Field(alias="TransitGatewayRouteTableId")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class GetTransitGatewayRouteTableAssociationsRequestGetTransitGatewayRouteTableAssociationsPaginateModel(
    BaseModel
):
    transit_gateway_route_table_id: str = Field(alias="TransitGatewayRouteTableId")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class GetTransitGatewayRouteTableAssociationsRequestModel(BaseModel):
    transit_gateway_route_table_id: str = Field(alias="TransitGatewayRouteTableId")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class GetTransitGatewayRouteTablePropagationsRequestGetTransitGatewayRouteTablePropagationsPaginateModel(
    BaseModel
):
    transit_gateway_route_table_id: str = Field(alias="TransitGatewayRouteTableId")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class GetTransitGatewayRouteTablePropagationsRequestModel(BaseModel):
    transit_gateway_route_table_id: str = Field(alias="TransitGatewayRouteTableId")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class SearchLocalGatewayRoutesRequestModel(BaseModel):
    local_gateway_route_table_id: str = Field(alias="LocalGatewayRouteTableId")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class SearchLocalGatewayRoutesRequestSearchLocalGatewayRoutesPaginateModel(BaseModel):
    local_gateway_route_table_id: str = Field(alias="LocalGatewayRouteTableId")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class SearchTransitGatewayMulticastGroupsRequestModel(BaseModel):
    transit_gateway_multicast_domain_id: str = Field(
        alias="TransitGatewayMulticastDomainId"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class SearchTransitGatewayMulticastGroupsRequestSearchTransitGatewayMulticastGroupsPaginateModel(
    BaseModel
):
    transit_gateway_multicast_domain_id: str = Field(
        alias="TransitGatewayMulticastDomainId"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class SearchTransitGatewayRoutesRequestModel(BaseModel):
    transit_gateway_route_table_id: str = Field(alias="TransitGatewayRouteTableId")
    filters: Sequence[FilterModel] = Field(alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeAggregateIdFormatResultModel(BaseModel):
    use_long_ids_aggregated: bool = Field(alias="UseLongIdsAggregated")
    statuses: List[IdFormatModel] = Field(alias="Statuses")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeIdFormatResultModel(BaseModel):
    statuses: List[IdFormatModel] = Field(alias="Statuses")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeIdentityIdFormatResultModel(BaseModel):
    statuses: List[IdFormatModel] = Field(alias="Statuses")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class PrincipalIdFormatModel(BaseModel):
    arn: Optional[str] = Field(default=None, alias="Arn")
    statuses: Optional[List[IdFormatModel]] = Field(default=None, alias="Statuses")


class DescribeAwsNetworkPerformanceMetricSubscriptionsResultModel(BaseModel):
    next_token: str = Field(alias="NextToken")
    subscriptions: List[SubscriptionModel] = Field(alias="Subscriptions")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeBundleTasksRequestBundleTaskCompleteWaitModel(BaseModel):
    bundle_ids: Optional[Sequence[str]] = Field(default=None, alias="BundleIds")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeConversionTasksRequestConversionTaskCancelledWaitModel(BaseModel):
    conversion_task_ids: Optional[Sequence[str]] = Field(
        default=None, alias="ConversionTaskIds"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeConversionTasksRequestConversionTaskCompletedWaitModel(BaseModel):
    conversion_task_ids: Optional[Sequence[str]] = Field(
        default=None, alias="ConversionTaskIds"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeConversionTasksRequestConversionTaskDeletedWaitModel(BaseModel):
    conversion_task_ids: Optional[Sequence[str]] = Field(
        default=None, alias="ConversionTaskIds"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeCustomerGatewaysRequestCustomerGatewayAvailableWaitModel(BaseModel):
    customer_gateway_ids: Optional[Sequence[str]] = Field(
        default=None, alias="CustomerGatewayIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeExportTasksRequestExportTaskCancelledWaitModel(BaseModel):
    export_task_ids: Optional[Sequence[str]] = Field(
        default=None, alias="ExportTaskIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeExportTasksRequestExportTaskCompletedWaitModel(BaseModel):
    export_task_ids: Optional[Sequence[str]] = Field(
        default=None, alias="ExportTaskIds"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeImagesRequestImageAvailableWaitModel(BaseModel):
    executable_users: Optional[Sequence[str]] = Field(
        default=None, alias="ExecutableUsers"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    image_ids: Optional[Sequence[str]] = Field(default=None, alias="ImageIds")
    owners: Optional[Sequence[str]] = Field(default=None, alias="Owners")
    include_deprecated: Optional[bool] = Field(default=None, alias="IncludeDeprecated")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeImagesRequestImageExistsWaitModel(BaseModel):
    executable_users: Optional[Sequence[str]] = Field(
        default=None, alias="ExecutableUsers"
    )
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    image_ids: Optional[Sequence[str]] = Field(default=None, alias="ImageIds")
    owners: Optional[Sequence[str]] = Field(default=None, alias="Owners")
    include_deprecated: Optional[bool] = Field(default=None, alias="IncludeDeprecated")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeImportSnapshotTasksRequestSnapshotImportedWaitModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    import_task_ids: Optional[Sequence[str]] = Field(
        default=None, alias="ImportTaskIds"
    )
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeInstanceStatusRequestInstanceStatusOkWaitModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    instance_ids: Optional[Sequence[str]] = Field(default=None, alias="InstanceIds")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    include_all_instances: Optional[bool] = Field(
        default=None, alias="IncludeAllInstances"
    )
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeInstanceStatusRequestSystemStatusOkWaitModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    instance_ids: Optional[Sequence[str]] = Field(default=None, alias="InstanceIds")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    include_all_instances: Optional[bool] = Field(
        default=None, alias="IncludeAllInstances"
    )
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeInstancesRequestInstanceExistsWaitModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    instance_ids: Optional[Sequence[str]] = Field(default=None, alias="InstanceIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeInstancesRequestInstanceRunningWaitModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    instance_ids: Optional[Sequence[str]] = Field(default=None, alias="InstanceIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeInstancesRequestInstanceStoppedWaitModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    instance_ids: Optional[Sequence[str]] = Field(default=None, alias="InstanceIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeInstancesRequestInstanceTerminatedWaitModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    instance_ids: Optional[Sequence[str]] = Field(default=None, alias="InstanceIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeInternetGatewaysRequestInternetGatewayExistsWaitModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    internet_gateway_ids: Optional[Sequence[str]] = Field(
        default=None, alias="InternetGatewayIds"
    )
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeKeyPairsRequestKeyPairExistsWaitModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    key_names: Optional[Sequence[str]] = Field(default=None, alias="KeyNames")
    key_pair_ids: Optional[Sequence[str]] = Field(default=None, alias="KeyPairIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    include_public_key: Optional[bool] = Field(default=None, alias="IncludePublicKey")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeNatGatewaysRequestNatGatewayAvailableWaitModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    nat_gateway_ids: Optional[Sequence[str]] = Field(
        default=None, alias="NatGatewayIds"
    )
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeNatGatewaysRequestNatGatewayDeletedWaitModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    nat_gateway_ids: Optional[Sequence[str]] = Field(
        default=None, alias="NatGatewayIds"
    )
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeNetworkInterfacesRequestNetworkInterfaceAvailableWaitModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    network_interface_ids: Optional[Sequence[str]] = Field(
        default=None, alias="NetworkInterfaceIds"
    )
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeSecurityGroupsRequestSecurityGroupExistsWaitModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    group_ids: Optional[Sequence[str]] = Field(default=None, alias="GroupIds")
    group_names: Optional[Sequence[str]] = Field(default=None, alias="GroupNames")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeSnapshotsRequestSnapshotCompletedWaitModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    owner_ids: Optional[Sequence[str]] = Field(default=None, alias="OwnerIds")
    restorable_by_user_ids: Optional[Sequence[str]] = Field(
        default=None, alias="RestorableByUserIds"
    )
    snapshot_ids: Optional[Sequence[str]] = Field(default=None, alias="SnapshotIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeSpotInstanceRequestsRequestSpotInstanceRequestFulfilledWaitModel(
    BaseModel
):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    spot_instance_request_ids: Optional[Sequence[str]] = Field(
        default=None, alias="SpotInstanceRequestIds"
    )
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeSubnetsRequestSubnetAvailableWaitModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    subnet_ids: Optional[Sequence[str]] = Field(default=None, alias="SubnetIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeVolumesRequestVolumeAvailableWaitModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    volume_ids: Optional[Sequence[str]] = Field(default=None, alias="VolumeIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeVolumesRequestVolumeDeletedWaitModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    volume_ids: Optional[Sequence[str]] = Field(default=None, alias="VolumeIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeVolumesRequestVolumeInUseWaitModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    volume_ids: Optional[Sequence[str]] = Field(default=None, alias="VolumeIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeVpcPeeringConnectionsRequestVpcPeeringConnectionDeletedWaitModel(
    BaseModel
):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    vpc_peering_connection_ids: Optional[Sequence[str]] = Field(
        default=None, alias="VpcPeeringConnectionIds"
    )
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeVpcPeeringConnectionsRequestVpcPeeringConnectionExistsWaitModel(
    BaseModel
):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    vpc_peering_connection_ids: Optional[Sequence[str]] = Field(
        default=None, alias="VpcPeeringConnectionIds"
    )
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeVpcsRequestVpcAvailableWaitModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    vpc_ids: Optional[Sequence[str]] = Field(default=None, alias="VpcIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeVpcsRequestVpcExistsWaitModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    vpc_ids: Optional[Sequence[str]] = Field(default=None, alias="VpcIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeVpnConnectionsRequestVpnConnectionAvailableWaitModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    vpn_connection_ids: Optional[Sequence[str]] = Field(
        default=None, alias="VpnConnectionIds"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeVpnConnectionsRequestVpnConnectionDeletedWaitModel(BaseModel):
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    vpn_connection_ids: Optional[Sequence[str]] = Field(
        default=None, alias="VpnConnectionIds"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class GetPasswordDataRequestPasswordDataAvailableWaitModel(BaseModel):
    instance_id: str = Field(alias="InstanceId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    waiter_config: Optional[WaiterConfigModel] = Field(
        default=None, alias="WaiterConfig"
    )


class DescribeFastLaunchImagesSuccessItemModel(BaseModel):
    image_id: Optional[str] = Field(default=None, alias="ImageId")
    resource_type: Optional[Literal["snapshot"]] = Field(
        default=None, alias="ResourceType"
    )
    snapshot_configuration: Optional[
        FastLaunchSnapshotConfigurationResponseModel
    ] = Field(default=None, alias="SnapshotConfiguration")
    launch_template: Optional[
        FastLaunchLaunchTemplateSpecificationResponseModel
    ] = Field(default=None, alias="LaunchTemplate")
    max_parallel_launches: Optional[int] = Field(
        default=None, alias="MaxParallelLaunches"
    )
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    state: Optional[
        Literal[
            "disabling",
            "disabling-failed",
            "enabled",
            "enabled-failed",
            "enabling",
            "enabling-failed",
        ]
    ] = Field(default=None, alias="State")
    state_transition_reason: Optional[str] = Field(
        default=None, alias="StateTransitionReason"
    )
    state_transition_time: Optional[datetime] = Field(
        default=None, alias="StateTransitionTime"
    )


class DisableFastLaunchResultModel(BaseModel):
    image_id: str = Field(alias="ImageId")
    resource_type: Literal["snapshot"] = Field(alias="ResourceType")
    snapshot_configuration: FastLaunchSnapshotConfigurationResponseModel = Field(
        alias="SnapshotConfiguration"
    )
    launch_template: FastLaunchLaunchTemplateSpecificationResponseModel = Field(
        alias="LaunchTemplate"
    )
    max_parallel_launches: int = Field(alias="MaxParallelLaunches")
    owner_id: str = Field(alias="OwnerId")
    state: Literal[
        "disabling",
        "disabling-failed",
        "enabled",
        "enabled-failed",
        "enabling",
        "enabling-failed",
    ] = Field(alias="State")
    state_transition_reason: str = Field(alias="StateTransitionReason")
    state_transition_time: datetime = Field(alias="StateTransitionTime")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class EnableFastLaunchResultModel(BaseModel):
    image_id: str = Field(alias="ImageId")
    resource_type: Literal["snapshot"] = Field(alias="ResourceType")
    snapshot_configuration: FastLaunchSnapshotConfigurationResponseModel = Field(
        alias="SnapshotConfiguration"
    )
    launch_template: FastLaunchLaunchTemplateSpecificationResponseModel = Field(
        alias="LaunchTemplate"
    )
    max_parallel_launches: int = Field(alias="MaxParallelLaunches")
    owner_id: str = Field(alias="OwnerId")
    state: Literal[
        "disabling",
        "disabling-failed",
        "enabled",
        "enabled-failed",
        "enabling",
        "enabling-failed",
    ] = Field(alias="State")
    state_transition_reason: str = Field(alias="StateTransitionReason")
    state_transition_time: datetime = Field(alias="StateTransitionTime")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeFastSnapshotRestoresResultModel(BaseModel):
    fast_snapshot_restores: List[DescribeFastSnapshotRestoreSuccessItemModel] = Field(
        alias="FastSnapshotRestores"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeHostReservationOfferingsResultModel(BaseModel):
    next_token: str = Field(alias="NextToken")
    offering_set: List[HostOfferingModel] = Field(alias="OfferingSet")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeInstanceCreditSpecificationsResultModel(BaseModel):
    instance_credit_specifications: List[InstanceCreditSpecificationModel] = Field(
        alias="InstanceCreditSpecifications"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeInstanceTypeOfferingsResultModel(BaseModel):
    instance_type_offerings: List[InstanceTypeOfferingModel] = Field(
        alias="InstanceTypeOfferings"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeMovingAddressesResultModel(BaseModel):
    moving_address_statuses: List[MovingAddressStatusModel] = Field(
        alias="MovingAddressStatuses"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribePrefixListsResultModel(BaseModel):
    next_token: str = Field(alias="NextToken")
    prefix_lists: List[PrefixListModel] = Field(alias="PrefixLists")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeRegionsResultModel(BaseModel):
    regions: List[RegionModel] = Field(alias="Regions")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeScheduledInstanceAvailabilityRequestDescribeScheduledInstanceAvailabilityPaginateModel(
    BaseModel
):
    first_slot_start_time_range: SlotDateTimeRangeRequestModel = Field(
        alias="FirstSlotStartTimeRange"
    )
    recurrence: ScheduledInstanceRecurrenceRequestModel = Field(alias="Recurrence")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_slot_duration_in_hours: Optional[int] = Field(
        default=None, alias="MaxSlotDurationInHours"
    )
    min_slot_duration_in_hours: Optional[int] = Field(
        default=None, alias="MinSlotDurationInHours"
    )
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeScheduledInstanceAvailabilityRequestModel(BaseModel):
    first_slot_start_time_range: SlotDateTimeRangeRequestModel = Field(
        alias="FirstSlotStartTimeRange"
    )
    recurrence: ScheduledInstanceRecurrenceRequestModel = Field(alias="Recurrence")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    max_slot_duration_in_hours: Optional[int] = Field(
        default=None, alias="MaxSlotDurationInHours"
    )
    min_slot_duration_in_hours: Optional[int] = Field(
        default=None, alias="MinSlotDurationInHours"
    )
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class DescribeScheduledInstancesRequestDescribeScheduledInstancesPaginateModel(
    BaseModel
):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    scheduled_instance_ids: Optional[Sequence[str]] = Field(
        default=None, alias="ScheduledInstanceIds"
    )
    slot_start_time_range: Optional[SlotStartTimeRangeRequestModel] = Field(
        default=None, alias="SlotStartTimeRange"
    )
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class DescribeScheduledInstancesRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    filters: Optional[Sequence[FilterModel]] = Field(default=None, alias="Filters")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")
    scheduled_instance_ids: Optional[Sequence[str]] = Field(
        default=None, alias="ScheduledInstanceIds"
    )
    slot_start_time_range: Optional[SlotStartTimeRangeRequestModel] = Field(
        default=None, alias="SlotStartTimeRange"
    )


class DescribeSecurityGroupReferencesResultModel(BaseModel):
    security_group_reference_set: List[SecurityGroupReferenceModel] = Field(
        alias="SecurityGroupReferenceSet"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeSnapshotAttributeResultModel(BaseModel):
    create_volume_permissions: List[CreateVolumePermissionModel] = Field(
        alias="CreateVolumePermissions"
    )
    product_codes: List[ProductCodeModel] = Field(alias="ProductCodes")
    snapshot_id: str = Field(alias="SnapshotId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeVolumeAttributeResultModel(BaseModel):
    auto_enable_io: AttributeBooleanValueModel = Field(alias="AutoEnableIO")
    product_codes: List[ProductCodeModel] = Field(alias="ProductCodes")
    volume_id: str = Field(alias="VolumeId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeSpotPriceHistoryResultModel(BaseModel):
    next_token: str = Field(alias="NextToken")
    spot_price_history: List[SpotPriceModel] = Field(alias="SpotPriceHistory")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeStoreImageTasksResultModel(BaseModel):
    store_image_task_results: List[StoreImageTaskResultModel] = Field(
        alias="StoreImageTaskResults"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeTagsResultModel(BaseModel):
    next_token: str = Field(alias="NextToken")
    tags: List[TagDescriptionModel] = Field(alias="Tags")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeVolumesModificationsResultModel(BaseModel):
    volumes_modifications: List[VolumeModificationModel] = Field(
        alias="VolumesModifications"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyVolumeResultModel(BaseModel):
    volume_modification: VolumeModificationModel = Field(alias="VolumeModification")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class FlowLogModel(BaseModel):
    creation_time: Optional[datetime] = Field(default=None, alias="CreationTime")
    deliver_logs_error_message: Optional[str] = Field(
        default=None, alias="DeliverLogsErrorMessage"
    )
    deliver_logs_permission_arn: Optional[str] = Field(
        default=None, alias="DeliverLogsPermissionArn"
    )
    deliver_cross_account_role: Optional[str] = Field(
        default=None, alias="DeliverCrossAccountRole"
    )
    deliver_logs_status: Optional[str] = Field(default=None, alias="DeliverLogsStatus")
    flow_log_id: Optional[str] = Field(default=None, alias="FlowLogId")
    flow_log_status: Optional[str] = Field(default=None, alias="FlowLogStatus")
    log_group_name: Optional[str] = Field(default=None, alias="LogGroupName")
    resource_id: Optional[str] = Field(default=None, alias="ResourceId")
    traffic_type: Optional[Literal["ACCEPT", "ALL", "REJECT"]] = Field(
        default=None, alias="TrafficType"
    )
    log_destination_type: Optional[
        Literal["cloud-watch-logs", "kinesis-data-firehose", "s3"]
    ] = Field(default=None, alias="LogDestinationType")
    log_destination: Optional[str] = Field(default=None, alias="LogDestination")
    log_format: Optional[str] = Field(default=None, alias="LogFormat")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    max_aggregation_interval: Optional[int] = Field(
        default=None, alias="MaxAggregationInterval"
    )
    destination_options: Optional[DestinationOptionsResponseModel] = Field(
        default=None, alias="DestinationOptions"
    )


class DisableFastSnapshotRestoreStateErrorItemModel(BaseModel):
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    error: Optional[DisableFastSnapshotRestoreStateErrorModel] = Field(
        default=None, alias="Error"
    )


class DisableTransitGatewayRouteTablePropagationResultModel(BaseModel):
    propagation: TransitGatewayPropagationModel = Field(alias="Propagation")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class EnableTransitGatewayRouteTablePropagationResultModel(BaseModel):
    propagation: TransitGatewayPropagationModel = Field(alias="Propagation")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DiskImageModel(BaseModel):
    description: Optional[str] = Field(default=None, alias="Description")
    image: Optional[DiskImageDetailModel] = Field(default=None, alias="Image")
    volume: Optional[VolumeDetailModel] = Field(default=None, alias="Volume")


class ImportVolumeRequestModel(BaseModel):
    availability_zone: str = Field(alias="AvailabilityZone")
    image: DiskImageDetailModel = Field(alias="Image")
    volume: VolumeDetailModel = Field(alias="Volume")
    description: Optional[str] = Field(default=None, alias="Description")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ImportInstanceVolumeDetailItemModel(BaseModel):
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    bytes_converted: Optional[int] = Field(default=None, alias="BytesConverted")
    description: Optional[str] = Field(default=None, alias="Description")
    image: Optional[DiskImageDescriptionModel] = Field(default=None, alias="Image")
    status: Optional[str] = Field(default=None, alias="Status")
    status_message: Optional[str] = Field(default=None, alias="StatusMessage")
    volume: Optional[DiskImageVolumeDescriptionModel] = Field(
        default=None, alias="Volume"
    )


class ImportVolumeTaskDetailsModel(BaseModel):
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    bytes_converted: Optional[int] = Field(default=None, alias="BytesConverted")
    description: Optional[str] = Field(default=None, alias="Description")
    image: Optional[DiskImageDescriptionModel] = Field(default=None, alias="Image")
    volume: Optional[DiskImageVolumeDescriptionModel] = Field(
        default=None, alias="Volume"
    )


class InstanceStorageInfoModel(BaseModel):
    total_size_in_gb: Optional[int] = Field(default=None, alias="TotalSizeInGB")
    disks: Optional[List[DiskInfoModel]] = Field(default=None, alias="Disks")
    nvme_support: Optional[Literal["required", "supported", "unsupported"]] = Field(
        default=None, alias="NvmeSupport"
    )
    encryption_support: Optional[Literal["required", "unsupported"]] = Field(
        default=None, alias="EncryptionSupport"
    )


class VpcEndpointConnectionModel(BaseModel):
    service_id: Optional[str] = Field(default=None, alias="ServiceId")
    vpc_endpoint_id: Optional[str] = Field(default=None, alias="VpcEndpointId")
    vpc_endpoint_owner: Optional[str] = Field(default=None, alias="VpcEndpointOwner")
    vpc_endpoint_state: Optional[
        Literal[
            "Available",
            "Deleted",
            "Deleting",
            "Expired",
            "Failed",
            "Pending",
            "PendingAcceptance",
            "Rejected",
        ]
    ] = Field(default=None, alias="VpcEndpointState")
    creation_timestamp: Optional[datetime] = Field(
        default=None, alias="CreationTimestamp"
    )
    dns_entries: Optional[List[DnsEntryModel]] = Field(default=None, alias="DnsEntries")
    network_load_balancer_arns: Optional[List[str]] = Field(
        default=None, alias="NetworkLoadBalancerArns"
    )
    gateway_load_balancer_arns: Optional[List[str]] = Field(
        default=None, alias="GatewayLoadBalancerArns"
    )
    ip_address_type: Optional[Literal["dualstack", "ipv4", "ipv6"]] = Field(
        default=None, alias="IpAddressType"
    )
    vpc_endpoint_connection_id: Optional[str] = Field(
        default=None, alias="VpcEndpointConnectionId"
    )
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class ModifyClientVpnEndpointRequestModel(BaseModel):
    client_vpn_endpoint_id: str = Field(alias="ClientVpnEndpointId")
    server_certificate_arn: Optional[str] = Field(
        default=None, alias="ServerCertificateArn"
    )
    connection_log_options: Optional[ConnectionLogOptionsModel] = Field(
        default=None, alias="ConnectionLogOptions"
    )
    dns_servers: Optional[DnsServersOptionsModifyStructureModel] = Field(
        default=None, alias="DnsServers"
    )
    vpn_port: Optional[int] = Field(default=None, alias="VpnPort")
    description: Optional[str] = Field(default=None, alias="Description")
    split_tunnel: Optional[bool] = Field(default=None, alias="SplitTunnel")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    security_group_ids: Optional[Sequence[str]] = Field(
        default=None, alias="SecurityGroupIds"
    )
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")
    self_service_portal: Optional[Literal["disabled", "enabled"]] = Field(
        default=None, alias="SelfServicePortal"
    )
    client_connect_options: Optional[ClientConnectOptionsModel] = Field(
        default=None, alias="ClientConnectOptions"
    )
    session_timeout_hours: Optional[int] = Field(
        default=None, alias="SessionTimeoutHours"
    )
    client_login_banner_options: Optional[ClientLoginBannerOptionsModel] = Field(
        default=None, alias="ClientLoginBannerOptions"
    )


class EbsInfoModel(BaseModel):
    ebs_optimized_support: Optional[
        Literal["default", "supported", "unsupported"]
    ] = Field(default=None, alias="EbsOptimizedSupport")
    encryption_support: Optional[Literal["supported", "unsupported"]] = Field(
        default=None, alias="EncryptionSupport"
    )
    ebs_optimized_info: Optional[EbsOptimizedInfoModel] = Field(
        default=None, alias="EbsOptimizedInfo"
    )
    nvme_support: Optional[Literal["required", "supported", "unsupported"]] = Field(
        default=None, alias="NvmeSupport"
    )


class InstanceBlockDeviceMappingSpecificationModel(BaseModel):
    device_name: Optional[str] = Field(default=None, alias="DeviceName")
    ebs: Optional[EbsInstanceBlockDeviceSpecificationModel] = Field(
        default=None, alias="Ebs"
    )
    no_device: Optional[str] = Field(default=None, alias="NoDevice")
    virtual_name: Optional[str] = Field(default=None, alias="VirtualName")


class InstanceBlockDeviceMappingModel(BaseModel):
    device_name: Optional[str] = Field(default=None, alias="DeviceName")
    ebs: Optional[EbsInstanceBlockDeviceModel] = Field(default=None, alias="Ebs")


class EgressOnlyInternetGatewayModel(BaseModel):
    attachments: Optional[List[InternetGatewayAttachmentModel]] = Field(
        default=None, alias="Attachments"
    )
    egress_only_internet_gateway_id: Optional[str] = Field(
        default=None, alias="EgressOnlyInternetGatewayId"
    )
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class InternetGatewayModel(BaseModel):
    attachments: Optional[List[InternetGatewayAttachmentModel]] = Field(
        default=None, alias="Attachments"
    )
    internet_gateway_id: Optional[str] = Field(default=None, alias="InternetGatewayId")
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class ElasticGpusModel(BaseModel):
    elastic_gpu_id: Optional[str] = Field(default=None, alias="ElasticGpuId")
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    elastic_gpu_type: Optional[str] = Field(default=None, alias="ElasticGpuType")
    elastic_gpu_health: Optional[ElasticGpuHealthModel] = Field(
        default=None, alias="ElasticGpuHealth"
    )
    elastic_gpu_state: Optional[Literal["ATTACHED"]] = Field(
        default=None, alias="ElasticGpuState"
    )
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class EnaSrdSpecificationModel(BaseModel):
    ena_srd_enabled: Optional[bool] = Field(default=None, alias="EnaSrdEnabled")
    ena_srd_udp_specification: Optional[EnaSrdUdpSpecificationModel] = Field(
        default=None, alias="EnaSrdUdpSpecification"
    )


class EnableFastLaunchRequestModel(BaseModel):
    image_id: str = Field(alias="ImageId")
    resource_type: Optional[str] = Field(default=None, alias="ResourceType")
    snapshot_configuration: Optional[
        FastLaunchSnapshotConfigurationRequestModel
    ] = Field(default=None, alias="SnapshotConfiguration")
    launch_template: Optional[
        FastLaunchLaunchTemplateSpecificationRequestModel
    ] = Field(default=None, alias="LaunchTemplate")
    max_parallel_launches: Optional[int] = Field(
        default=None, alias="MaxParallelLaunches"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class EnableFastSnapshotRestoreStateErrorItemModel(BaseModel):
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    error: Optional[EnableFastSnapshotRestoreStateErrorModel] = Field(
        default=None, alias="Error"
    )


class HistoryRecordEntryModel(BaseModel):
    event_information: Optional[EventInformationModel] = Field(
        default=None, alias="EventInformation"
    )
    event_type: Optional[
        Literal["fleet-change", "instance-change", "service-error"]
    ] = Field(default=None, alias="EventType")
    timestamp: Optional[datetime] = Field(default=None, alias="Timestamp")


class HistoryRecordModel(BaseModel):
    event_information: Optional[EventInformationModel] = Field(
        default=None, alias="EventInformation"
    )
    event_type: Optional[
        Literal["error", "fleetRequestChange", "information", "instanceChange"]
    ] = Field(default=None, alias="EventType")
    timestamp: Optional[datetime] = Field(default=None, alias="Timestamp")


class ExportImageResultModel(BaseModel):
    description: str = Field(alias="Description")
    disk_image_format: Literal["RAW", "VHD", "VMDK"] = Field(alias="DiskImageFormat")
    export_image_task_id: str = Field(alias="ExportImageTaskId")
    image_id: str = Field(alias="ImageId")
    role_name: str = Field(alias="RoleName")
    progress: str = Field(alias="Progress")
    s3_export_location: ExportTaskS3LocationModel = Field(alias="S3ExportLocation")
    status: str = Field(alias="Status")
    status_message: str = Field(alias="StatusMessage")
    tags: List[TagModel] = Field(alias="Tags")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ExportImageTaskModel(BaseModel):
    description: Optional[str] = Field(default=None, alias="Description")
    export_image_task_id: Optional[str] = Field(default=None, alias="ExportImageTaskId")
    image_id: Optional[str] = Field(default=None, alias="ImageId")
    progress: Optional[str] = Field(default=None, alias="Progress")
    s3_export_location: Optional[ExportTaskS3LocationModel] = Field(
        default=None, alias="S3ExportLocation"
    )
    status: Optional[str] = Field(default=None, alias="Status")
    status_message: Optional[str] = Field(default=None, alias="StatusMessage")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class ExportTaskModel(BaseModel):
    description: Optional[str] = Field(default=None, alias="Description")
    export_task_id: Optional[str] = Field(default=None, alias="ExportTaskId")
    export_to_s3_task: Optional[ExportToS3TaskModel] = Field(
        default=None, alias="ExportToS3Task"
    )
    instance_export_details: Optional[InstanceExportDetailsModel] = Field(
        default=None, alias="InstanceExportDetails"
    )
    state: Optional[Literal["active", "cancelled", "cancelling", "completed"]] = Field(
        default=None, alias="State"
    )
    status_message: Optional[str] = Field(default=None, alias="StatusMessage")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class FleetSpotMaintenanceStrategiesRequestModel(BaseModel):
    capacity_rebalance: Optional[FleetSpotCapacityRebalanceRequestModel] = Field(
        default=None, alias="CapacityRebalance"
    )


class FleetSpotMaintenanceStrategiesModel(BaseModel):
    capacity_rebalance: Optional[FleetSpotCapacityRebalanceModel] = Field(
        default=None, alias="CapacityRebalance"
    )


class FpgaDeviceInfoModel(BaseModel):
    name: Optional[str] = Field(default=None, alias="Name")
    manufacturer: Optional[str] = Field(default=None, alias="Manufacturer")
    count: Optional[int] = Field(default=None, alias="Count")
    memory_info: Optional[FpgaDeviceMemoryInfoModel] = Field(
        default=None, alias="MemoryInfo"
    )


class FpgaImageAttributeModel(BaseModel):
    fpga_image_id: Optional[str] = Field(default=None, alias="FpgaImageId")
    name: Optional[str] = Field(default=None, alias="Name")
    description: Optional[str] = Field(default=None, alias="Description")
    load_permissions: Optional[List[LoadPermissionModel]] = Field(
        default=None, alias="LoadPermissions"
    )
    product_codes: Optional[List[ProductCodeModel]] = Field(
        default=None, alias="ProductCodes"
    )


class FpgaImageModel(BaseModel):
    fpga_image_id: Optional[str] = Field(default=None, alias="FpgaImageId")
    fpga_image_global_id: Optional[str] = Field(default=None, alias="FpgaImageGlobalId")
    name: Optional[str] = Field(default=None, alias="Name")
    description: Optional[str] = Field(default=None, alias="Description")
    shell_version: Optional[str] = Field(default=None, alias="ShellVersion")
    pci_id: Optional[PciIdModel] = Field(default=None, alias="PciId")
    state: Optional[FpgaImageStateModel] = Field(default=None, alias="State")
    create_time: Optional[datetime] = Field(default=None, alias="CreateTime")
    update_time: Optional[datetime] = Field(default=None, alias="UpdateTime")
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    owner_alias: Optional[str] = Field(default=None, alias="OwnerAlias")
    product_codes: Optional[List[ProductCodeModel]] = Field(
        default=None, alias="ProductCodes"
    )
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    public: Optional[bool] = Field(default=None, alias="Public")
    data_retention_support: Optional[bool] = Field(
        default=None, alias="DataRetentionSupport"
    )
    instance_types: Optional[List[str]] = Field(default=None, alias="InstanceTypes")


class GetAssociatedIpv6PoolCidrsResultModel(BaseModel):
    ipv6_cidr_associations: List[Ipv6CidrAssociationModel] = Field(
        alias="Ipv6CidrAssociations"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetCapacityReservationUsageResultModel(BaseModel):
    next_token: str = Field(alias="NextToken")
    capacity_reservation_id: str = Field(alias="CapacityReservationId")
    instance_type: str = Field(alias="InstanceType")
    total_instance_count: int = Field(alias="TotalInstanceCount")
    available_instance_count: int = Field(alias="AvailableInstanceCount")
    state: Literal["active", "cancelled", "expired", "failed", "pending"] = Field(
        alias="State"
    )
    instance_usages: List[InstanceUsageModel] = Field(alias="InstanceUsages")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetDefaultCreditSpecificationResultModel(BaseModel):
    instance_family_credit_specification: InstanceFamilyCreditSpecificationModel = (
        Field(alias="InstanceFamilyCreditSpecification")
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyDefaultCreditSpecificationResultModel(BaseModel):
    instance_family_credit_specification: InstanceFamilyCreditSpecificationModel = (
        Field(alias="InstanceFamilyCreditSpecification")
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetHostReservationPurchasePreviewResultModel(BaseModel):
    currency_code: Literal["USD"] = Field(alias="CurrencyCode")
    purchase: List[PurchaseModel] = Field(alias="Purchase")
    total_hourly_price: str = Field(alias="TotalHourlyPrice")
    total_upfront_price: str = Field(alias="TotalUpfrontPrice")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class PurchaseHostReservationResultModel(BaseModel):
    client_token: str = Field(alias="ClientToken")
    currency_code: Literal["USD"] = Field(alias="CurrencyCode")
    purchase: List[PurchaseModel] = Field(alias="Purchase")
    total_hourly_price: str = Field(alias="TotalHourlyPrice")
    total_upfront_price: str = Field(alias="TotalUpfrontPrice")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetInstanceTypesFromInstanceRequirementsResultModel(BaseModel):
    instance_types: List[InstanceTypeInfoFromInstanceRequirementsModel] = Field(
        alias="InstanceTypes"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetIpamAddressHistoryResultModel(BaseModel):
    history_records: List[IpamAddressHistoryRecordModel] = Field(alias="HistoryRecords")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetManagedPrefixListAssociationsResultModel(BaseModel):
    prefix_list_associations: List[PrefixListAssociationModel] = Field(
        alias="PrefixListAssociations"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetManagedPrefixListEntriesResultModel(BaseModel):
    entries: List[PrefixListEntryModel] = Field(alias="Entries")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ReservedInstanceReservationValueModel(BaseModel):
    reservation_value: Optional[ReservationValueModel] = Field(
        default=None, alias="ReservationValue"
    )
    reserved_instance_id: Optional[str] = Field(
        default=None, alias="ReservedInstanceId"
    )


class GetSpotPlacementScoresResultModel(BaseModel):
    spot_placement_scores: List[SpotPlacementScoreModel] = Field(
        alias="SpotPlacementScores"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetTransitGatewayAttachmentPropagationsResultModel(BaseModel):
    transit_gateway_attachment_propagations: List[
        TransitGatewayAttachmentPropagationModel
    ] = Field(alias="TransitGatewayAttachmentPropagations")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetTransitGatewayRouteTableAssociationsResultModel(BaseModel):
    associations: List[TransitGatewayRouteTableAssociationModel] = Field(
        alias="Associations"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetTransitGatewayRouteTablePropagationsResultModel(BaseModel):
    transit_gateway_route_table_propagations: List[
        TransitGatewayRouteTablePropagationModel
    ] = Field(alias="TransitGatewayRouteTablePropagations")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetVpnConnectionDeviceTypesResultModel(BaseModel):
    vpn_connection_device_types: List[VpnConnectionDeviceTypeModel] = Field(
        alias="VpnConnectionDeviceTypes"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GpuDeviceInfoModel(BaseModel):
    name: Optional[str] = Field(default=None, alias="Name")
    manufacturer: Optional[str] = Field(default=None, alias="Manufacturer")
    count: Optional[int] = Field(default=None, alias="Count")
    memory_info: Optional[GpuDeviceMemoryInfoModel] = Field(
        default=None, alias="MemoryInfo"
    )


class IamInstanceProfileAssociationModel(BaseModel):
    association_id: Optional[str] = Field(default=None, alias="AssociationId")
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    iam_instance_profile: Optional[IamInstanceProfileModel] = Field(
        default=None, alias="IamInstanceProfile"
    )
    state: Optional[
        Literal["associated", "associating", "disassociated", "disassociating"]
    ] = Field(default=None, alias="State")
    timestamp: Optional[datetime] = Field(default=None, alias="Timestamp")


class LaunchPermissionModificationsModel(BaseModel):
    add: Optional[Sequence[LaunchPermissionModel]] = Field(default=None, alias="Add")
    remove: Optional[Sequence[LaunchPermissionModel]] = Field(
        default=None, alias="Remove"
    )


class ImageDiskContainerModel(BaseModel):
    description: Optional[str] = Field(default=None, alias="Description")
    device_name: Optional[str] = Field(default=None, alias="DeviceName")
    format: Optional[str] = Field(default=None, alias="Format")
    snapshot_id: Optional[str] = Field(default=None, alias="SnapshotId")
    url: Optional[str] = Field(default=None, alias="Url")
    user_bucket: Optional[UserBucketModel] = Field(default=None, alias="UserBucket")


class SnapshotDiskContainerModel(BaseModel):
    description: Optional[str] = Field(default=None, alias="Description")
    format: Optional[str] = Field(default=None, alias="Format")
    url: Optional[str] = Field(default=None, alias="Url")
    user_bucket: Optional[UserBucketModel] = Field(default=None, alias="UserBucket")


class ListImagesInRecycleBinResultModel(BaseModel):
    images: List[ImageRecycleBinInfoModel] = Field(alias="Images")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class LocalGatewayRouteTableModel(BaseModel):
    local_gateway_route_table_id: Optional[str] = Field(
        default=None, alias="LocalGatewayRouteTableId"
    )
    local_gateway_route_table_arn: Optional[str] = Field(
        default=None, alias="LocalGatewayRouteTableArn"
    )
    local_gateway_id: Optional[str] = Field(default=None, alias="LocalGatewayId")
    outpost_arn: Optional[str] = Field(default=None, alias="OutpostArn")
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    state: Optional[str] = Field(default=None, alias="State")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    mode: Optional[Literal["coip", "direct-vpc-routing"]] = Field(
        default=None, alias="Mode"
    )
    state_reason: Optional[StateReasonModel] = Field(default=None, alias="StateReason")


class ImportInstanceLaunchSpecificationModel(BaseModel):
    additional_info: Optional[str] = Field(default=None, alias="AdditionalInfo")
    architecture: Optional[
        Literal["arm64", "arm64_mac", "i386", "x86_64", "x86_64_mac"]
    ] = Field(default=None, alias="Architecture")
    group_ids: Optional[Sequence[str]] = Field(default=None, alias="GroupIds")
    group_names: Optional[Sequence[str]] = Field(default=None, alias="GroupNames")
    instance_initiated_shutdown_behavior: Optional[
        Literal["stop", "terminate"]
    ] = Field(default=None, alias="InstanceInitiatedShutdownBehavior")
    instance_type: Optional[
        Literal[
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.large",
            "a1.medium",
            "a1.metal",
            "a1.xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c3.large",
            "c3.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.large",
            "c5.metal",
            "c5.xlarge",
            "c5a.12xlarge",
            "c5a.16xlarge",
            "c5a.24xlarge",
            "c5a.2xlarge",
            "c5a.4xlarge",
            "c5a.8xlarge",
            "c5a.large",
            "c5a.xlarge",
            "c5ad.12xlarge",
            "c5ad.16xlarge",
            "c5ad.24xlarge",
            "c5ad.2xlarge",
            "c5ad.4xlarge",
            "c5ad.8xlarge",
            "c5ad.large",
            "c5ad.xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.large",
            "c5d.metal",
            "c5d.xlarge",
            "c5n.18xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.large",
            "c5n.metal",
            "c5n.xlarge",
            "c6a.12xlarge",
            "c6a.16xlarge",
            "c6a.24xlarge",
            "c6a.2xlarge",
            "c6a.32xlarge",
            "c6a.48xlarge",
            "c6a.4xlarge",
            "c6a.8xlarge",
            "c6a.large",
            "c6a.metal",
            "c6a.xlarge",
            "c6g.12xlarge",
            "c6g.16xlarge",
            "c6g.2xlarge",
            "c6g.4xlarge",
            "c6g.8xlarge",
            "c6g.large",
            "c6g.medium",
            "c6g.metal",
            "c6g.xlarge",
            "c6gd.12xlarge",
            "c6gd.16xlarge",
            "c6gd.2xlarge",
            "c6gd.4xlarge",
            "c6gd.8xlarge",
            "c6gd.large",
            "c6gd.medium",
            "c6gd.metal",
            "c6gd.xlarge",
            "c6gn.12xlarge",
            "c6gn.16xlarge",
            "c6gn.2xlarge",
            "c6gn.4xlarge",
            "c6gn.8xlarge",
            "c6gn.large",
            "c6gn.medium",
            "c6gn.xlarge",
            "c6i.12xlarge",
            "c6i.16xlarge",
            "c6i.24xlarge",
            "c6i.2xlarge",
            "c6i.32xlarge",
            "c6i.4xlarge",
            "c6i.8xlarge",
            "c6i.large",
            "c6i.metal",
            "c6i.xlarge",
            "c6id.12xlarge",
            "c6id.16xlarge",
            "c6id.24xlarge",
            "c6id.2xlarge",
            "c6id.32xlarge",
            "c6id.4xlarge",
            "c6id.8xlarge",
            "c6id.large",
            "c6id.metal",
            "c6id.xlarge",
            "c6in.12xlarge",
            "c6in.16xlarge",
            "c6in.24xlarge",
            "c6in.2xlarge",
            "c6in.32xlarge",
            "c6in.4xlarge",
            "c6in.8xlarge",
            "c6in.large",
            "c6in.xlarge",
            "c7g.12xlarge",
            "c7g.16xlarge",
            "c7g.2xlarge",
            "c7g.4xlarge",
            "c7g.8xlarge",
            "c7g.large",
            "c7g.medium",
            "c7g.xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "cg1.4xlarge",
            "cr1.8xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "d2.xlarge",
            "d3.2xlarge",
            "d3.4xlarge",
            "d3.8xlarge",
            "d3.xlarge",
            "d3en.12xlarge",
            "d3en.2xlarge",
            "d3en.4xlarge",
            "d3en.6xlarge",
            "d3en.8xlarge",
            "d3en.xlarge",
            "dl1.24xlarge",
            "f1.16xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.16xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3s.xlarge",
            "g4ad.16xlarge",
            "g4ad.2xlarge",
            "g4ad.4xlarge",
            "g4ad.8xlarge",
            "g4ad.xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.metal",
            "g4dn.xlarge",
            "g5.12xlarge",
            "g5.16xlarge",
            "g5.24xlarge",
            "g5.2xlarge",
            "g5.48xlarge",
            "g5.4xlarge",
            "g5.8xlarge",
            "g5.xlarge",
            "g5g.16xlarge",
            "g5g.2xlarge",
            "g5g.4xlarge",
            "g5g.8xlarge",
            "g5g.metal",
            "g5g.xlarge",
            "h1.16xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "hi1.4xlarge",
            "hpc6a.48xlarge",
            "hpc6id.32xlarge",
            "hs1.8xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i2.xlarge",
            "i3.16xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.large",
            "i3.metal",
            "i3.xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.large",
            "i3en.metal",
            "i3en.xlarge",
            "i4i.16xlarge",
            "i4i.2xlarge",
            "i4i.32xlarge",
            "i4i.4xlarge",
            "i4i.8xlarge",
            "i4i.large",
            "i4i.metal",
            "i4i.xlarge",
            "im4gn.16xlarge",
            "im4gn.2xlarge",
            "im4gn.4xlarge",
            "im4gn.8xlarge",
            "im4gn.large",
            "im4gn.xlarge",
            "inf1.24xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.xlarge",
            "is4gen.2xlarge",
            "is4gen.4xlarge",
            "is4gen.8xlarge",
            "is4gen.large",
            "is4gen.medium",
            "is4gen.xlarge",
            "m1.large",
            "m1.medium",
            "m1.small",
            "m1.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "m2.xlarge",
            "m3.2xlarge",
            "m3.large",
            "m3.medium",
            "m3.xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.large",
            "m4.xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.large",
            "m5.metal",
            "m5.xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.large",
            "m5a.xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.large",
            "m5ad.xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.large",
            "m5d.metal",
            "m5d.xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.large",
            "m5dn.metal",
            "m5dn.xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.large",
            "m5n.metal",
            "m5n.xlarge",
            "m5zn.12xlarge",
            "m5zn.2xlarge",
            "m5zn.3xlarge",
            "m5zn.6xlarge",
            "m5zn.large",
            "m5zn.metal",
            "m5zn.xlarge",
            "m6a.12xlarge",
            "m6a.16xlarge",
            "m6a.24xlarge",
            "m6a.2xlarge",
            "m6a.32xlarge",
            "m6a.48xlarge",
            "m6a.4xlarge",
            "m6a.8xlarge",
            "m6a.large",
            "m6a.metal",
            "m6a.xlarge",
            "m6g.12xlarge",
            "m6g.16xlarge",
            "m6g.2xlarge",
            "m6g.4xlarge",
            "m6g.8xlarge",
            "m6g.large",
            "m6g.medium",
            "m6g.metal",
            "m6g.xlarge",
            "m6gd.12xlarge",
            "m6gd.16xlarge",
            "m6gd.2xlarge",
            "m6gd.4xlarge",
            "m6gd.8xlarge",
            "m6gd.large",
            "m6gd.medium",
            "m6gd.metal",
            "m6gd.xlarge",
            "m6i.12xlarge",
            "m6i.16xlarge",
            "m6i.24xlarge",
            "m6i.2xlarge",
            "m6i.32xlarge",
            "m6i.4xlarge",
            "m6i.8xlarge",
            "m6i.large",
            "m6i.metal",
            "m6i.xlarge",
            "m6id.12xlarge",
            "m6id.16xlarge",
            "m6id.24xlarge",
            "m6id.2xlarge",
            "m6id.32xlarge",
            "m6id.4xlarge",
            "m6id.8xlarge",
            "m6id.large",
            "m6id.metal",
            "m6id.xlarge",
            "m6idn.12xlarge",
            "m6idn.16xlarge",
            "m6idn.24xlarge",
            "m6idn.2xlarge",
            "m6idn.32xlarge",
            "m6idn.4xlarge",
            "m6idn.8xlarge",
            "m6idn.large",
            "m6idn.xlarge",
            "m6in.12xlarge",
            "m6in.16xlarge",
            "m6in.24xlarge",
            "m6in.2xlarge",
            "m6in.32xlarge",
            "m6in.4xlarge",
            "m6in.8xlarge",
            "m6in.large",
            "m6in.xlarge",
            "mac1.metal",
            "mac2.metal",
            "p2.16xlarge",
            "p2.8xlarge",
            "p2.xlarge",
            "p3.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3dn.24xlarge",
            "p4d.24xlarge",
            "p4de.24xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r4.16xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.large",
            "r5.metal",
            "r5.xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.large",
            "r5a.xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.large",
            "r5ad.xlarge",
            "r5b.12xlarge",
            "r5b.16xlarge",
            "r5b.24xlarge",
            "r5b.2xlarge",
            "r5b.4xlarge",
            "r5b.8xlarge",
            "r5b.large",
            "r5b.metal",
            "r5b.xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.large",
            "r5d.metal",
            "r5d.xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.large",
            "r5dn.metal",
            "r5dn.xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.large",
            "r5n.metal",
            "r5n.xlarge",
            "r6a.12xlarge",
            "r6a.16xlarge",
            "r6a.24xlarge",
            "r6a.2xlarge",
            "r6a.32xlarge",
            "r6a.48xlarge",
            "r6a.4xlarge",
            "r6a.8xlarge",
            "r6a.large",
            "r6a.metal",
            "r6a.xlarge",
            "r6g.12xlarge",
            "r6g.16xlarge",
            "r6g.2xlarge",
            "r6g.4xlarge",
            "r6g.8xlarge",
            "r6g.large",
            "r6g.medium",
            "r6g.metal",
            "r6g.xlarge",
            "r6gd.12xlarge",
            "r6gd.16xlarge",
            "r6gd.2xlarge",
            "r6gd.4xlarge",
            "r6gd.8xlarge",
            "r6gd.large",
            "r6gd.medium",
            "r6gd.metal",
            "r6gd.xlarge",
            "r6i.12xlarge",
            "r6i.16xlarge",
            "r6i.24xlarge",
            "r6i.2xlarge",
            "r6i.32xlarge",
            "r6i.4xlarge",
            "r6i.8xlarge",
            "r6i.large",
            "r6i.metal",
            "r6i.xlarge",
            "r6id.12xlarge",
            "r6id.16xlarge",
            "r6id.24xlarge",
            "r6id.2xlarge",
            "r6id.32xlarge",
            "r6id.4xlarge",
            "r6id.8xlarge",
            "r6id.large",
            "r6id.metal",
            "r6id.xlarge",
            "r6idn.12xlarge",
            "r6idn.16xlarge",
            "r6idn.24xlarge",
            "r6idn.2xlarge",
            "r6idn.32xlarge",
            "r6idn.4xlarge",
            "r6idn.8xlarge",
            "r6idn.large",
            "r6idn.xlarge",
            "r6in.12xlarge",
            "r6in.16xlarge",
            "r6in.24xlarge",
            "r6in.2xlarge",
            "r6in.32xlarge",
            "r6in.4xlarge",
            "r6in.8xlarge",
            "r6in.large",
            "r6in.xlarge",
            "t1.micro",
            "t2.2xlarge",
            "t2.large",
            "t2.medium",
            "t2.micro",
            "t2.nano",
            "t2.small",
            "t2.xlarge",
            "t3.2xlarge",
            "t3.large",
            "t3.medium",
            "t3.micro",
            "t3.nano",
            "t3.small",
            "t3.xlarge",
            "t3a.2xlarge",
            "t3a.large",
            "t3a.medium",
            "t3a.micro",
            "t3a.nano",
            "t3a.small",
            "t3a.xlarge",
            "t4g.2xlarge",
            "t4g.large",
            "t4g.medium",
            "t4g.micro",
            "t4g.nano",
            "t4g.small",
            "t4g.xlarge",
            "trn1.2xlarge",
            "trn1.32xlarge",
            "u-12tb1.112xlarge",
            "u-12tb1.metal",
            "u-18tb1.112xlarge",
            "u-18tb1.metal",
            "u-24tb1.112xlarge",
            "u-24tb1.metal",
            "u-3tb1.56xlarge",
            "u-6tb1.112xlarge",
            "u-6tb1.56xlarge",
            "u-6tb1.metal",
            "u-9tb1.112xlarge",
            "u-9tb1.metal",
            "vt1.24xlarge",
            "vt1.3xlarge",
            "vt1.6xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.16xlarge",
            "x1e.2xlarge",
            "x1e.32xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.xlarge",
            "x2gd.12xlarge",
            "x2gd.16xlarge",
            "x2gd.2xlarge",
            "x2gd.4xlarge",
            "x2gd.8xlarge",
            "x2gd.large",
            "x2gd.medium",
            "x2gd.metal",
            "x2gd.xlarge",
            "x2idn.16xlarge",
            "x2idn.24xlarge",
            "x2idn.32xlarge",
            "x2idn.metal",
            "x2iedn.16xlarge",
            "x2iedn.24xlarge",
            "x2iedn.2xlarge",
            "x2iedn.32xlarge",
            "x2iedn.4xlarge",
            "x2iedn.8xlarge",
            "x2iedn.metal",
            "x2iedn.xlarge",
            "x2iezn.12xlarge",
            "x2iezn.2xlarge",
            "x2iezn.4xlarge",
            "x2iezn.6xlarge",
            "x2iezn.8xlarge",
            "x2iezn.metal",
            "z1d.12xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.large",
            "z1d.metal",
            "z1d.xlarge",
        ]
    ] = Field(default=None, alias="InstanceType")
    monitoring: Optional[bool] = Field(default=None, alias="Monitoring")
    placement: Optional[PlacementModel] = Field(default=None, alias="Placement")
    private_ip_address: Optional[str] = Field(default=None, alias="PrivateIpAddress")
    subnet_id: Optional[str] = Field(default=None, alias="SubnetId")
    user_data: Optional[UserDataModel] = Field(default=None, alias="UserData")


class InferenceAcceleratorInfoModel(BaseModel):
    accelerators: Optional[List[InferenceDeviceInfoModel]] = Field(
        default=None, alias="Accelerators"
    )


class ModifyInstanceCreditSpecificationRequestModel(BaseModel):
    instance_credit_specifications: Sequence[
        InstanceCreditSpecificationRequestModel
    ] = Field(alias="InstanceCreditSpecifications")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")


class LaunchTemplateInstanceNetworkInterfaceSpecificationRequestModel(BaseModel):
    associate_carrier_ip_address: Optional[bool] = Field(
        default=None, alias="AssociateCarrierIpAddress"
    )
    associate_public_ip_address: Optional[bool] = Field(
        default=None, alias="AssociatePublicIpAddress"
    )
    delete_on_termination: Optional[bool] = Field(
        default=None, alias="DeleteOnTermination"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    device_index: Optional[int] = Field(default=None, alias="DeviceIndex")
    groups: Optional[Sequence[str]] = Field(default=None, alias="Groups")
    interface_type: Optional[str] = Field(default=None, alias="InterfaceType")
    ipv6_address_count: Optional[int] = Field(default=None, alias="Ipv6AddressCount")
    ipv6_addresses: Optional[Sequence[InstanceIpv6AddressRequestModel]] = Field(
        default=None, alias="Ipv6Addresses"
    )
    network_interface_id: Optional[str] = Field(
        default=None, alias="NetworkInterfaceId"
    )
    private_ip_address: Optional[str] = Field(default=None, alias="PrivateIpAddress")
    private_ip_addresses: Optional[
        Sequence[PrivateIpAddressSpecificationModel]
    ] = Field(default=None, alias="PrivateIpAddresses")
    secondary_private_ip_address_count: Optional[int] = Field(
        default=None, alias="SecondaryPrivateIpAddressCount"
    )
    subnet_id: Optional[str] = Field(default=None, alias="SubnetId")
    network_card_index: Optional[int] = Field(default=None, alias="NetworkCardIndex")
    ipv4_prefixes: Optional[Sequence[Ipv4PrefixSpecificationRequestModel]] = Field(
        default=None, alias="Ipv4Prefixes"
    )
    ipv4_prefix_count: Optional[int] = Field(default=None, alias="Ipv4PrefixCount")
    ipv6_prefixes: Optional[Sequence[Ipv6PrefixSpecificationRequestModel]] = Field(
        default=None, alias="Ipv6Prefixes"
    )
    ipv6_prefix_count: Optional[int] = Field(default=None, alias="Ipv6PrefixCount")


class InstanceMarketOptionsRequestModel(BaseModel):
    market_type: Optional[Literal["spot"]] = Field(default=None, alias="MarketType")
    spot_options: Optional[SpotMarketOptionsModel] = Field(
        default=None, alias="SpotOptions"
    )


class ModifyInstanceMetadataOptionsResultModel(BaseModel):
    instance_id: str = Field(alias="InstanceId")
    instance_metadata_options: InstanceMetadataOptionsResponseModel = Field(
        alias="InstanceMetadataOptions"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class InstanceMonitoringModel(BaseModel):
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    monitoring: Optional[MonitoringModel] = Field(default=None, alias="Monitoring")


class InstancePrivateIpAddressModel(BaseModel):
    association: Optional[InstanceNetworkInterfaceAssociationModel] = Field(
        default=None, alias="Association"
    )
    primary: Optional[bool] = Field(default=None, alias="Primary")
    private_dns_name: Optional[str] = Field(default=None, alias="PrivateDnsName")
    private_ip_address: Optional[str] = Field(default=None, alias="PrivateIpAddress")


class InstanceRequirementsRequestModel(BaseModel):
    vcpu_count: VCpuCountRangeRequestModel = Field(alias="VCpuCount")
    memory_mi_b: MemoryMiBRequestModel = Field(alias="MemoryMiB")
    cpu_manufacturers: Optional[
        Sequence[Literal["amazon-web-services", "amd", "intel"]]
    ] = Field(default=None, alias="CpuManufacturers")
    memory_gi_bper_vcpu: Optional[MemoryGiBPerVCpuRequestModel] = Field(
        default=None, alias="MemoryGiBPerVCpu"
    )
    excluded_instance_types: Optional[Sequence[str]] = Field(
        default=None, alias="ExcludedInstanceTypes"
    )
    instance_generations: Optional[Sequence[Literal["current", "previous"]]] = Field(
        default=None, alias="InstanceGenerations"
    )
    spot_max_price_percentage_over_lowest_price: Optional[int] = Field(
        default=None, alias="SpotMaxPricePercentageOverLowestPrice"
    )
    on_demand_max_price_percentage_over_lowest_price: Optional[int] = Field(
        default=None, alias="OnDemandMaxPricePercentageOverLowestPrice"
    )
    bare_metal: Optional[Literal["excluded", "included", "required"]] = Field(
        default=None, alias="BareMetal"
    )
    burstable_performance: Optional[
        Literal["excluded", "included", "required"]
    ] = Field(default=None, alias="BurstablePerformance")
    require_hibernate_support: Optional[bool] = Field(
        default=None, alias="RequireHibernateSupport"
    )
    network_interface_count: Optional[NetworkInterfaceCountRequestModel] = Field(
        default=None, alias="NetworkInterfaceCount"
    )
    local_storage: Optional[Literal["excluded", "included", "required"]] = Field(
        default=None, alias="LocalStorage"
    )
    local_storage_types: Optional[Sequence[Literal["hdd", "ssd"]]] = Field(
        default=None, alias="LocalStorageTypes"
    )
    total_local_storage_gb: Optional[TotalLocalStorageGBRequestModel] = Field(
        default=None, alias="TotalLocalStorageGB"
    )
    baseline_ebs_bandwidth_mbps: Optional[BaselineEbsBandwidthMbpsRequestModel] = Field(
        default=None, alias="BaselineEbsBandwidthMbps"
    )
    accelerator_types: Optional[Sequence[Literal["fpga", "gpu", "inference"]]] = Field(
        default=None, alias="AcceleratorTypes"
    )
    accelerator_count: Optional[AcceleratorCountRequestModel] = Field(
        default=None, alias="AcceleratorCount"
    )
    accelerator_manufacturers: Optional[
        Sequence[Literal["amazon-web-services", "amd", "nvidia", "xilinx"]]
    ] = Field(default=None, alias="AcceleratorManufacturers")
    accelerator_names: Optional[
        Sequence[
            Literal[
                "a100",
                "inferentia",
                "k520",
                "k80",
                "m60",
                "radeon-pro-v520",
                "t4",
                "v100",
                "vu9p",
            ]
        ]
    ] = Field(default=None, alias="AcceleratorNames")
    accelerator_total_memory_mi_b: Optional[
        AcceleratorTotalMemoryMiBRequestModel
    ] = Field(default=None, alias="AcceleratorTotalMemoryMiB")
    network_bandwidth_gbps: Optional[NetworkBandwidthGbpsRequestModel] = Field(
        default=None, alias="NetworkBandwidthGbps"
    )
    allowed_instance_types: Optional[Sequence[str]] = Field(
        default=None, alias="AllowedInstanceTypes"
    )


class InstanceRequirementsModel(BaseModel):
    vcpu_count: Optional[VCpuCountRangeModel] = Field(default=None, alias="VCpuCount")
    memory_mi_b: Optional[MemoryMiBModel] = Field(default=None, alias="MemoryMiB")
    cpu_manufacturers: Optional[
        List[Literal["amazon-web-services", "amd", "intel"]]
    ] = Field(default=None, alias="CpuManufacturers")
    memory_gi_bper_vcpu: Optional[MemoryGiBPerVCpuModel] = Field(
        default=None, alias="MemoryGiBPerVCpu"
    )
    excluded_instance_types: Optional[List[str]] = Field(
        default=None, alias="ExcludedInstanceTypes"
    )
    instance_generations: Optional[List[Literal["current", "previous"]]] = Field(
        default=None, alias="InstanceGenerations"
    )
    spot_max_price_percentage_over_lowest_price: Optional[int] = Field(
        default=None, alias="SpotMaxPricePercentageOverLowestPrice"
    )
    on_demand_max_price_percentage_over_lowest_price: Optional[int] = Field(
        default=None, alias="OnDemandMaxPricePercentageOverLowestPrice"
    )
    bare_metal: Optional[Literal["excluded", "included", "required"]] = Field(
        default=None, alias="BareMetal"
    )
    burstable_performance: Optional[
        Literal["excluded", "included", "required"]
    ] = Field(default=None, alias="BurstablePerformance")
    require_hibernate_support: Optional[bool] = Field(
        default=None, alias="RequireHibernateSupport"
    )
    network_interface_count: Optional[NetworkInterfaceCountModel] = Field(
        default=None, alias="NetworkInterfaceCount"
    )
    local_storage: Optional[Literal["excluded", "included", "required"]] = Field(
        default=None, alias="LocalStorage"
    )
    local_storage_types: Optional[List[Literal["hdd", "ssd"]]] = Field(
        default=None, alias="LocalStorageTypes"
    )
    total_local_storage_gb: Optional[TotalLocalStorageGBModel] = Field(
        default=None, alias="TotalLocalStorageGB"
    )
    baseline_ebs_bandwidth_mbps: Optional[BaselineEbsBandwidthMbpsModel] = Field(
        default=None, alias="BaselineEbsBandwidthMbps"
    )
    accelerator_types: Optional[List[Literal["fpga", "gpu", "inference"]]] = Field(
        default=None, alias="AcceleratorTypes"
    )
    accelerator_count: Optional[AcceleratorCountModel] = Field(
        default=None, alias="AcceleratorCount"
    )
    accelerator_manufacturers: Optional[
        List[Literal["amazon-web-services", "amd", "nvidia", "xilinx"]]
    ] = Field(default=None, alias="AcceleratorManufacturers")
    accelerator_names: Optional[
        List[
            Literal[
                "a100",
                "inferentia",
                "k520",
                "k80",
                "m60",
                "radeon-pro-v520",
                "t4",
                "v100",
                "vu9p",
            ]
        ]
    ] = Field(default=None, alias="AcceleratorNames")
    accelerator_total_memory_mi_b: Optional[AcceleratorTotalMemoryMiBModel] = Field(
        default=None, alias="AcceleratorTotalMemoryMiB"
    )
    network_bandwidth_gbps: Optional[NetworkBandwidthGbpsModel] = Field(
        default=None, alias="NetworkBandwidthGbps"
    )
    allowed_instance_types: Optional[List[str]] = Field(
        default=None, alias="AllowedInstanceTypes"
    )


class InstanceStateChangeModel(BaseModel):
    current_state: Optional[InstanceStateModel] = Field(
        default=None, alias="CurrentState"
    )
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    previous_state: Optional[InstanceStateModel] = Field(
        default=None, alias="PreviousState"
    )


class InstanceStatusSummaryModel(BaseModel):
    details: Optional[List[InstanceStatusDetailsModel]] = Field(
        default=None, alias="Details"
    )
    status: Optional[
        Literal["impaired", "initializing", "insufficient-data", "not-applicable", "ok"]
    ] = Field(default=None, alias="Status")


class ModifyInstanceEventStartTimeResultModel(BaseModel):
    event: InstanceStatusEventModel = Field(alias="Event")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class IpPermissionModel(BaseModel):
    from_port: Optional[int] = Field(default=None, alias="FromPort")
    ip_protocol: Optional[str] = Field(default=None, alias="IpProtocol")
    ip_ranges: Optional[Sequence[IpRangeModel]] = Field(default=None, alias="IpRanges")
    ipv6_ranges: Optional[Sequence[Ipv6RangeModel]] = Field(
        default=None, alias="Ipv6Ranges"
    )
    prefix_list_ids: Optional[Sequence[PrefixListIdModel]] = Field(
        default=None, alias="PrefixListIds"
    )
    to_port: Optional[int] = Field(default=None, alias="ToPort")
    user_id_group_pairs: Optional[Sequence[UserIdGroupPairModel]] = Field(
        default=None, alias="UserIdGroupPairs"
    )


class StaleIpPermissionModel(BaseModel):
    from_port: Optional[int] = Field(default=None, alias="FromPort")
    ip_protocol: Optional[str] = Field(default=None, alias="IpProtocol")
    ip_ranges: Optional[List[str]] = Field(default=None, alias="IpRanges")
    prefix_list_ids: Optional[List[str]] = Field(default=None, alias="PrefixListIds")
    to_port: Optional[int] = Field(default=None, alias="ToPort")
    user_id_group_pairs: Optional[List[UserIdGroupPairModel]] = Field(
        default=None, alias="UserIdGroupPairs"
    )


class ProvisionIpamPoolCidrRequestModel(BaseModel):
    ipam_pool_id: str = Field(alias="IpamPoolId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    cidr: Optional[str] = Field(default=None, alias="Cidr")
    cidr_authorization_context: Optional[IpamCidrAuthorizationContextModel] = Field(
        default=None, alias="CidrAuthorizationContext"
    )
    netmask_length: Optional[int] = Field(default=None, alias="NetmaskLength")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")


class IpamDiscoveredAccountModel(BaseModel):
    account_id: Optional[str] = Field(default=None, alias="AccountId")
    discovery_region: Optional[str] = Field(default=None, alias="DiscoveryRegion")
    failure_reason: Optional[IpamDiscoveryFailureReasonModel] = Field(
        default=None, alias="FailureReason"
    )
    last_attempted_discovery_time: Optional[datetime] = Field(
        default=None, alias="LastAttemptedDiscoveryTime"
    )
    last_successful_discovery_time: Optional[datetime] = Field(
        default=None, alias="LastSuccessfulDiscoveryTime"
    )


class IpamDiscoveredResourceCidrModel(BaseModel):
    ipam_resource_discovery_id: Optional[str] = Field(
        default=None, alias="IpamResourceDiscoveryId"
    )
    resource_region: Optional[str] = Field(default=None, alias="ResourceRegion")
    resource_id: Optional[str] = Field(default=None, alias="ResourceId")
    resource_owner_id: Optional[str] = Field(default=None, alias="ResourceOwnerId")
    resource_cidr: Optional[str] = Field(default=None, alias="ResourceCidr")
    resource_type: Optional[
        Literal["eip", "ipv6-pool", "public-ipv4-pool", "subnet", "vpc"]
    ] = Field(default=None, alias="ResourceType")
    resource_tags: Optional[List[IpamResourceTagModel]] = Field(
        default=None, alias="ResourceTags"
    )
    ip_usage: Optional[float] = Field(default=None, alias="IpUsage")
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")
    sample_time: Optional[datetime] = Field(default=None, alias="SampleTime")


class IpamPoolModel(BaseModel):
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    ipam_pool_id: Optional[str] = Field(default=None, alias="IpamPoolId")
    source_ipam_pool_id: Optional[str] = Field(default=None, alias="SourceIpamPoolId")
    ipam_pool_arn: Optional[str] = Field(default=None, alias="IpamPoolArn")
    ipam_scope_arn: Optional[str] = Field(default=None, alias="IpamScopeArn")
    ipam_scope_type: Optional[Literal["private", "public"]] = Field(
        default=None, alias="IpamScopeType"
    )
    ipam_arn: Optional[str] = Field(default=None, alias="IpamArn")
    ipam_region: Optional[str] = Field(default=None, alias="IpamRegion")
    locale: Optional[str] = Field(default=None, alias="Locale")
    pool_depth: Optional[int] = Field(default=None, alias="PoolDepth")
    state: Optional[
        Literal[
            "create-complete",
            "create-failed",
            "create-in-progress",
            "delete-complete",
            "delete-failed",
            "delete-in-progress",
            "isolate-complete",
            "isolate-in-progress",
            "modify-complete",
            "modify-failed",
            "modify-in-progress",
            "restore-in-progress",
        ]
    ] = Field(default=None, alias="State")
    state_message: Optional[str] = Field(default=None, alias="StateMessage")
    description: Optional[str] = Field(default=None, alias="Description")
    auto_import: Optional[bool] = Field(default=None, alias="AutoImport")
    publicly_advertisable: Optional[bool] = Field(
        default=None, alias="PubliclyAdvertisable"
    )
    address_family: Optional[Literal["ipv4", "ipv6"]] = Field(
        default=None, alias="AddressFamily"
    )
    allocation_min_netmask_length: Optional[int] = Field(
        default=None, alias="AllocationMinNetmaskLength"
    )
    allocation_max_netmask_length: Optional[int] = Field(
        default=None, alias="AllocationMaxNetmaskLength"
    )
    allocation_default_netmask_length: Optional[int] = Field(
        default=None, alias="AllocationDefaultNetmaskLength"
    )
    allocation_resource_tags: Optional[List[IpamResourceTagModel]] = Field(
        default=None, alias="AllocationResourceTags"
    )
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    aws_service: Optional[Literal["ec2"]] = Field(default=None, alias="AwsService")
    public_ip_source: Optional[Literal["amazon", "byoip"]] = Field(
        default=None, alias="PublicIpSource"
    )


class IpamResourceCidrModel(BaseModel):
    ipam_id: Optional[str] = Field(default=None, alias="IpamId")
    ipam_scope_id: Optional[str] = Field(default=None, alias="IpamScopeId")
    ipam_pool_id: Optional[str] = Field(default=None, alias="IpamPoolId")
    resource_region: Optional[str] = Field(default=None, alias="ResourceRegion")
    resource_owner_id: Optional[str] = Field(default=None, alias="ResourceOwnerId")
    resource_id: Optional[str] = Field(default=None, alias="ResourceId")
    resource_name: Optional[str] = Field(default=None, alias="ResourceName")
    resource_cidr: Optional[str] = Field(default=None, alias="ResourceCidr")
    resource_type: Optional[
        Literal["eip", "ipv6-pool", "public-ipv4-pool", "subnet", "vpc"]
    ] = Field(default=None, alias="ResourceType")
    resource_tags: Optional[List[IpamResourceTagModel]] = Field(
        default=None, alias="ResourceTags"
    )
    ip_usage: Optional[float] = Field(default=None, alias="IpUsage")
    compliance_status: Optional[
        Literal["compliant", "ignored", "noncompliant", "unmanaged"]
    ] = Field(default=None, alias="ComplianceStatus")
    management_state: Optional[Literal["ignored", "managed", "unmanaged"]] = Field(
        default=None, alias="ManagementState"
    )
    overlap_status: Optional[
        Literal["ignored", "nonoverlapping", "overlapping"]
    ] = Field(default=None, alias="OverlapStatus")
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")


class IpamResourceDiscoveryModel(BaseModel):
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    ipam_resource_discovery_id: Optional[str] = Field(
        default=None, alias="IpamResourceDiscoveryId"
    )
    ipam_resource_discovery_arn: Optional[str] = Field(
        default=None, alias="IpamResourceDiscoveryArn"
    )
    ipam_resource_discovery_region: Optional[str] = Field(
        default=None, alias="IpamResourceDiscoveryRegion"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    operating_regions: Optional[List[IpamOperatingRegionModel]] = Field(
        default=None, alias="OperatingRegions"
    )
    is_default: Optional[bool] = Field(default=None, alias="IsDefault")
    state: Optional[
        Literal[
            "create-complete",
            "create-failed",
            "create-in-progress",
            "delete-complete",
            "delete-failed",
            "delete-in-progress",
            "isolate-complete",
            "isolate-in-progress",
            "modify-complete",
            "modify-failed",
            "modify-in-progress",
            "restore-in-progress",
        ]
    ] = Field(default=None, alias="State")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class IpamModel(BaseModel):
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    ipam_id: Optional[str] = Field(default=None, alias="IpamId")
    ipam_arn: Optional[str] = Field(default=None, alias="IpamArn")
    ipam_region: Optional[str] = Field(default=None, alias="IpamRegion")
    public_default_scope_id: Optional[str] = Field(
        default=None, alias="PublicDefaultScopeId"
    )
    private_default_scope_id: Optional[str] = Field(
        default=None, alias="PrivateDefaultScopeId"
    )
    scope_count: Optional[int] = Field(default=None, alias="ScopeCount")
    description: Optional[str] = Field(default=None, alias="Description")
    operating_regions: Optional[List[IpamOperatingRegionModel]] = Field(
        default=None, alias="OperatingRegions"
    )
    state: Optional[
        Literal[
            "create-complete",
            "create-failed",
            "create-in-progress",
            "delete-complete",
            "delete-failed",
            "delete-in-progress",
            "isolate-complete",
            "isolate-in-progress",
            "modify-complete",
            "modify-failed",
            "modify-in-progress",
            "restore-in-progress",
        ]
    ] = Field(default=None, alias="State")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    default_resource_discovery_id: Optional[str] = Field(
        default=None, alias="DefaultResourceDiscoveryId"
    )
    default_resource_discovery_association_id: Optional[str] = Field(
        default=None, alias="DefaultResourceDiscoveryAssociationId"
    )
    resource_discovery_association_count: Optional[int] = Field(
        default=None, alias="ResourceDiscoveryAssociationCount"
    )


class IpamPoolCidrModel(BaseModel):
    cidr: Optional[str] = Field(default=None, alias="Cidr")
    state: Optional[
        Literal[
            "deprovisioned",
            "failed-deprovision",
            "failed-import",
            "failed-provision",
            "pending-deprovision",
            "pending-import",
            "pending-provision",
            "provisioned",
        ]
    ] = Field(default=None, alias="State")
    failure_reason: Optional[IpamPoolCidrFailureReasonModel] = Field(
        default=None, alias="FailureReason"
    )
    ipam_pool_cidr_id: Optional[str] = Field(default=None, alias="IpamPoolCidrId")
    netmask_length: Optional[int] = Field(default=None, alias="NetmaskLength")


class Ipv6PoolModel(BaseModel):
    pool_id: Optional[str] = Field(default=None, alias="PoolId")
    description: Optional[str] = Field(default=None, alias="Description")
    pool_cidr_blocks: Optional[List[PoolCidrBlockModel]] = Field(
        default=None, alias="PoolCidrBlocks"
    )
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class LaunchTemplateInstanceNetworkInterfaceSpecificationModel(BaseModel):
    associate_carrier_ip_address: Optional[bool] = Field(
        default=None, alias="AssociateCarrierIpAddress"
    )
    associate_public_ip_address: Optional[bool] = Field(
        default=None, alias="AssociatePublicIpAddress"
    )
    delete_on_termination: Optional[bool] = Field(
        default=None, alias="DeleteOnTermination"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    device_index: Optional[int] = Field(default=None, alias="DeviceIndex")
    groups: Optional[List[str]] = Field(default=None, alias="Groups")
    interface_type: Optional[str] = Field(default=None, alias="InterfaceType")
    ipv6_address_count: Optional[int] = Field(default=None, alias="Ipv6AddressCount")
    ipv6_addresses: Optional[List[InstanceIpv6AddressModel]] = Field(
        default=None, alias="Ipv6Addresses"
    )
    network_interface_id: Optional[str] = Field(
        default=None, alias="NetworkInterfaceId"
    )
    private_ip_address: Optional[str] = Field(default=None, alias="PrivateIpAddress")
    private_ip_addresses: Optional[List[PrivateIpAddressSpecificationModel]] = Field(
        default=None, alias="PrivateIpAddresses"
    )
    secondary_private_ip_address_count: Optional[int] = Field(
        default=None, alias="SecondaryPrivateIpAddressCount"
    )
    subnet_id: Optional[str] = Field(default=None, alias="SubnetId")
    network_card_index: Optional[int] = Field(default=None, alias="NetworkCardIndex")
    ipv4_prefixes: Optional[List[Ipv4PrefixSpecificationResponseModel]] = Field(
        default=None, alias="Ipv4Prefixes"
    )
    ipv4_prefix_count: Optional[int] = Field(default=None, alias="Ipv4PrefixCount")
    ipv6_prefixes: Optional[List[Ipv6PrefixSpecificationResponseModel]] = Field(
        default=None, alias="Ipv6Prefixes"
    )
    ipv6_prefix_count: Optional[int] = Field(default=None, alias="Ipv6PrefixCount")


class LaunchTemplateBlockDeviceMappingRequestModel(BaseModel):
    device_name: Optional[str] = Field(default=None, alias="DeviceName")
    virtual_name: Optional[str] = Field(default=None, alias="VirtualName")
    ebs: Optional[LaunchTemplateEbsBlockDeviceRequestModel] = Field(
        default=None, alias="Ebs"
    )
    no_device: Optional[str] = Field(default=None, alias="NoDevice")


class LaunchTemplateBlockDeviceMappingModel(BaseModel):
    device_name: Optional[str] = Field(default=None, alias="DeviceName")
    virtual_name: Optional[str] = Field(default=None, alias="VirtualName")
    ebs: Optional[LaunchTemplateEbsBlockDeviceModel] = Field(default=None, alias="Ebs")
    no_device: Optional[str] = Field(default=None, alias="NoDevice")


class LaunchTemplateInstanceMarketOptionsRequestModel(BaseModel):
    market_type: Optional[Literal["spot"]] = Field(default=None, alias="MarketType")
    spot_options: Optional[LaunchTemplateSpotMarketOptionsRequestModel] = Field(
        default=None, alias="SpotOptions"
    )


class LaunchTemplateInstanceMarketOptionsModel(BaseModel):
    market_type: Optional[Literal["spot"]] = Field(default=None, alias="MarketType")
    spot_options: Optional[LaunchTemplateSpotMarketOptionsModel] = Field(
        default=None, alias="SpotOptions"
    )


class ListSnapshotsInRecycleBinResultModel(BaseModel):
    snapshots: List[SnapshotRecycleBinInfoModel] = Field(alias="Snapshots")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class LoadPermissionModificationsModel(BaseModel):
    add: Optional[Sequence[LoadPermissionRequestModel]] = Field(
        default=None, alias="Add"
    )
    remove: Optional[Sequence[LoadPermissionRequestModel]] = Field(
        default=None, alias="Remove"
    )


class ModifyIpamRequestModel(BaseModel):
    ipam_id: str = Field(alias="IpamId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    description: Optional[str] = Field(default=None, alias="Description")
    add_operating_regions: Optional[Sequence[AddIpamOperatingRegionModel]] = Field(
        default=None, alias="AddOperatingRegions"
    )
    remove_operating_regions: Optional[
        Sequence[RemoveIpamOperatingRegionModel]
    ] = Field(default=None, alias="RemoveOperatingRegions")


class ModifyIpamResourceDiscoveryRequestModel(BaseModel):
    ipam_resource_discovery_id: str = Field(alias="IpamResourceDiscoveryId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    description: Optional[str] = Field(default=None, alias="Description")
    add_operating_regions: Optional[Sequence[AddIpamOperatingRegionModel]] = Field(
        default=None, alias="AddOperatingRegions"
    )
    remove_operating_regions: Optional[
        Sequence[RemoveIpamOperatingRegionModel]
    ] = Field(default=None, alias="RemoveOperatingRegions")


class ModifyManagedPrefixListRequestModel(BaseModel):
    prefix_list_id: str = Field(alias="PrefixListId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    current_version: Optional[int] = Field(default=None, alias="CurrentVersion")
    prefix_list_name: Optional[str] = Field(default=None, alias="PrefixListName")
    add_entries: Optional[Sequence[AddPrefixListEntryModel]] = Field(
        default=None, alias="AddEntries"
    )
    remove_entries: Optional[Sequence[RemovePrefixListEntryModel]] = Field(
        default=None, alias="RemoveEntries"
    )
    max_entries: Optional[int] = Field(default=None, alias="MaxEntries")


class ModifyReservedInstancesRequestModel(BaseModel):
    reserved_instances_ids: Sequence[str] = Field(alias="ReservedInstancesIds")
    target_configurations: Sequence[ReservedInstancesConfigurationModel] = Field(
        alias="TargetConfigurations"
    )
    client_token: Optional[str] = Field(default=None, alias="ClientToken")


class ReservedInstancesModificationResultModel(BaseModel):
    reserved_instances_id: Optional[str] = Field(
        default=None, alias="ReservedInstancesId"
    )
    target_configuration: Optional[ReservedInstancesConfigurationModel] = Field(
        default=None, alias="TargetConfiguration"
    )


class ModifyTransitGatewayRequestModel(BaseModel):
    transit_gateway_id: str = Field(alias="TransitGatewayId")
    description: Optional[str] = Field(default=None, alias="Description")
    options: Optional[ModifyTransitGatewayOptionsModel] = Field(
        default=None, alias="Options"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ModifyTransitGatewayVpcAttachmentRequestModel(BaseModel):
    transit_gateway_attachment_id: str = Field(alias="TransitGatewayAttachmentId")
    add_subnet_ids: Optional[Sequence[str]] = Field(default=None, alias="AddSubnetIds")
    remove_subnet_ids: Optional[Sequence[str]] = Field(
        default=None, alias="RemoveSubnetIds"
    )
    options: Optional[ModifyTransitGatewayVpcAttachmentRequestOptionsModel] = Field(
        default=None, alias="Options"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ModifyVerifiedAccessEndpointRequestModel(BaseModel):
    verified_access_endpoint_id: str = Field(alias="VerifiedAccessEndpointId")
    verified_access_group_id: Optional[str] = Field(
        default=None, alias="VerifiedAccessGroupId"
    )
    load_balancer_options: Optional[
        ModifyVerifiedAccessEndpointLoadBalancerOptionsModel
    ] = Field(default=None, alias="LoadBalancerOptions")
    network_interface_options: Optional[
        ModifyVerifiedAccessEndpointEniOptionsModel
    ] = Field(default=None, alias="NetworkInterfaceOptions")
    description: Optional[str] = Field(default=None, alias="Description")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ModifyVerifiedAccessTrustProviderRequestModel(BaseModel):
    verified_access_trust_provider_id: str = Field(
        alias="VerifiedAccessTrustProviderId"
    )
    oidc_options: Optional[ModifyVerifiedAccessTrustProviderOidcOptionsModel] = Field(
        default=None, alias="OidcOptions"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")


class ModifyVpcPeeringConnectionOptionsRequestModel(BaseModel):
    vpc_peering_connection_id: str = Field(alias="VpcPeeringConnectionId")
    accepter_peering_connection_options: Optional[
        PeeringConnectionOptionsRequestModel
    ] = Field(default=None, alias="AccepterPeeringConnectionOptions")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    requester_peering_connection_options: Optional[
        PeeringConnectionOptionsRequestModel
    ] = Field(default=None, alias="RequesterPeeringConnectionOptions")


class ModifyVpcPeeringConnectionOptionsResultModel(BaseModel):
    accepter_peering_connection_options: PeeringConnectionOptionsModel = Field(
        alias="AccepterPeeringConnectionOptions"
    )
    requester_peering_connection_options: PeeringConnectionOptionsModel = Field(
        alias="RequesterPeeringConnectionOptions"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class NatGatewayModel(BaseModel):
    create_time: Optional[datetime] = Field(default=None, alias="CreateTime")
    delete_time: Optional[datetime] = Field(default=None, alias="DeleteTime")
    failure_code: Optional[str] = Field(default=None, alias="FailureCode")
    failure_message: Optional[str] = Field(default=None, alias="FailureMessage")
    nat_gateway_addresses: Optional[List[NatGatewayAddressModel]] = Field(
        default=None, alias="NatGatewayAddresses"
    )
    nat_gateway_id: Optional[str] = Field(default=None, alias="NatGatewayId")
    provisioned_bandwidth: Optional[ProvisionedBandwidthModel] = Field(
        default=None, alias="ProvisionedBandwidth"
    )
    state: Optional[
        Literal["available", "deleted", "deleting", "failed", "pending"]
    ] = Field(default=None, alias="State")
    subnet_id: Optional[str] = Field(default=None, alias="SubnetId")
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    connectivity_type: Optional[Literal["private", "public"]] = Field(
        default=None, alias="ConnectivityType"
    )


class NetworkInfoModel(BaseModel):
    network_performance: Optional[str] = Field(default=None, alias="NetworkPerformance")
    maximum_network_interfaces: Optional[int] = Field(
        default=None, alias="MaximumNetworkInterfaces"
    )
    maximum_network_cards: Optional[int] = Field(
        default=None, alias="MaximumNetworkCards"
    )
    default_network_card_index: Optional[int] = Field(
        default=None, alias="DefaultNetworkCardIndex"
    )
    network_cards: Optional[List[NetworkCardInfoModel]] = Field(
        default=None, alias="NetworkCards"
    )
    ipv4_addresses_per_interface: Optional[int] = Field(
        default=None, alias="Ipv4AddressesPerInterface"
    )
    ipv6_addresses_per_interface: Optional[int] = Field(
        default=None, alias="Ipv6AddressesPerInterface"
    )
    ipv6_supported: Optional[bool] = Field(default=None, alias="Ipv6Supported")
    ena_support: Optional[Literal["required", "supported", "unsupported"]] = Field(
        default=None, alias="EnaSupport"
    )
    efa_supported: Optional[bool] = Field(default=None, alias="EfaSupported")
    efa_info: Optional[EfaInfoModel] = Field(default=None, alias="EfaInfo")
    encryption_in_transit_supported: Optional[bool] = Field(
        default=None, alias="EncryptionInTransitSupported"
    )
    ena_srd_supported: Optional[bool] = Field(default=None, alias="EnaSrdSupported")


class NetworkInterfacePrivateIpAddressModel(BaseModel):
    association: Optional[NetworkInterfaceAssociationModel] = Field(
        default=None, alias="Association"
    )
    primary: Optional[bool] = Field(default=None, alias="Primary")
    private_dns_name: Optional[str] = Field(default=None, alias="PrivateDnsName")
    private_ip_address: Optional[str] = Field(default=None, alias="PrivateIpAddress")


class NetworkInterfacePermissionModel(BaseModel):
    network_interface_permission_id: Optional[str] = Field(
        default=None, alias="NetworkInterfacePermissionId"
    )
    network_interface_id: Optional[str] = Field(
        default=None, alias="NetworkInterfaceId"
    )
    aws_account_id: Optional[str] = Field(default=None, alias="AwsAccountId")
    aws_service: Optional[str] = Field(default=None, alias="AwsService")
    permission: Optional[Literal["EIP-ASSOCIATE", "INSTANCE-ATTACH"]] = Field(
        default=None, alias="Permission"
    )
    permission_state: Optional[NetworkInterfacePermissionStateModel] = Field(
        default=None, alias="PermissionState"
    )


class VerifiedAccessTrustProviderModel(BaseModel):
    verified_access_trust_provider_id: Optional[str] = Field(
        default=None, alias="VerifiedAccessTrustProviderId"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    trust_provider_type: Optional[Literal["device", "user"]] = Field(
        default=None, alias="TrustProviderType"
    )
    user_trust_provider_type: Optional[Literal["iam-identity-center", "oidc"]] = Field(
        default=None, alias="UserTrustProviderType"
    )
    device_trust_provider_type: Optional[Literal["crowdstrike", "jamf"]] = Field(
        default=None, alias="DeviceTrustProviderType"
    )
    oidc_options: Optional[OidcOptionsModel] = Field(default=None, alias="OidcOptions")
    device_options: Optional[DeviceOptionsModel] = Field(
        default=None, alias="DeviceOptions"
    )
    policy_reference_name: Optional[str] = Field(
        default=None, alias="PolicyReferenceName"
    )
    creation_time: Optional[str] = Field(default=None, alias="CreationTime")
    last_updated_time: Optional[str] = Field(default=None, alias="LastUpdatedTime")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class PathStatementRequestModel(BaseModel):
    packet_header_statement: Optional[PacketHeaderStatementRequestModel] = Field(
        default=None, alias="PacketHeaderStatement"
    )
    resource_statement: Optional[ResourceStatementRequestModel] = Field(
        default=None, alias="ResourceStatement"
    )


class ThroughResourcesStatementRequestModel(BaseModel):
    resource_statement: Optional[ResourceStatementRequestModel] = Field(
        default=None, alias="ResourceStatement"
    )


class PathStatementModel(BaseModel):
    packet_header_statement: Optional[PacketHeaderStatementModel] = Field(
        default=None, alias="PacketHeaderStatement"
    )
    resource_statement: Optional[ResourceStatementModel] = Field(
        default=None, alias="ResourceStatement"
    )


class ThroughResourcesStatementModel(BaseModel):
    resource_statement: Optional[ResourceStatementModel] = Field(
        default=None, alias="ResourceStatement"
    )


class ReservedInstancesListingModel(BaseModel):
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    create_date: Optional[datetime] = Field(default=None, alias="CreateDate")
    instance_counts: Optional[List[InstanceCountModel]] = Field(
        default=None, alias="InstanceCounts"
    )
    price_schedules: Optional[List[PriceScheduleModel]] = Field(
        default=None, alias="PriceSchedules"
    )
    reserved_instances_id: Optional[str] = Field(
        default=None, alias="ReservedInstancesId"
    )
    reserved_instances_listing_id: Optional[str] = Field(
        default=None, alias="ReservedInstancesListingId"
    )
    status: Optional[Literal["active", "cancelled", "closed", "pending"]] = Field(
        default=None, alias="Status"
    )
    status_message: Optional[str] = Field(default=None, alias="StatusMessage")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    update_date: Optional[datetime] = Field(default=None, alias="UpdateDate")


class ProvisionPublicIpv4PoolCidrResultModel(BaseModel):
    pool_id: str = Field(alias="PoolId")
    pool_address_range: PublicIpv4PoolRangeModel = Field(alias="PoolAddressRange")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class PublicIpv4PoolModel(BaseModel):
    pool_id: Optional[str] = Field(default=None, alias="PoolId")
    description: Optional[str] = Field(default=None, alias="Description")
    pool_address_ranges: Optional[List[PublicIpv4PoolRangeModel]] = Field(
        default=None, alias="PoolAddressRanges"
    )
    total_address_count: Optional[int] = Field(default=None, alias="TotalAddressCount")
    total_available_address_count: Optional[int] = Field(
        default=None, alias="TotalAvailableAddressCount"
    )
    network_border_group: Optional[str] = Field(
        default=None, alias="NetworkBorderGroup"
    )
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class PurchaseScheduledInstancesRequestModel(BaseModel):
    purchase_requests: Sequence[PurchaseRequestModel] = Field(alias="PurchaseRequests")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class PurchaseReservedInstancesOfferingRequestModel(BaseModel):
    instance_count: int = Field(alias="InstanceCount")
    reserved_instances_offering_id: str = Field(alias="ReservedInstancesOfferingId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    limit_price: Optional[ReservedInstanceLimitPriceModel] = Field(
        default=None, alias="LimitPrice"
    )
    purchase_time: Optional[Union[datetime, str]] = Field(
        default=None, alias="PurchaseTime"
    )


class ReservedInstancesOfferingModel(BaseModel):
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    duration: Optional[int] = Field(default=None, alias="Duration")
    fixed_price: Optional[float] = Field(default=None, alias="FixedPrice")
    instance_type: Optional[
        Literal[
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.large",
            "a1.medium",
            "a1.metal",
            "a1.xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c3.large",
            "c3.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.large",
            "c5.metal",
            "c5.xlarge",
            "c5a.12xlarge",
            "c5a.16xlarge",
            "c5a.24xlarge",
            "c5a.2xlarge",
            "c5a.4xlarge",
            "c5a.8xlarge",
            "c5a.large",
            "c5a.xlarge",
            "c5ad.12xlarge",
            "c5ad.16xlarge",
            "c5ad.24xlarge",
            "c5ad.2xlarge",
            "c5ad.4xlarge",
            "c5ad.8xlarge",
            "c5ad.large",
            "c5ad.xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.large",
            "c5d.metal",
            "c5d.xlarge",
            "c5n.18xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.large",
            "c5n.metal",
            "c5n.xlarge",
            "c6a.12xlarge",
            "c6a.16xlarge",
            "c6a.24xlarge",
            "c6a.2xlarge",
            "c6a.32xlarge",
            "c6a.48xlarge",
            "c6a.4xlarge",
            "c6a.8xlarge",
            "c6a.large",
            "c6a.metal",
            "c6a.xlarge",
            "c6g.12xlarge",
            "c6g.16xlarge",
            "c6g.2xlarge",
            "c6g.4xlarge",
            "c6g.8xlarge",
            "c6g.large",
            "c6g.medium",
            "c6g.metal",
            "c6g.xlarge",
            "c6gd.12xlarge",
            "c6gd.16xlarge",
            "c6gd.2xlarge",
            "c6gd.4xlarge",
            "c6gd.8xlarge",
            "c6gd.large",
            "c6gd.medium",
            "c6gd.metal",
            "c6gd.xlarge",
            "c6gn.12xlarge",
            "c6gn.16xlarge",
            "c6gn.2xlarge",
            "c6gn.4xlarge",
            "c6gn.8xlarge",
            "c6gn.large",
            "c6gn.medium",
            "c6gn.xlarge",
            "c6i.12xlarge",
            "c6i.16xlarge",
            "c6i.24xlarge",
            "c6i.2xlarge",
            "c6i.32xlarge",
            "c6i.4xlarge",
            "c6i.8xlarge",
            "c6i.large",
            "c6i.metal",
            "c6i.xlarge",
            "c6id.12xlarge",
            "c6id.16xlarge",
            "c6id.24xlarge",
            "c6id.2xlarge",
            "c6id.32xlarge",
            "c6id.4xlarge",
            "c6id.8xlarge",
            "c6id.large",
            "c6id.metal",
            "c6id.xlarge",
            "c6in.12xlarge",
            "c6in.16xlarge",
            "c6in.24xlarge",
            "c6in.2xlarge",
            "c6in.32xlarge",
            "c6in.4xlarge",
            "c6in.8xlarge",
            "c6in.large",
            "c6in.xlarge",
            "c7g.12xlarge",
            "c7g.16xlarge",
            "c7g.2xlarge",
            "c7g.4xlarge",
            "c7g.8xlarge",
            "c7g.large",
            "c7g.medium",
            "c7g.xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "cg1.4xlarge",
            "cr1.8xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "d2.xlarge",
            "d3.2xlarge",
            "d3.4xlarge",
            "d3.8xlarge",
            "d3.xlarge",
            "d3en.12xlarge",
            "d3en.2xlarge",
            "d3en.4xlarge",
            "d3en.6xlarge",
            "d3en.8xlarge",
            "d3en.xlarge",
            "dl1.24xlarge",
            "f1.16xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.16xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3s.xlarge",
            "g4ad.16xlarge",
            "g4ad.2xlarge",
            "g4ad.4xlarge",
            "g4ad.8xlarge",
            "g4ad.xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.metal",
            "g4dn.xlarge",
            "g5.12xlarge",
            "g5.16xlarge",
            "g5.24xlarge",
            "g5.2xlarge",
            "g5.48xlarge",
            "g5.4xlarge",
            "g5.8xlarge",
            "g5.xlarge",
            "g5g.16xlarge",
            "g5g.2xlarge",
            "g5g.4xlarge",
            "g5g.8xlarge",
            "g5g.metal",
            "g5g.xlarge",
            "h1.16xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "hi1.4xlarge",
            "hpc6a.48xlarge",
            "hpc6id.32xlarge",
            "hs1.8xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i2.xlarge",
            "i3.16xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.large",
            "i3.metal",
            "i3.xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.large",
            "i3en.metal",
            "i3en.xlarge",
            "i4i.16xlarge",
            "i4i.2xlarge",
            "i4i.32xlarge",
            "i4i.4xlarge",
            "i4i.8xlarge",
            "i4i.large",
            "i4i.metal",
            "i4i.xlarge",
            "im4gn.16xlarge",
            "im4gn.2xlarge",
            "im4gn.4xlarge",
            "im4gn.8xlarge",
            "im4gn.large",
            "im4gn.xlarge",
            "inf1.24xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.xlarge",
            "is4gen.2xlarge",
            "is4gen.4xlarge",
            "is4gen.8xlarge",
            "is4gen.large",
            "is4gen.medium",
            "is4gen.xlarge",
            "m1.large",
            "m1.medium",
            "m1.small",
            "m1.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "m2.xlarge",
            "m3.2xlarge",
            "m3.large",
            "m3.medium",
            "m3.xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.large",
            "m4.xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.large",
            "m5.metal",
            "m5.xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.large",
            "m5a.xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.large",
            "m5ad.xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.large",
            "m5d.metal",
            "m5d.xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.large",
            "m5dn.metal",
            "m5dn.xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.large",
            "m5n.metal",
            "m5n.xlarge",
            "m5zn.12xlarge",
            "m5zn.2xlarge",
            "m5zn.3xlarge",
            "m5zn.6xlarge",
            "m5zn.large",
            "m5zn.metal",
            "m5zn.xlarge",
            "m6a.12xlarge",
            "m6a.16xlarge",
            "m6a.24xlarge",
            "m6a.2xlarge",
            "m6a.32xlarge",
            "m6a.48xlarge",
            "m6a.4xlarge",
            "m6a.8xlarge",
            "m6a.large",
            "m6a.metal",
            "m6a.xlarge",
            "m6g.12xlarge",
            "m6g.16xlarge",
            "m6g.2xlarge",
            "m6g.4xlarge",
            "m6g.8xlarge",
            "m6g.large",
            "m6g.medium",
            "m6g.metal",
            "m6g.xlarge",
            "m6gd.12xlarge",
            "m6gd.16xlarge",
            "m6gd.2xlarge",
            "m6gd.4xlarge",
            "m6gd.8xlarge",
            "m6gd.large",
            "m6gd.medium",
            "m6gd.metal",
            "m6gd.xlarge",
            "m6i.12xlarge",
            "m6i.16xlarge",
            "m6i.24xlarge",
            "m6i.2xlarge",
            "m6i.32xlarge",
            "m6i.4xlarge",
            "m6i.8xlarge",
            "m6i.large",
            "m6i.metal",
            "m6i.xlarge",
            "m6id.12xlarge",
            "m6id.16xlarge",
            "m6id.24xlarge",
            "m6id.2xlarge",
            "m6id.32xlarge",
            "m6id.4xlarge",
            "m6id.8xlarge",
            "m6id.large",
            "m6id.metal",
            "m6id.xlarge",
            "m6idn.12xlarge",
            "m6idn.16xlarge",
            "m6idn.24xlarge",
            "m6idn.2xlarge",
            "m6idn.32xlarge",
            "m6idn.4xlarge",
            "m6idn.8xlarge",
            "m6idn.large",
            "m6idn.xlarge",
            "m6in.12xlarge",
            "m6in.16xlarge",
            "m6in.24xlarge",
            "m6in.2xlarge",
            "m6in.32xlarge",
            "m6in.4xlarge",
            "m6in.8xlarge",
            "m6in.large",
            "m6in.xlarge",
            "mac1.metal",
            "mac2.metal",
            "p2.16xlarge",
            "p2.8xlarge",
            "p2.xlarge",
            "p3.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3dn.24xlarge",
            "p4d.24xlarge",
            "p4de.24xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r4.16xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.large",
            "r5.metal",
            "r5.xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.large",
            "r5a.xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.large",
            "r5ad.xlarge",
            "r5b.12xlarge",
            "r5b.16xlarge",
            "r5b.24xlarge",
            "r5b.2xlarge",
            "r5b.4xlarge",
            "r5b.8xlarge",
            "r5b.large",
            "r5b.metal",
            "r5b.xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.large",
            "r5d.metal",
            "r5d.xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.large",
            "r5dn.metal",
            "r5dn.xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.large",
            "r5n.metal",
            "r5n.xlarge",
            "r6a.12xlarge",
            "r6a.16xlarge",
            "r6a.24xlarge",
            "r6a.2xlarge",
            "r6a.32xlarge",
            "r6a.48xlarge",
            "r6a.4xlarge",
            "r6a.8xlarge",
            "r6a.large",
            "r6a.metal",
            "r6a.xlarge",
            "r6g.12xlarge",
            "r6g.16xlarge",
            "r6g.2xlarge",
            "r6g.4xlarge",
            "r6g.8xlarge",
            "r6g.large",
            "r6g.medium",
            "r6g.metal",
            "r6g.xlarge",
            "r6gd.12xlarge",
            "r6gd.16xlarge",
            "r6gd.2xlarge",
            "r6gd.4xlarge",
            "r6gd.8xlarge",
            "r6gd.large",
            "r6gd.medium",
            "r6gd.metal",
            "r6gd.xlarge",
            "r6i.12xlarge",
            "r6i.16xlarge",
            "r6i.24xlarge",
            "r6i.2xlarge",
            "r6i.32xlarge",
            "r6i.4xlarge",
            "r6i.8xlarge",
            "r6i.large",
            "r6i.metal",
            "r6i.xlarge",
            "r6id.12xlarge",
            "r6id.16xlarge",
            "r6id.24xlarge",
            "r6id.2xlarge",
            "r6id.32xlarge",
            "r6id.4xlarge",
            "r6id.8xlarge",
            "r6id.large",
            "r6id.metal",
            "r6id.xlarge",
            "r6idn.12xlarge",
            "r6idn.16xlarge",
            "r6idn.24xlarge",
            "r6idn.2xlarge",
            "r6idn.32xlarge",
            "r6idn.4xlarge",
            "r6idn.8xlarge",
            "r6idn.large",
            "r6idn.xlarge",
            "r6in.12xlarge",
            "r6in.16xlarge",
            "r6in.24xlarge",
            "r6in.2xlarge",
            "r6in.32xlarge",
            "r6in.4xlarge",
            "r6in.8xlarge",
            "r6in.large",
            "r6in.xlarge",
            "t1.micro",
            "t2.2xlarge",
            "t2.large",
            "t2.medium",
            "t2.micro",
            "t2.nano",
            "t2.small",
            "t2.xlarge",
            "t3.2xlarge",
            "t3.large",
            "t3.medium",
            "t3.micro",
            "t3.nano",
            "t3.small",
            "t3.xlarge",
            "t3a.2xlarge",
            "t3a.large",
            "t3a.medium",
            "t3a.micro",
            "t3a.nano",
            "t3a.small",
            "t3a.xlarge",
            "t4g.2xlarge",
            "t4g.large",
            "t4g.medium",
            "t4g.micro",
            "t4g.nano",
            "t4g.small",
            "t4g.xlarge",
            "trn1.2xlarge",
            "trn1.32xlarge",
            "u-12tb1.112xlarge",
            "u-12tb1.metal",
            "u-18tb1.112xlarge",
            "u-18tb1.metal",
            "u-24tb1.112xlarge",
            "u-24tb1.metal",
            "u-3tb1.56xlarge",
            "u-6tb1.112xlarge",
            "u-6tb1.56xlarge",
            "u-6tb1.metal",
            "u-9tb1.112xlarge",
            "u-9tb1.metal",
            "vt1.24xlarge",
            "vt1.3xlarge",
            "vt1.6xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.16xlarge",
            "x1e.2xlarge",
            "x1e.32xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.xlarge",
            "x2gd.12xlarge",
            "x2gd.16xlarge",
            "x2gd.2xlarge",
            "x2gd.4xlarge",
            "x2gd.8xlarge",
            "x2gd.large",
            "x2gd.medium",
            "x2gd.metal",
            "x2gd.xlarge",
            "x2idn.16xlarge",
            "x2idn.24xlarge",
            "x2idn.32xlarge",
            "x2idn.metal",
            "x2iedn.16xlarge",
            "x2iedn.24xlarge",
            "x2iedn.2xlarge",
            "x2iedn.32xlarge",
            "x2iedn.4xlarge",
            "x2iedn.8xlarge",
            "x2iedn.metal",
            "x2iedn.xlarge",
            "x2iezn.12xlarge",
            "x2iezn.2xlarge",
            "x2iezn.4xlarge",
            "x2iezn.6xlarge",
            "x2iezn.8xlarge",
            "x2iezn.metal",
            "z1d.12xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.large",
            "z1d.metal",
            "z1d.xlarge",
        ]
    ] = Field(default=None, alias="InstanceType")
    product_description: Optional[
        Literal[
            "Linux/UNIX", "Linux/UNIX (Amazon VPC)", "Windows", "Windows (Amazon VPC)"
        ]
    ] = Field(default=None, alias="ProductDescription")
    reserved_instances_offering_id: Optional[str] = Field(
        default=None, alias="ReservedInstancesOfferingId"
    )
    usage_price: Optional[float] = Field(default=None, alias="UsagePrice")
    currency_code: Optional[Literal["USD"]] = Field(default=None, alias="CurrencyCode")
    instance_tenancy: Optional[Literal["dedicated", "default", "host"]] = Field(
        default=None, alias="InstanceTenancy"
    )
    marketplace: Optional[bool] = Field(default=None, alias="Marketplace")
    offering_class: Optional[Literal["convertible", "standard"]] = Field(
        default=None, alias="OfferingClass"
    )
    offering_type: Optional[
        Literal[
            "All Upfront",
            "Heavy Utilization",
            "Light Utilization",
            "Medium Utilization",
            "No Upfront",
            "Partial Upfront",
        ]
    ] = Field(default=None, alias="OfferingType")
    pricing_details: Optional[List[PricingDetailModel]] = Field(
        default=None, alias="PricingDetails"
    )
    recurring_charges: Optional[List[RecurringChargeModel]] = Field(
        default=None, alias="RecurringCharges"
    )
    scope: Optional[Literal["Availability Zone", "Region"]] = Field(
        default=None, alias="Scope"
    )


class ReservedInstancesModel(BaseModel):
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    duration: Optional[int] = Field(default=None, alias="Duration")
    end: Optional[datetime] = Field(default=None, alias="End")
    fixed_price: Optional[float] = Field(default=None, alias="FixedPrice")
    instance_count: Optional[int] = Field(default=None, alias="InstanceCount")
    instance_type: Optional[
        Literal[
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.large",
            "a1.medium",
            "a1.metal",
            "a1.xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c3.large",
            "c3.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.large",
            "c5.metal",
            "c5.xlarge",
            "c5a.12xlarge",
            "c5a.16xlarge",
            "c5a.24xlarge",
            "c5a.2xlarge",
            "c5a.4xlarge",
            "c5a.8xlarge",
            "c5a.large",
            "c5a.xlarge",
            "c5ad.12xlarge",
            "c5ad.16xlarge",
            "c5ad.24xlarge",
            "c5ad.2xlarge",
            "c5ad.4xlarge",
            "c5ad.8xlarge",
            "c5ad.large",
            "c5ad.xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.large",
            "c5d.metal",
            "c5d.xlarge",
            "c5n.18xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.large",
            "c5n.metal",
            "c5n.xlarge",
            "c6a.12xlarge",
            "c6a.16xlarge",
            "c6a.24xlarge",
            "c6a.2xlarge",
            "c6a.32xlarge",
            "c6a.48xlarge",
            "c6a.4xlarge",
            "c6a.8xlarge",
            "c6a.large",
            "c6a.metal",
            "c6a.xlarge",
            "c6g.12xlarge",
            "c6g.16xlarge",
            "c6g.2xlarge",
            "c6g.4xlarge",
            "c6g.8xlarge",
            "c6g.large",
            "c6g.medium",
            "c6g.metal",
            "c6g.xlarge",
            "c6gd.12xlarge",
            "c6gd.16xlarge",
            "c6gd.2xlarge",
            "c6gd.4xlarge",
            "c6gd.8xlarge",
            "c6gd.large",
            "c6gd.medium",
            "c6gd.metal",
            "c6gd.xlarge",
            "c6gn.12xlarge",
            "c6gn.16xlarge",
            "c6gn.2xlarge",
            "c6gn.4xlarge",
            "c6gn.8xlarge",
            "c6gn.large",
            "c6gn.medium",
            "c6gn.xlarge",
            "c6i.12xlarge",
            "c6i.16xlarge",
            "c6i.24xlarge",
            "c6i.2xlarge",
            "c6i.32xlarge",
            "c6i.4xlarge",
            "c6i.8xlarge",
            "c6i.large",
            "c6i.metal",
            "c6i.xlarge",
            "c6id.12xlarge",
            "c6id.16xlarge",
            "c6id.24xlarge",
            "c6id.2xlarge",
            "c6id.32xlarge",
            "c6id.4xlarge",
            "c6id.8xlarge",
            "c6id.large",
            "c6id.metal",
            "c6id.xlarge",
            "c6in.12xlarge",
            "c6in.16xlarge",
            "c6in.24xlarge",
            "c6in.2xlarge",
            "c6in.32xlarge",
            "c6in.4xlarge",
            "c6in.8xlarge",
            "c6in.large",
            "c6in.xlarge",
            "c7g.12xlarge",
            "c7g.16xlarge",
            "c7g.2xlarge",
            "c7g.4xlarge",
            "c7g.8xlarge",
            "c7g.large",
            "c7g.medium",
            "c7g.xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "cg1.4xlarge",
            "cr1.8xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "d2.xlarge",
            "d3.2xlarge",
            "d3.4xlarge",
            "d3.8xlarge",
            "d3.xlarge",
            "d3en.12xlarge",
            "d3en.2xlarge",
            "d3en.4xlarge",
            "d3en.6xlarge",
            "d3en.8xlarge",
            "d3en.xlarge",
            "dl1.24xlarge",
            "f1.16xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.16xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3s.xlarge",
            "g4ad.16xlarge",
            "g4ad.2xlarge",
            "g4ad.4xlarge",
            "g4ad.8xlarge",
            "g4ad.xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.metal",
            "g4dn.xlarge",
            "g5.12xlarge",
            "g5.16xlarge",
            "g5.24xlarge",
            "g5.2xlarge",
            "g5.48xlarge",
            "g5.4xlarge",
            "g5.8xlarge",
            "g5.xlarge",
            "g5g.16xlarge",
            "g5g.2xlarge",
            "g5g.4xlarge",
            "g5g.8xlarge",
            "g5g.metal",
            "g5g.xlarge",
            "h1.16xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "hi1.4xlarge",
            "hpc6a.48xlarge",
            "hpc6id.32xlarge",
            "hs1.8xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i2.xlarge",
            "i3.16xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.large",
            "i3.metal",
            "i3.xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.large",
            "i3en.metal",
            "i3en.xlarge",
            "i4i.16xlarge",
            "i4i.2xlarge",
            "i4i.32xlarge",
            "i4i.4xlarge",
            "i4i.8xlarge",
            "i4i.large",
            "i4i.metal",
            "i4i.xlarge",
            "im4gn.16xlarge",
            "im4gn.2xlarge",
            "im4gn.4xlarge",
            "im4gn.8xlarge",
            "im4gn.large",
            "im4gn.xlarge",
            "inf1.24xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.xlarge",
            "is4gen.2xlarge",
            "is4gen.4xlarge",
            "is4gen.8xlarge",
            "is4gen.large",
            "is4gen.medium",
            "is4gen.xlarge",
            "m1.large",
            "m1.medium",
            "m1.small",
            "m1.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "m2.xlarge",
            "m3.2xlarge",
            "m3.large",
            "m3.medium",
            "m3.xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.large",
            "m4.xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.large",
            "m5.metal",
            "m5.xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.large",
            "m5a.xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.large",
            "m5ad.xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.large",
            "m5d.metal",
            "m5d.xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.large",
            "m5dn.metal",
            "m5dn.xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.large",
            "m5n.metal",
            "m5n.xlarge",
            "m5zn.12xlarge",
            "m5zn.2xlarge",
            "m5zn.3xlarge",
            "m5zn.6xlarge",
            "m5zn.large",
            "m5zn.metal",
            "m5zn.xlarge",
            "m6a.12xlarge",
            "m6a.16xlarge",
            "m6a.24xlarge",
            "m6a.2xlarge",
            "m6a.32xlarge",
            "m6a.48xlarge",
            "m6a.4xlarge",
            "m6a.8xlarge",
            "m6a.large",
            "m6a.metal",
            "m6a.xlarge",
            "m6g.12xlarge",
            "m6g.16xlarge",
            "m6g.2xlarge",
            "m6g.4xlarge",
            "m6g.8xlarge",
            "m6g.large",
            "m6g.medium",
            "m6g.metal",
            "m6g.xlarge",
            "m6gd.12xlarge",
            "m6gd.16xlarge",
            "m6gd.2xlarge",
            "m6gd.4xlarge",
            "m6gd.8xlarge",
            "m6gd.large",
            "m6gd.medium",
            "m6gd.metal",
            "m6gd.xlarge",
            "m6i.12xlarge",
            "m6i.16xlarge",
            "m6i.24xlarge",
            "m6i.2xlarge",
            "m6i.32xlarge",
            "m6i.4xlarge",
            "m6i.8xlarge",
            "m6i.large",
            "m6i.metal",
            "m6i.xlarge",
            "m6id.12xlarge",
            "m6id.16xlarge",
            "m6id.24xlarge",
            "m6id.2xlarge",
            "m6id.32xlarge",
            "m6id.4xlarge",
            "m6id.8xlarge",
            "m6id.large",
            "m6id.metal",
            "m6id.xlarge",
            "m6idn.12xlarge",
            "m6idn.16xlarge",
            "m6idn.24xlarge",
            "m6idn.2xlarge",
            "m6idn.32xlarge",
            "m6idn.4xlarge",
            "m6idn.8xlarge",
            "m6idn.large",
            "m6idn.xlarge",
            "m6in.12xlarge",
            "m6in.16xlarge",
            "m6in.24xlarge",
            "m6in.2xlarge",
            "m6in.32xlarge",
            "m6in.4xlarge",
            "m6in.8xlarge",
            "m6in.large",
            "m6in.xlarge",
            "mac1.metal",
            "mac2.metal",
            "p2.16xlarge",
            "p2.8xlarge",
            "p2.xlarge",
            "p3.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3dn.24xlarge",
            "p4d.24xlarge",
            "p4de.24xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r4.16xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.large",
            "r5.metal",
            "r5.xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.large",
            "r5a.xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.large",
            "r5ad.xlarge",
            "r5b.12xlarge",
            "r5b.16xlarge",
            "r5b.24xlarge",
            "r5b.2xlarge",
            "r5b.4xlarge",
            "r5b.8xlarge",
            "r5b.large",
            "r5b.metal",
            "r5b.xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.large",
            "r5d.metal",
            "r5d.xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.large",
            "r5dn.metal",
            "r5dn.xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.large",
            "r5n.metal",
            "r5n.xlarge",
            "r6a.12xlarge",
            "r6a.16xlarge",
            "r6a.24xlarge",
            "r6a.2xlarge",
            "r6a.32xlarge",
            "r6a.48xlarge",
            "r6a.4xlarge",
            "r6a.8xlarge",
            "r6a.large",
            "r6a.metal",
            "r6a.xlarge",
            "r6g.12xlarge",
            "r6g.16xlarge",
            "r6g.2xlarge",
            "r6g.4xlarge",
            "r6g.8xlarge",
            "r6g.large",
            "r6g.medium",
            "r6g.metal",
            "r6g.xlarge",
            "r6gd.12xlarge",
            "r6gd.16xlarge",
            "r6gd.2xlarge",
            "r6gd.4xlarge",
            "r6gd.8xlarge",
            "r6gd.large",
            "r6gd.medium",
            "r6gd.metal",
            "r6gd.xlarge",
            "r6i.12xlarge",
            "r6i.16xlarge",
            "r6i.24xlarge",
            "r6i.2xlarge",
            "r6i.32xlarge",
            "r6i.4xlarge",
            "r6i.8xlarge",
            "r6i.large",
            "r6i.metal",
            "r6i.xlarge",
            "r6id.12xlarge",
            "r6id.16xlarge",
            "r6id.24xlarge",
            "r6id.2xlarge",
            "r6id.32xlarge",
            "r6id.4xlarge",
            "r6id.8xlarge",
            "r6id.large",
            "r6id.metal",
            "r6id.xlarge",
            "r6idn.12xlarge",
            "r6idn.16xlarge",
            "r6idn.24xlarge",
            "r6idn.2xlarge",
            "r6idn.32xlarge",
            "r6idn.4xlarge",
            "r6idn.8xlarge",
            "r6idn.large",
            "r6idn.xlarge",
            "r6in.12xlarge",
            "r6in.16xlarge",
            "r6in.24xlarge",
            "r6in.2xlarge",
            "r6in.32xlarge",
            "r6in.4xlarge",
            "r6in.8xlarge",
            "r6in.large",
            "r6in.xlarge",
            "t1.micro",
            "t2.2xlarge",
            "t2.large",
            "t2.medium",
            "t2.micro",
            "t2.nano",
            "t2.small",
            "t2.xlarge",
            "t3.2xlarge",
            "t3.large",
            "t3.medium",
            "t3.micro",
            "t3.nano",
            "t3.small",
            "t3.xlarge",
            "t3a.2xlarge",
            "t3a.large",
            "t3a.medium",
            "t3a.micro",
            "t3a.nano",
            "t3a.small",
            "t3a.xlarge",
            "t4g.2xlarge",
            "t4g.large",
            "t4g.medium",
            "t4g.micro",
            "t4g.nano",
            "t4g.small",
            "t4g.xlarge",
            "trn1.2xlarge",
            "trn1.32xlarge",
            "u-12tb1.112xlarge",
            "u-12tb1.metal",
            "u-18tb1.112xlarge",
            "u-18tb1.metal",
            "u-24tb1.112xlarge",
            "u-24tb1.metal",
            "u-3tb1.56xlarge",
            "u-6tb1.112xlarge",
            "u-6tb1.56xlarge",
            "u-6tb1.metal",
            "u-9tb1.112xlarge",
            "u-9tb1.metal",
            "vt1.24xlarge",
            "vt1.3xlarge",
            "vt1.6xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.16xlarge",
            "x1e.2xlarge",
            "x1e.32xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.xlarge",
            "x2gd.12xlarge",
            "x2gd.16xlarge",
            "x2gd.2xlarge",
            "x2gd.4xlarge",
            "x2gd.8xlarge",
            "x2gd.large",
            "x2gd.medium",
            "x2gd.metal",
            "x2gd.xlarge",
            "x2idn.16xlarge",
            "x2idn.24xlarge",
            "x2idn.32xlarge",
            "x2idn.metal",
            "x2iedn.16xlarge",
            "x2iedn.24xlarge",
            "x2iedn.2xlarge",
            "x2iedn.32xlarge",
            "x2iedn.4xlarge",
            "x2iedn.8xlarge",
            "x2iedn.metal",
            "x2iedn.xlarge",
            "x2iezn.12xlarge",
            "x2iezn.2xlarge",
            "x2iezn.4xlarge",
            "x2iezn.6xlarge",
            "x2iezn.8xlarge",
            "x2iezn.metal",
            "z1d.12xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.large",
            "z1d.metal",
            "z1d.xlarge",
        ]
    ] = Field(default=None, alias="InstanceType")
    product_description: Optional[
        Literal[
            "Linux/UNIX", "Linux/UNIX (Amazon VPC)", "Windows", "Windows (Amazon VPC)"
        ]
    ] = Field(default=None, alias="ProductDescription")
    reserved_instances_id: Optional[str] = Field(
        default=None, alias="ReservedInstancesId"
    )
    start: Optional[datetime] = Field(default=None, alias="Start")
    state: Optional[
        Literal[
            "active",
            "payment-failed",
            "payment-pending",
            "queued",
            "queued-deleted",
            "retired",
        ]
    ] = Field(default=None, alias="State")
    usage_price: Optional[float] = Field(default=None, alias="UsagePrice")
    currency_code: Optional[Literal["USD"]] = Field(default=None, alias="CurrencyCode")
    instance_tenancy: Optional[Literal["dedicated", "default", "host"]] = Field(
        default=None, alias="InstanceTenancy"
    )
    offering_class: Optional[Literal["convertible", "standard"]] = Field(
        default=None, alias="OfferingClass"
    )
    offering_type: Optional[
        Literal[
            "All Upfront",
            "Heavy Utilization",
            "Light Utilization",
            "Medium Utilization",
            "No Upfront",
            "Partial Upfront",
        ]
    ] = Field(default=None, alias="OfferingType")
    recurring_charges: Optional[List[RecurringChargeModel]] = Field(
        default=None, alias="RecurringCharges"
    )
    scope: Optional[Literal["Availability Zone", "Region"]] = Field(
        default=None, alias="Scope"
    )
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class SecurityGroupRuleModel(BaseModel):
    security_group_rule_id: Optional[str] = Field(
        default=None, alias="SecurityGroupRuleId"
    )
    group_id: Optional[str] = Field(default=None, alias="GroupId")
    group_owner_id: Optional[str] = Field(default=None, alias="GroupOwnerId")
    is_egress: Optional[bool] = Field(default=None, alias="IsEgress")
    ip_protocol: Optional[str] = Field(default=None, alias="IpProtocol")
    from_port: Optional[int] = Field(default=None, alias="FromPort")
    to_port: Optional[int] = Field(default=None, alias="ToPort")
    cidr_ipv4: Optional[str] = Field(default=None, alias="CidrIpv4")
    cidr_ipv6: Optional[str] = Field(default=None, alias="CidrIpv6")
    prefix_list_id: Optional[str] = Field(default=None, alias="PrefixListId")
    referenced_group_info: Optional[ReferencedSecurityGroupModel] = Field(
        default=None, alias="ReferencedGroupInfo"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class RegisterInstanceEventNotificationAttributesRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    instance_tag_attribute: Optional[RegisterInstanceTagAttributeRequestModel] = Field(
        default=None, alias="InstanceTagAttribute"
    )


class RegisterTransitGatewayMulticastGroupMembersResultModel(BaseModel):
    registered_multicast_group_members: TransitGatewayMulticastRegisteredGroupMembersModel = Field(
        alias="RegisteredMulticastGroupMembers"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class RegisterTransitGatewayMulticastGroupSourcesResultModel(BaseModel):
    registered_multicast_group_sources: TransitGatewayMulticastRegisteredGroupSourcesModel = Field(
        alias="RegisteredMulticastGroupSources"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class StorageModel(BaseModel):
    s3: Optional[S3StorageModel] = Field(default=None, alias="S3")


class ScheduledInstanceAvailabilityModel(BaseModel):
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    available_instance_count: Optional[int] = Field(
        default=None, alias="AvailableInstanceCount"
    )
    first_slot_start_time: Optional[datetime] = Field(
        default=None, alias="FirstSlotStartTime"
    )
    hourly_price: Optional[str] = Field(default=None, alias="HourlyPrice")
    instance_type: Optional[str] = Field(default=None, alias="InstanceType")
    max_term_duration_in_days: Optional[int] = Field(
        default=None, alias="MaxTermDurationInDays"
    )
    min_term_duration_in_days: Optional[int] = Field(
        default=None, alias="MinTermDurationInDays"
    )
    network_platform: Optional[str] = Field(default=None, alias="NetworkPlatform")
    platform: Optional[str] = Field(default=None, alias="Platform")
    purchase_token: Optional[str] = Field(default=None, alias="PurchaseToken")
    recurrence: Optional[ScheduledInstanceRecurrenceModel] = Field(
        default=None, alias="Recurrence"
    )
    slot_duration_in_hours: Optional[int] = Field(
        default=None, alias="SlotDurationInHours"
    )
    total_scheduled_instance_hours: Optional[int] = Field(
        default=None, alias="TotalScheduledInstanceHours"
    )


class ScheduledInstanceModel(BaseModel):
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    create_date: Optional[datetime] = Field(default=None, alias="CreateDate")
    hourly_price: Optional[str] = Field(default=None, alias="HourlyPrice")
    instance_count: Optional[int] = Field(default=None, alias="InstanceCount")
    instance_type: Optional[str] = Field(default=None, alias="InstanceType")
    network_platform: Optional[str] = Field(default=None, alias="NetworkPlatform")
    next_slot_start_time: Optional[datetime] = Field(
        default=None, alias="NextSlotStartTime"
    )
    platform: Optional[str] = Field(default=None, alias="Platform")
    previous_slot_end_time: Optional[datetime] = Field(
        default=None, alias="PreviousSlotEndTime"
    )
    recurrence: Optional[ScheduledInstanceRecurrenceModel] = Field(
        default=None, alias="Recurrence"
    )
    scheduled_instance_id: Optional[str] = Field(
        default=None, alias="ScheduledInstanceId"
    )
    slot_duration_in_hours: Optional[int] = Field(
        default=None, alias="SlotDurationInHours"
    )
    term_end_date: Optional[datetime] = Field(default=None, alias="TermEndDate")
    term_start_date: Optional[datetime] = Field(default=None, alias="TermStartDate")
    total_scheduled_instance_hours: Optional[int] = Field(
        default=None, alias="TotalScheduledInstanceHours"
    )


class ScheduledInstancesBlockDeviceMappingModel(BaseModel):
    device_name: Optional[str] = Field(default=None, alias="DeviceName")
    ebs: Optional[ScheduledInstancesEbsModel] = Field(default=None, alias="Ebs")
    no_device: Optional[str] = Field(default=None, alias="NoDevice")
    virtual_name: Optional[str] = Field(default=None, alias="VirtualName")


class ScheduledInstancesNetworkInterfaceModel(BaseModel):
    associate_public_ip_address: Optional[bool] = Field(
        default=None, alias="AssociatePublicIpAddress"
    )
    delete_on_termination: Optional[bool] = Field(
        default=None, alias="DeleteOnTermination"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    device_index: Optional[int] = Field(default=None, alias="DeviceIndex")
    groups: Optional[Sequence[str]] = Field(default=None, alias="Groups")
    ipv6_address_count: Optional[int] = Field(default=None, alias="Ipv6AddressCount")
    ipv6_addresses: Optional[Sequence[ScheduledInstancesIpv6AddressModel]] = Field(
        default=None, alias="Ipv6Addresses"
    )
    network_interface_id: Optional[str] = Field(
        default=None, alias="NetworkInterfaceId"
    )
    private_ip_address: Optional[str] = Field(default=None, alias="PrivateIpAddress")
    private_ip_address_configs: Optional[
        Sequence[ScheduledInstancesPrivateIpAddressConfigModel]
    ] = Field(default=None, alias="PrivateIpAddressConfigs")
    secondary_private_ip_address_count: Optional[int] = Field(
        default=None, alias="SecondaryPrivateIpAddressCount"
    )
    subnet_id: Optional[str] = Field(default=None, alias="SubnetId")


class SearchTransitGatewayMulticastGroupsResultModel(BaseModel):
    multicast_groups: List[TransitGatewayMulticastGroupModel] = Field(
        alias="MulticastGroups"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class VpcEndpointModel(BaseModel):
    vpc_endpoint_id: Optional[str] = Field(default=None, alias="VpcEndpointId")
    vpc_endpoint_type: Optional[
        Literal["Gateway", "GatewayLoadBalancer", "Interface"]
    ] = Field(default=None, alias="VpcEndpointType")
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")
    service_name: Optional[str] = Field(default=None, alias="ServiceName")
    state: Optional[
        Literal[
            "Available",
            "Deleted",
            "Deleting",
            "Expired",
            "Failed",
            "Pending",
            "PendingAcceptance",
            "Rejected",
        ]
    ] = Field(default=None, alias="State")
    policy_document: Optional[str] = Field(default=None, alias="PolicyDocument")
    route_table_ids: Optional[List[str]] = Field(default=None, alias="RouteTableIds")
    subnet_ids: Optional[List[str]] = Field(default=None, alias="SubnetIds")
    groups: Optional[List[SecurityGroupIdentifierModel]] = Field(
        default=None, alias="Groups"
    )
    ip_address_type: Optional[Literal["dualstack", "ipv4", "ipv6"]] = Field(
        default=None, alias="IpAddressType"
    )
    dns_options: Optional[DnsOptionsModel] = Field(default=None, alias="DnsOptions")
    private_dns_enabled: Optional[bool] = Field(default=None, alias="PrivateDnsEnabled")
    requester_managed: Optional[bool] = Field(default=None, alias="RequesterManaged")
    network_interface_ids: Optional[List[str]] = Field(
        default=None, alias="NetworkInterfaceIds"
    )
    dns_entries: Optional[List[DnsEntryModel]] = Field(default=None, alias="DnsEntries")
    creation_timestamp: Optional[datetime] = Field(
        default=None, alias="CreationTimestamp"
    )
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    last_error: Optional[LastErrorModel] = Field(default=None, alias="LastError")


class SecurityGroupRuleUpdateModel(BaseModel):
    security_group_rule_id: str = Field(alias="SecurityGroupRuleId")
    security_group_rule: Optional[SecurityGroupRuleRequestModel] = Field(
        default=None, alias="SecurityGroupRule"
    )


class ServiceConfigurationModel(BaseModel):
    service_type: Optional[List[ServiceTypeDetailModel]] = Field(
        default=None, alias="ServiceType"
    )
    service_id: Optional[str] = Field(default=None, alias="ServiceId")
    service_name: Optional[str] = Field(default=None, alias="ServiceName")
    service_state: Optional[
        Literal["Available", "Deleted", "Deleting", "Failed", "Pending"]
    ] = Field(default=None, alias="ServiceState")
    availability_zones: Optional[List[str]] = Field(
        default=None, alias="AvailabilityZones"
    )
    acceptance_required: Optional[bool] = Field(
        default=None, alias="AcceptanceRequired"
    )
    manages_vpc_endpoints: Optional[bool] = Field(
        default=None, alias="ManagesVpcEndpoints"
    )
    network_load_balancer_arns: Optional[List[str]] = Field(
        default=None, alias="NetworkLoadBalancerArns"
    )
    gateway_load_balancer_arns: Optional[List[str]] = Field(
        default=None, alias="GatewayLoadBalancerArns"
    )
    supported_ip_address_types: Optional[List[Literal["ipv4", "ipv6"]]] = Field(
        default=None, alias="SupportedIpAddressTypes"
    )
    base_endpoint_dns_names: Optional[List[str]] = Field(
        default=None, alias="BaseEndpointDnsNames"
    )
    private_dns_name: Optional[str] = Field(default=None, alias="PrivateDnsName")
    private_dns_name_configuration: Optional[PrivateDnsNameConfigurationModel] = Field(
        default=None, alias="PrivateDnsNameConfiguration"
    )
    payer_responsibility: Optional[Literal["ServiceOwner"]] = Field(
        default=None, alias="PayerResponsibility"
    )
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class ServiceDetailModel(BaseModel):
    service_name: Optional[str] = Field(default=None, alias="ServiceName")
    service_id: Optional[str] = Field(default=None, alias="ServiceId")
    service_type: Optional[List[ServiceTypeDetailModel]] = Field(
        default=None, alias="ServiceType"
    )
    availability_zones: Optional[List[str]] = Field(
        default=None, alias="AvailabilityZones"
    )
    owner: Optional[str] = Field(default=None, alias="Owner")
    base_endpoint_dns_names: Optional[List[str]] = Field(
        default=None, alias="BaseEndpointDnsNames"
    )
    private_dns_name: Optional[str] = Field(default=None, alias="PrivateDnsName")
    private_dns_names: Optional[List[PrivateDnsDetailsModel]] = Field(
        default=None, alias="PrivateDnsNames"
    )
    vpc_endpoint_policy_supported: Optional[bool] = Field(
        default=None, alias="VpcEndpointPolicySupported"
    )
    acceptance_required: Optional[bool] = Field(
        default=None, alias="AcceptanceRequired"
    )
    manages_vpc_endpoints: Optional[bool] = Field(
        default=None, alias="ManagesVpcEndpoints"
    )
    payer_responsibility: Optional[Literal["ServiceOwner"]] = Field(
        default=None, alias="PayerResponsibility"
    )
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    private_dns_name_verification_state: Optional[
        Literal["failed", "pendingVerification", "verified"]
    ] = Field(default=None, alias="PrivateDnsNameVerificationState")
    supported_ip_address_types: Optional[List[Literal["ipv4", "ipv6"]]] = Field(
        default=None, alias="SupportedIpAddressTypes"
    )


class SnapshotDetailModel(BaseModel):
    description: Optional[str] = Field(default=None, alias="Description")
    device_name: Optional[str] = Field(default=None, alias="DeviceName")
    disk_image_size: Optional[float] = Field(default=None, alias="DiskImageSize")
    format: Optional[str] = Field(default=None, alias="Format")
    progress: Optional[str] = Field(default=None, alias="Progress")
    snapshot_id: Optional[str] = Field(default=None, alias="SnapshotId")
    status: Optional[str] = Field(default=None, alias="Status")
    status_message: Optional[str] = Field(default=None, alias="StatusMessage")
    url: Optional[str] = Field(default=None, alias="Url")
    user_bucket: Optional[UserBucketDetailsModel] = Field(
        default=None, alias="UserBucket"
    )


class SnapshotTaskDetailModel(BaseModel):
    description: Optional[str] = Field(default=None, alias="Description")
    disk_image_size: Optional[float] = Field(default=None, alias="DiskImageSize")
    encrypted: Optional[bool] = Field(default=None, alias="Encrypted")
    format: Optional[str] = Field(default=None, alias="Format")
    kms_key_id: Optional[str] = Field(default=None, alias="KmsKeyId")
    progress: Optional[str] = Field(default=None, alias="Progress")
    snapshot_id: Optional[str] = Field(default=None, alias="SnapshotId")
    status: Optional[str] = Field(default=None, alias="Status")
    status_message: Optional[str] = Field(default=None, alias="StatusMessage")
    url: Optional[str] = Field(default=None, alias="Url")
    user_bucket: Optional[UserBucketDetailsModel] = Field(
        default=None, alias="UserBucket"
    )


class SpotMaintenanceStrategiesModel(BaseModel):
    capacity_rebalance: Optional[SpotCapacityRebalanceModel] = Field(
        default=None, alias="CapacityRebalance"
    )


class SpotDatafeedSubscriptionModel(BaseModel):
    bucket: Optional[str] = Field(default=None, alias="Bucket")
    fault: Optional[SpotInstanceStateFaultModel] = Field(default=None, alias="Fault")
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    prefix: Optional[str] = Field(default=None, alias="Prefix")
    state: Optional[Literal["Active", "Inactive"]] = Field(default=None, alias="State")


class TransitGatewayMulticastDomainAssociationModel(BaseModel):
    transit_gateway_attachment_id: Optional[str] = Field(
        default=None, alias="TransitGatewayAttachmentId"
    )
    resource_id: Optional[str] = Field(default=None, alias="ResourceId")
    resource_type: Optional[
        Literal[
            "connect", "direct-connect-gateway", "peering", "tgw-peering", "vpc", "vpn"
        ]
    ] = Field(default=None, alias="ResourceType")
    resource_owner_id: Optional[str] = Field(default=None, alias="ResourceOwnerId")
    subnet: Optional[SubnetAssociationModel] = Field(default=None, alias="Subnet")


class TransitGatewayMulticastDomainAssociationsModel(BaseModel):
    transit_gateway_multicast_domain_id: Optional[str] = Field(
        default=None, alias="TransitGatewayMulticastDomainId"
    )
    transit_gateway_attachment_id: Optional[str] = Field(
        default=None, alias="TransitGatewayAttachmentId"
    )
    resource_id: Optional[str] = Field(default=None, alias="ResourceId")
    resource_type: Optional[
        Literal[
            "connect", "direct-connect-gateway", "peering", "tgw-peering", "vpc", "vpn"
        ]
    ] = Field(default=None, alias="ResourceType")
    resource_owner_id: Optional[str] = Field(default=None, alias="ResourceOwnerId")
    subnets: Optional[List[SubnetAssociationModel]] = Field(
        default=None, alias="Subnets"
    )


class SubnetIpv6CidrBlockAssociationModel(BaseModel):
    association_id: Optional[str] = Field(default=None, alias="AssociationId")
    ipv6_cidr_block: Optional[str] = Field(default=None, alias="Ipv6CidrBlock")
    ipv6_cidr_block_state: Optional[SubnetCidrBlockStateModel] = Field(
        default=None, alias="Ipv6CidrBlockState"
    )


class TargetReservationValueModel(BaseModel):
    reservation_value: Optional[ReservationValueModel] = Field(
        default=None, alias="ReservationValue"
    )
    target_configuration: Optional[TargetConfigurationModel] = Field(
        default=None, alias="TargetConfiguration"
    )


class TargetGroupsConfigModel(BaseModel):
    target_groups: Optional[List[TargetGroupModel]] = Field(
        default=None, alias="TargetGroups"
    )


class TrafficMirrorFilterRuleModel(BaseModel):
    traffic_mirror_filter_rule_id: Optional[str] = Field(
        default=None, alias="TrafficMirrorFilterRuleId"
    )
    traffic_mirror_filter_id: Optional[str] = Field(
        default=None, alias="TrafficMirrorFilterId"
    )
    traffic_direction: Optional[Literal["egress", "ingress"]] = Field(
        default=None, alias="TrafficDirection"
    )
    rule_number: Optional[int] = Field(default=None, alias="RuleNumber")
    rule_action: Optional[Literal["accept", "reject"]] = Field(
        default=None, alias="RuleAction"
    )
    protocol: Optional[int] = Field(default=None, alias="Protocol")
    destination_port_range: Optional[TrafficMirrorPortRangeModel] = Field(
        default=None, alias="DestinationPortRange"
    )
    source_port_range: Optional[TrafficMirrorPortRangeModel] = Field(
        default=None, alias="SourcePortRange"
    )
    destination_cidr_block: Optional[str] = Field(
        default=None, alias="DestinationCidrBlock"
    )
    source_cidr_block: Optional[str] = Field(default=None, alias="SourceCidrBlock")
    description: Optional[str] = Field(default=None, alias="Description")


class TransitGatewayAttachmentModel(BaseModel):
    transit_gateway_attachment_id: Optional[str] = Field(
        default=None, alias="TransitGatewayAttachmentId"
    )
    transit_gateway_id: Optional[str] = Field(default=None, alias="TransitGatewayId")
    transit_gateway_owner_id: Optional[str] = Field(
        default=None, alias="TransitGatewayOwnerId"
    )
    resource_owner_id: Optional[str] = Field(default=None, alias="ResourceOwnerId")
    resource_type: Optional[
        Literal[
            "connect", "direct-connect-gateway", "peering", "tgw-peering", "vpc", "vpn"
        ]
    ] = Field(default=None, alias="ResourceType")
    resource_id: Optional[str] = Field(default=None, alias="ResourceId")
    state: Optional[
        Literal[
            "available",
            "deleted",
            "deleting",
            "failed",
            "failing",
            "initiating",
            "initiatingRequest",
            "modifying",
            "pending",
            "pendingAcceptance",
            "rejected",
            "rejecting",
            "rollingBack",
        ]
    ] = Field(default=None, alias="State")
    association: Optional[TransitGatewayAttachmentAssociationModel] = Field(
        default=None, alias="Association"
    )
    creation_time: Optional[datetime] = Field(default=None, alias="CreationTime")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class TransitGatewayConnectPeerConfigurationModel(BaseModel):
    transit_gateway_address: Optional[str] = Field(
        default=None, alias="TransitGatewayAddress"
    )
    peer_address: Optional[str] = Field(default=None, alias="PeerAddress")
    inside_cidr_blocks: Optional[List[str]] = Field(
        default=None, alias="InsideCidrBlocks"
    )
    protocol: Optional[Literal["gre"]] = Field(default=None, alias="Protocol")
    bgp_configurations: Optional[
        List[TransitGatewayAttachmentBgpConfigurationModel]
    ] = Field(default=None, alias="BgpConfigurations")


class TransitGatewayConnectModel(BaseModel):
    transit_gateway_attachment_id: Optional[str] = Field(
        default=None, alias="TransitGatewayAttachmentId"
    )
    transport_transit_gateway_attachment_id: Optional[str] = Field(
        default=None, alias="TransportTransitGatewayAttachmentId"
    )
    transit_gateway_id: Optional[str] = Field(default=None, alias="TransitGatewayId")
    state: Optional[
        Literal[
            "available",
            "deleted",
            "deleting",
            "failed",
            "failing",
            "initiating",
            "initiatingRequest",
            "modifying",
            "pending",
            "pendingAcceptance",
            "rejected",
            "rejecting",
            "rollingBack",
        ]
    ] = Field(default=None, alias="State")
    creation_time: Optional[datetime] = Field(default=None, alias="CreationTime")
    options: Optional[TransitGatewayConnectOptionsModel] = Field(
        default=None, alias="Options"
    )
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class TransitGatewayMulticastDomainModel(BaseModel):
    transit_gateway_multicast_domain_id: Optional[str] = Field(
        default=None, alias="TransitGatewayMulticastDomainId"
    )
    transit_gateway_id: Optional[str] = Field(default=None, alias="TransitGatewayId")
    transit_gateway_multicast_domain_arn: Optional[str] = Field(
        default=None, alias="TransitGatewayMulticastDomainArn"
    )
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    options: Optional[TransitGatewayMulticastDomainOptionsModel] = Field(
        default=None, alias="Options"
    )
    state: Optional[Literal["available", "deleted", "deleting", "pending"]] = Field(
        default=None, alias="State"
    )
    creation_time: Optional[datetime] = Field(default=None, alias="CreationTime")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class TransitGatewayModel(BaseModel):
    transit_gateway_id: Optional[str] = Field(default=None, alias="TransitGatewayId")
    transit_gateway_arn: Optional[str] = Field(default=None, alias="TransitGatewayArn")
    state: Optional[
        Literal["available", "deleted", "deleting", "modifying", "pending"]
    ] = Field(default=None, alias="State")
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    description: Optional[str] = Field(default=None, alias="Description")
    creation_time: Optional[datetime] = Field(default=None, alias="CreationTime")
    options: Optional[TransitGatewayOptionsModel] = Field(default=None, alias="Options")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class TransitGatewayPeeringAttachmentModel(BaseModel):
    transit_gateway_attachment_id: Optional[str] = Field(
        default=None, alias="TransitGatewayAttachmentId"
    )
    accepter_transit_gateway_attachment_id: Optional[str] = Field(
        default=None, alias="AccepterTransitGatewayAttachmentId"
    )
    requester_tgw_info: Optional[PeeringTgwInfoModel] = Field(
        default=None, alias="RequesterTgwInfo"
    )
    accepter_tgw_info: Optional[PeeringTgwInfoModel] = Field(
        default=None, alias="AccepterTgwInfo"
    )
    options: Optional[TransitGatewayPeeringAttachmentOptionsModel] = Field(
        default=None, alias="Options"
    )
    status: Optional[PeeringAttachmentStatusModel] = Field(default=None, alias="Status")
    state: Optional[
        Literal[
            "available",
            "deleted",
            "deleting",
            "failed",
            "failing",
            "initiating",
            "initiatingRequest",
            "modifying",
            "pending",
            "pendingAcceptance",
            "rejected",
            "rejecting",
            "rollingBack",
        ]
    ] = Field(default=None, alias="State")
    creation_time: Optional[datetime] = Field(default=None, alias="CreationTime")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class TransitGatewayPolicyRuleModel(BaseModel):
    source_cidr_block: Optional[str] = Field(default=None, alias="SourceCidrBlock")
    source_port_range: Optional[str] = Field(default=None, alias="SourcePortRange")
    destination_cidr_block: Optional[str] = Field(
        default=None, alias="DestinationCidrBlock"
    )
    destination_port_range: Optional[str] = Field(
        default=None, alias="DestinationPortRange"
    )
    protocol: Optional[str] = Field(default=None, alias="Protocol")
    meta_data: Optional[TransitGatewayPolicyRuleMetaDataModel] = Field(
        default=None, alias="MetaData"
    )


class TransitGatewayPrefixListReferenceModel(BaseModel):
    transit_gateway_route_table_id: Optional[str] = Field(
        default=None, alias="TransitGatewayRouteTableId"
    )
    prefix_list_id: Optional[str] = Field(default=None, alias="PrefixListId")
    prefix_list_owner_id: Optional[str] = Field(default=None, alias="PrefixListOwnerId")
    state: Optional[Literal["available", "deleting", "modifying", "pending"]] = Field(
        default=None, alias="State"
    )
    blackhole: Optional[bool] = Field(default=None, alias="Blackhole")
    transit_gateway_attachment: Optional[
        TransitGatewayPrefixListAttachmentModel
    ] = Field(default=None, alias="TransitGatewayAttachment")


class TransitGatewayRouteModel(BaseModel):
    destination_cidr_block: Optional[str] = Field(
        default=None, alias="DestinationCidrBlock"
    )
    prefix_list_id: Optional[str] = Field(default=None, alias="PrefixListId")
    transit_gateway_route_table_announcement_id: Optional[str] = Field(
        default=None, alias="TransitGatewayRouteTableAnnouncementId"
    )
    transit_gateway_attachments: Optional[
        List[TransitGatewayRouteAttachmentModel]
    ] = Field(default=None, alias="TransitGatewayAttachments")
    type: Optional[Literal["propagated", "static"]] = Field(default=None, alias="Type")
    state: Optional[
        Literal["active", "blackhole", "deleted", "deleting", "pending"]
    ] = Field(default=None, alias="State")


class TransitGatewayVpcAttachmentModel(BaseModel):
    transit_gateway_attachment_id: Optional[str] = Field(
        default=None, alias="TransitGatewayAttachmentId"
    )
    transit_gateway_id: Optional[str] = Field(default=None, alias="TransitGatewayId")
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")
    vpc_owner_id: Optional[str] = Field(default=None, alias="VpcOwnerId")
    state: Optional[
        Literal[
            "available",
            "deleted",
            "deleting",
            "failed",
            "failing",
            "initiating",
            "initiatingRequest",
            "modifying",
            "pending",
            "pendingAcceptance",
            "rejected",
            "rejecting",
            "rollingBack",
        ]
    ] = Field(default=None, alias="State")
    subnet_ids: Optional[List[str]] = Field(default=None, alias="SubnetIds")
    creation_time: Optional[datetime] = Field(default=None, alias="CreationTime")
    options: Optional[TransitGatewayVpcAttachmentOptionsModel] = Field(
        default=None, alias="Options"
    )
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class UnsuccessfulInstanceCreditSpecificationItemModel(BaseModel):
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    error: Optional[UnsuccessfulInstanceCreditSpecificationItemErrorModel] = Field(
        default=None, alias="Error"
    )


class UnsuccessfulItemModel(BaseModel):
    error: Optional[UnsuccessfulItemErrorModel] = Field(default=None, alias="Error")
    resource_id: Optional[str] = Field(default=None, alias="ResourceId")


class ValidationWarningModel(BaseModel):
    errors: Optional[List[ValidationErrorModel]] = Field(default=None, alias="Errors")


class VerifiedAccessEndpointModel(BaseModel):
    verified_access_instance_id: Optional[str] = Field(
        default=None, alias="VerifiedAccessInstanceId"
    )
    verified_access_group_id: Optional[str] = Field(
        default=None, alias="VerifiedAccessGroupId"
    )
    verified_access_endpoint_id: Optional[str] = Field(
        default=None, alias="VerifiedAccessEndpointId"
    )
    application_domain: Optional[str] = Field(default=None, alias="ApplicationDomain")
    endpoint_type: Optional[Literal["load-balancer", "network-interface"]] = Field(
        default=None, alias="EndpointType"
    )
    attachment_type: Optional[Literal["vpc"]] = Field(
        default=None, alias="AttachmentType"
    )
    domain_certificate_arn: Optional[str] = Field(
        default=None, alias="DomainCertificateArn"
    )
    endpoint_domain: Optional[str] = Field(default=None, alias="EndpointDomain")
    device_validation_domain: Optional[str] = Field(
        default=None, alias="DeviceValidationDomain"
    )
    security_group_ids: Optional[List[str]] = Field(
        default=None, alias="SecurityGroupIds"
    )
    load_balancer_options: Optional[
        VerifiedAccessEndpointLoadBalancerOptionsModel
    ] = Field(default=None, alias="LoadBalancerOptions")
    network_interface_options: Optional[VerifiedAccessEndpointEniOptionsModel] = Field(
        default=None, alias="NetworkInterfaceOptions"
    )
    status: Optional[VerifiedAccessEndpointStatusModel] = Field(
        default=None, alias="Status"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    creation_time: Optional[str] = Field(default=None, alias="CreationTime")
    last_updated_time: Optional[str] = Field(default=None, alias="LastUpdatedTime")
    deletion_time: Optional[str] = Field(default=None, alias="DeletionTime")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class VerifiedAccessInstanceModel(BaseModel):
    verified_access_instance_id: Optional[str] = Field(
        default=None, alias="VerifiedAccessInstanceId"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    verified_access_trust_providers: Optional[
        List[VerifiedAccessTrustProviderCondensedModel]
    ] = Field(default=None, alias="VerifiedAccessTrustProviders")
    creation_time: Optional[str] = Field(default=None, alias="CreationTime")
    last_updated_time: Optional[str] = Field(default=None, alias="LastUpdatedTime")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class VerifiedAccessLogCloudWatchLogsDestinationModel(BaseModel):
    enabled: Optional[bool] = Field(default=None, alias="Enabled")
    delivery_status: Optional[VerifiedAccessLogDeliveryStatusModel] = Field(
        default=None, alias="DeliveryStatus"
    )
    log_group: Optional[str] = Field(default=None, alias="LogGroup")


class VerifiedAccessLogKinesisDataFirehoseDestinationModel(BaseModel):
    enabled: Optional[bool] = Field(default=None, alias="Enabled")
    delivery_status: Optional[VerifiedAccessLogDeliveryStatusModel] = Field(
        default=None, alias="DeliveryStatus"
    )
    delivery_stream: Optional[str] = Field(default=None, alias="DeliveryStream")


class VerifiedAccessLogS3DestinationModel(BaseModel):
    enabled: Optional[bool] = Field(default=None, alias="Enabled")
    delivery_status: Optional[VerifiedAccessLogDeliveryStatusModel] = Field(
        default=None, alias="DeliveryStatus"
    )
    bucket_name: Optional[str] = Field(default=None, alias="BucketName")
    prefix: Optional[str] = Field(default=None, alias="Prefix")
    bucket_owner: Optional[str] = Field(default=None, alias="BucketOwner")


class VerifiedAccessLogOptionsModel(BaseModel):
    s3: Optional[VerifiedAccessLogS3DestinationOptionsModel] = Field(
        default=None, alias="S3"
    )
    cloud_watch_logs: Optional[
        VerifiedAccessLogCloudWatchLogsDestinationOptionsModel
    ] = Field(default=None, alias="CloudWatchLogs")
    kinesis_data_firehose: Optional[
        VerifiedAccessLogKinesisDataFirehoseDestinationOptionsModel
    ] = Field(default=None, alias="KinesisDataFirehose")


class VolumeResponseMetadataModel(BaseModel):
    attachments: List[VolumeAttachmentModel] = Field(alias="Attachments")
    availability_zone: str = Field(alias="AvailabilityZone")
    create_time: datetime = Field(alias="CreateTime")
    encrypted: bool = Field(alias="Encrypted")
    kms_key_id: str = Field(alias="KmsKeyId")
    outpost_arn: str = Field(alias="OutpostArn")
    size: int = Field(alias="Size")
    snapshot_id: str = Field(alias="SnapshotId")
    state: Literal[
        "available", "creating", "deleted", "deleting", "error", "in-use"
    ] = Field(alias="State")
    volume_id: str = Field(alias="VolumeId")
    iops: int = Field(alias="Iops")
    tags: List[TagModel] = Field(alias="Tags")
    volume_type: Literal["gp2", "gp3", "io1", "io2", "sc1", "st1", "standard"] = Field(
        alias="VolumeType"
    )
    fast_restored: bool = Field(alias="FastRestored")
    multi_attach_enabled: bool = Field(alias="MultiAttachEnabled")
    throughput: int = Field(alias="Throughput")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class VolumeModel(BaseModel):
    attachments: Optional[List[VolumeAttachmentModel]] = Field(
        default=None, alias="Attachments"
    )
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    create_time: Optional[datetime] = Field(default=None, alias="CreateTime")
    encrypted: Optional[bool] = Field(default=None, alias="Encrypted")
    kms_key_id: Optional[str] = Field(default=None, alias="KmsKeyId")
    outpost_arn: Optional[str] = Field(default=None, alias="OutpostArn")
    size: Optional[int] = Field(default=None, alias="Size")
    snapshot_id: Optional[str] = Field(default=None, alias="SnapshotId")
    state: Optional[
        Literal["available", "creating", "deleted", "deleting", "error", "in-use"]
    ] = Field(default=None, alias="State")
    volume_id: Optional[str] = Field(default=None, alias="VolumeId")
    iops: Optional[int] = Field(default=None, alias="Iops")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    volume_type: Optional[
        Literal["gp2", "gp3", "io1", "io2", "sc1", "st1", "standard"]
    ] = Field(default=None, alias="VolumeType")
    fast_restored: Optional[bool] = Field(default=None, alias="FastRestored")
    multi_attach_enabled: Optional[bool] = Field(
        default=None, alias="MultiAttachEnabled"
    )
    throughput: Optional[int] = Field(default=None, alias="Throughput")


class VolumeStatusInfoModel(BaseModel):
    details: Optional[List[VolumeStatusDetailsModel]] = Field(
        default=None, alias="Details"
    )
    status: Optional[Literal["impaired", "insufficient-data", "ok"]] = Field(
        default=None, alias="Status"
    )


class VpcCidrBlockAssociationModel(BaseModel):
    association_id: Optional[str] = Field(default=None, alias="AssociationId")
    cidr_block: Optional[str] = Field(default=None, alias="CidrBlock")
    cidr_block_state: Optional[VpcCidrBlockStateModel] = Field(
        default=None, alias="CidrBlockState"
    )


class VpcIpv6CidrBlockAssociationModel(BaseModel):
    association_id: Optional[str] = Field(default=None, alias="AssociationId")
    ipv6_cidr_block: Optional[str] = Field(default=None, alias="Ipv6CidrBlock")
    ipv6_cidr_block_state: Optional[VpcCidrBlockStateModel] = Field(
        default=None, alias="Ipv6CidrBlockState"
    )
    network_border_group: Optional[str] = Field(
        default=None, alias="NetworkBorderGroup"
    )
    ipv6_pool: Optional[str] = Field(default=None, alias="Ipv6Pool")


class VpcPeeringConnectionVpcInfoResponseMetadataModel(BaseModel):
    cidr_block: str = Field(alias="CidrBlock")
    ipv6_cidr_block_set: List[Ipv6CidrBlockModel] = Field(alias="Ipv6CidrBlockSet")
    cidr_block_set: List[CidrBlockModel] = Field(alias="CidrBlockSet")
    owner_id: str = Field(alias="OwnerId")
    peering_options: VpcPeeringConnectionOptionsDescriptionModel = Field(
        alias="PeeringOptions"
    )
    vpc_id: str = Field(alias="VpcId")
    region: str = Field(alias="Region")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class VpcPeeringConnectionVpcInfoModel(BaseModel):
    cidr_block: Optional[str] = Field(default=None, alias="CidrBlock")
    ipv6_cidr_block_set: Optional[List[Ipv6CidrBlockModel]] = Field(
        default=None, alias="Ipv6CidrBlockSet"
    )
    cidr_block_set: Optional[List[CidrBlockModel]] = Field(
        default=None, alias="CidrBlockSet"
    )
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    peering_options: Optional[VpcPeeringConnectionOptionsDescriptionModel] = Field(
        default=None, alias="PeeringOptions"
    )
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")
    region: Optional[str] = Field(default=None, alias="Region")


class DescribeAccountAttributesResultModel(BaseModel):
    account_attributes: List[AccountAttributeModel] = Field(alias="AccountAttributes")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeAddressesAttributeResultModel(BaseModel):
    addresses: List[AddressAttributeModel] = Field(alias="Addresses")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyAddressAttributeResultModel(BaseModel):
    address: AddressAttributeModel = Field(alias="Address")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ResetAddressAttributeResultModel(BaseModel):
    address: AddressAttributeModel = Field(alias="Address")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeAddressesResultModel(BaseModel):
    addresses: List[AddressModel] = Field(alias="Addresses")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeVpcEndpointServicePermissionsResultModel(BaseModel):
    allowed_principals: List[AllowedPrincipalModel] = Field(alias="AllowedPrincipals")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateCarrierGatewayResultModel(BaseModel):
    carrier_gateway: CarrierGatewayModel = Field(alias="CarrierGateway")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteCarrierGatewayResultModel(BaseModel):
    carrier_gateway: CarrierGatewayModel = Field(alias="CarrierGateway")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeCarrierGatewaysResultModel(BaseModel):
    carrier_gateways: List[CarrierGatewayModel] = Field(alias="CarrierGateways")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateCoipPoolResultModel(BaseModel):
    coip_pool: CoipPoolModel = Field(alias="CoipPool")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteCoipPoolResultModel(BaseModel):
    coip_pool: CoipPoolModel = Field(alias="CoipPool")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeCoipPoolsResultModel(BaseModel):
    coip_pools: List[CoipPoolModel] = Field(alias="CoipPools")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateCustomerGatewayResultModel(BaseModel):
    customer_gateway: CustomerGatewayModel = Field(alias="CustomerGateway")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeCustomerGatewaysResultModel(BaseModel):
    customer_gateways: List[CustomerGatewayModel] = Field(alias="CustomerGateways")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeHostReservationsResultModel(BaseModel):
    host_reservation_set: List[HostReservationModel] = Field(alias="HostReservationSet")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AssociateInstanceEventWindowRequestModel(BaseModel):
    instance_event_window_id: str = Field(alias="InstanceEventWindowId")
    association_target: InstanceEventWindowAssociationRequestModel = Field(
        alias="AssociationTarget"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class InstanceEventWindowModel(BaseModel):
    instance_event_window_id: Optional[str] = Field(
        default=None, alias="InstanceEventWindowId"
    )
    time_ranges: Optional[List[InstanceEventWindowTimeRangeModel]] = Field(
        default=None, alias="TimeRanges"
    )
    name: Optional[str] = Field(default=None, alias="Name")
    cron_expression: Optional[str] = Field(default=None, alias="CronExpression")
    association_target: Optional[InstanceEventWindowAssociationTargetModel] = Field(
        default=None, alias="AssociationTarget"
    )
    state: Optional[Literal["active", "creating", "deleted", "deleting"]] = Field(
        default=None, alias="State"
    )
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class DisassociateInstanceEventWindowRequestModel(BaseModel):
    instance_event_window_id: str = Field(alias="InstanceEventWindowId")
    association_target: InstanceEventWindowDisassociationRequestModel = Field(
        alias="AssociationTarget"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class AssociateIpamResourceDiscoveryResultModel(BaseModel):
    ipam_resource_discovery_association: IpamResourceDiscoveryAssociationModel = Field(
        alias="IpamResourceDiscoveryAssociation"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeIpamResourceDiscoveryAssociationsResultModel(BaseModel):
    ipam_resource_discovery_associations: List[
        IpamResourceDiscoveryAssociationModel
    ] = Field(alias="IpamResourceDiscoveryAssociations")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DisassociateIpamResourceDiscoveryResultModel(BaseModel):
    ipam_resource_discovery_association: IpamResourceDiscoveryAssociationModel = Field(
        alias="IpamResourceDiscoveryAssociation"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateIpamScopeResultModel(BaseModel):
    ipam_scope: IpamScopeModel = Field(alias="IpamScope")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteIpamScopeResultModel(BaseModel):
    ipam_scope: IpamScopeModel = Field(alias="IpamScope")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeIpamScopesResultModel(BaseModel):
    next_token: str = Field(alias="NextToken")
    ipam_scopes: List[IpamScopeModel] = Field(alias="IpamScopes")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyIpamScopeResultModel(BaseModel):
    ipam_scope: IpamScopeModel = Field(alias="IpamScope")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeKeyPairsResultModel(BaseModel):
    key_pairs: List[KeyPairInfoModel] = Field(alias="KeyPairs")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteLaunchTemplateResultModel(BaseModel):
    launch_template: LaunchTemplateModel = Field(alias="LaunchTemplate")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeLaunchTemplatesResultModel(BaseModel):
    launch_templates: List[LaunchTemplateModel] = Field(alias="LaunchTemplates")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyLaunchTemplateResultModel(BaseModel):
    launch_template: LaunchTemplateModel = Field(alias="LaunchTemplate")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResultModel(
    BaseModel
):
    local_gateway_route_table_virtual_interface_group_association: LocalGatewayRouteTableVirtualInterfaceGroupAssociationModel = Field(
        alias="LocalGatewayRouteTableVirtualInterfaceGroupAssociation"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResultModel(
    BaseModel
):
    local_gateway_route_table_virtual_interface_group_association: LocalGatewayRouteTableVirtualInterfaceGroupAssociationModel = Field(
        alias="LocalGatewayRouteTableVirtualInterfaceGroupAssociation"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResultModel(
    BaseModel
):
    local_gateway_route_table_virtual_interface_group_associations: List[
        LocalGatewayRouteTableVirtualInterfaceGroupAssociationModel
    ] = Field(alias="LocalGatewayRouteTableVirtualInterfaceGroupAssociations")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateLocalGatewayRouteTableVpcAssociationResultModel(BaseModel):
    local_gateway_route_table_vpc_association: LocalGatewayRouteTableVpcAssociationModel = Field(
        alias="LocalGatewayRouteTableVpcAssociation"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteLocalGatewayRouteTableVpcAssociationResultModel(BaseModel):
    local_gateway_route_table_vpc_association: LocalGatewayRouteTableVpcAssociationModel = Field(
        alias="LocalGatewayRouteTableVpcAssociation"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeLocalGatewayRouteTableVpcAssociationsResultModel(BaseModel):
    local_gateway_route_table_vpc_associations: List[
        LocalGatewayRouteTableVpcAssociationModel
    ] = Field(alias="LocalGatewayRouteTableVpcAssociations")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeLocalGatewaysResultModel(BaseModel):
    local_gateways: List[LocalGatewayModel] = Field(alias="LocalGateways")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeLocalGatewayVirtualInterfaceGroupsResultModel(BaseModel):
    local_gateway_virtual_interface_groups: List[
        LocalGatewayVirtualInterfaceGroupModel
    ] = Field(alias="LocalGatewayVirtualInterfaceGroups")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeLocalGatewayVirtualInterfacesResultModel(BaseModel):
    local_gateway_virtual_interfaces: List[LocalGatewayVirtualInterfaceModel] = Field(
        alias="LocalGatewayVirtualInterfaces"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateManagedPrefixListResultModel(BaseModel):
    prefix_list: ManagedPrefixListModel = Field(alias="PrefixList")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteManagedPrefixListResultModel(BaseModel):
    prefix_list: ManagedPrefixListModel = Field(alias="PrefixList")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeManagedPrefixListsResultModel(BaseModel):
    next_token: str = Field(alias="NextToken")
    prefix_lists: List[ManagedPrefixListModel] = Field(alias="PrefixLists")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyManagedPrefixListResultModel(BaseModel):
    prefix_list: ManagedPrefixListModel = Field(alias="PrefixList")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class RestoreManagedPrefixListVersionResultModel(BaseModel):
    prefix_list: ManagedPrefixListModel = Field(alias="PrefixList")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeNetworkInsightsAccessScopeAnalysesResultModel(BaseModel):
    network_insights_access_scope_analyses: List[
        NetworkInsightsAccessScopeAnalysisModel
    ] = Field(alias="NetworkInsightsAccessScopeAnalyses")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class StartNetworkInsightsAccessScopeAnalysisResultModel(BaseModel):
    network_insights_access_scope_analysis: NetworkInsightsAccessScopeAnalysisModel = (
        Field(alias="NetworkInsightsAccessScopeAnalysis")
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeNetworkInsightsAccessScopesResultModel(BaseModel):
    network_insights_access_scopes: List[NetworkInsightsAccessScopeModel] = Field(
        alias="NetworkInsightsAccessScopes"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateNetworkInsightsPathResultModel(BaseModel):
    network_insights_path: NetworkInsightsPathModel = Field(alias="NetworkInsightsPath")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeNetworkInsightsPathsResultModel(BaseModel):
    network_insights_paths: List[NetworkInsightsPathModel] = Field(
        alias="NetworkInsightsPaths"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreatePlacementGroupResultModel(BaseModel):
    placement_group: PlacementGroupModel = Field(alias="PlacementGroup")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribePlacementGroupsResultModel(BaseModel):
    placement_groups: List[PlacementGroupModel] = Field(alias="PlacementGroups")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateReplaceRootVolumeTaskResultModel(BaseModel):
    replace_root_volume_task: ReplaceRootVolumeTaskModel = Field(
        alias="ReplaceRootVolumeTask"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeReplaceRootVolumeTasksResultModel(BaseModel):
    replace_root_volume_tasks: List[ReplaceRootVolumeTaskModel] = Field(
        alias="ReplaceRootVolumeTasks"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateSnapshotsResultModel(BaseModel):
    snapshots: List[SnapshotInfoModel] = Field(alias="Snapshots")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeSnapshotTierStatusResultModel(BaseModel):
    snapshot_tier_statuses: List[SnapshotTierStatusModel] = Field(
        alias="SnapshotTierStatuses"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeSnapshotsResultModel(BaseModel):
    snapshots: List[SnapshotModel] = Field(alias="Snapshots")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateSubnetCidrReservationResultModel(BaseModel):
    subnet_cidr_reservation: SubnetCidrReservationModel = Field(
        alias="SubnetCidrReservation"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteSubnetCidrReservationResultModel(BaseModel):
    deleted_subnet_cidr_reservation: SubnetCidrReservationModel = Field(
        alias="DeletedSubnetCidrReservation"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetSubnetCidrReservationsResultModel(BaseModel):
    subnet_ipv4_cidr_reservations: List[SubnetCidrReservationModel] = Field(
        alias="SubnetIpv4CidrReservations"
    )
    subnet_ipv6_cidr_reservations: List[SubnetCidrReservationModel] = Field(
        alias="SubnetIpv6CidrReservations"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AcceptAddressTransferRequestModel(BaseModel):
    address: str = Field(alias="Address")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class AllocateAddressRequestModel(BaseModel):
    domain: Optional[Literal["standard", "vpc"]] = Field(default=None, alias="Domain")
    address: Optional[str] = Field(default=None, alias="Address")
    public_ipv4_pool: Optional[str] = Field(default=None, alias="PublicIpv4Pool")
    network_border_group: Optional[str] = Field(
        default=None, alias="NetworkBorderGroup"
    )
    customer_owned_ipv4_pool: Optional[str] = Field(
        default=None, alias="CustomerOwnedIpv4Pool"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class AllocateHostsRequestModel(BaseModel):
    availability_zone: str = Field(alias="AvailabilityZone")
    quantity: int = Field(alias="Quantity")
    auto_placement: Optional[Literal["off", "on"]] = Field(
        default=None, alias="AutoPlacement"
    )
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    instance_type: Optional[str] = Field(default=None, alias="InstanceType")
    instance_family: Optional[str] = Field(default=None, alias="InstanceFamily")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    host_recovery: Optional[Literal["off", "on"]] = Field(
        default=None, alias="HostRecovery"
    )
    outpost_arn: Optional[str] = Field(default=None, alias="OutpostArn")
    host_maintenance: Optional[Literal["off", "on"]] = Field(
        default=None, alias="HostMaintenance"
    )


class AssociateIpamResourceDiscoveryRequestModel(BaseModel):
    ipam_id: str = Field(alias="IpamId")
    ipam_resource_discovery_id: str = Field(alias="IpamResourceDiscoveryId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    client_token: Optional[str] = Field(default=None, alias="ClientToken")


class CopySnapshotRequestModel(BaseModel):
    source_region: str = Field(alias="SourceRegion")
    source_snapshot_id: str = Field(alias="SourceSnapshotId")
    description: Optional[str] = Field(default=None, alias="Description")
    destination_outpost_arn: Optional[str] = Field(
        default=None, alias="DestinationOutpostArn"
    )
    destination_region: Optional[str] = Field(default=None, alias="DestinationRegion")
    encrypted: Optional[bool] = Field(default=None, alias="Encrypted")
    kms_key_id: Optional[str] = Field(default=None, alias="KmsKeyId")
    presigned_url: Optional[str] = Field(default=None, alias="PresignedUrl")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CopySnapshotRequestSnapshotCopyModel(BaseModel):
    source_region: str = Field(alias="SourceRegion")
    description: Optional[str] = Field(default=None, alias="Description")
    destination_outpost_arn: Optional[str] = Field(
        default=None, alias="DestinationOutpostArn"
    )
    destination_region: Optional[str] = Field(default=None, alias="DestinationRegion")
    encrypted: Optional[bool] = Field(default=None, alias="Encrypted")
    kms_key_id: Optional[str] = Field(default=None, alias="KmsKeyId")
    presigned_url: Optional[str] = Field(default=None, alias="PresignedUrl")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateCapacityReservationFleetRequestModel(BaseModel):
    instance_type_specifications: Sequence[
        ReservationFleetInstanceSpecificationModel
    ] = Field(alias="InstanceTypeSpecifications")
    total_target_capacity: int = Field(alias="TotalTargetCapacity")
    allocation_strategy: Optional[str] = Field(default=None, alias="AllocationStrategy")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    tenancy: Optional[Literal["default"]] = Field(default=None, alias="Tenancy")
    end_date: Optional[Union[datetime, str]] = Field(default=None, alias="EndDate")
    instance_match_criteria: Optional[Literal["open"]] = Field(
        default=None, alias="InstanceMatchCriteria"
    )
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateCapacityReservationRequestModel(BaseModel):
    instance_type: str = Field(alias="InstanceType")
    instance_platform: Literal[
        "Linux with SQL Server Enterprise",
        "Linux with SQL Server Standard",
        "Linux with SQL Server Web",
        "Linux/UNIX",
        "RHEL with HA",
        "RHEL with HA and SQL Server Enterprise",
        "RHEL with HA and SQL Server Standard",
        "RHEL with SQL Server Enterprise",
        "RHEL with SQL Server Standard",
        "RHEL with SQL Server Web",
        "Red Hat Enterprise Linux",
        "SUSE Linux",
        "Windows",
        "Windows with SQL Server",
        "Windows with SQL Server Enterprise",
        "Windows with SQL Server Standard",
        "Windows with SQL Server Web",
    ] = Field(alias="InstancePlatform")
    instance_count: int = Field(alias="InstanceCount")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    availability_zone_id: Optional[str] = Field(
        default=None, alias="AvailabilityZoneId"
    )
    tenancy: Optional[Literal["dedicated", "default"]] = Field(
        default=None, alias="Tenancy"
    )
    ebs_optimized: Optional[bool] = Field(default=None, alias="EbsOptimized")
    ephemeral_storage: Optional[bool] = Field(default=None, alias="EphemeralStorage")
    end_date: Optional[Union[datetime, str]] = Field(default=None, alias="EndDate")
    end_date_type: Optional[Literal["limited", "unlimited"]] = Field(
        default=None, alias="EndDateType"
    )
    instance_match_criteria: Optional[Literal["open", "targeted"]] = Field(
        default=None, alias="InstanceMatchCriteria"
    )
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    outpost_arn: Optional[str] = Field(default=None, alias="OutpostArn")
    placement_group_arn: Optional[str] = Field(default=None, alias="PlacementGroupArn")


class CreateCarrierGatewayRequestModel(BaseModel):
    vpc_id: str = Field(alias="VpcId")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")


class CreateCoipPoolRequestModel(BaseModel):
    local_gateway_route_table_id: str = Field(alias="LocalGatewayRouteTableId")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateCustomerGatewayRequestModel(BaseModel):
    bgp_asn: int = Field(alias="BgpAsn")
    type: Literal["ipsec.1"] = Field(alias="Type")
    public_ip: Optional[str] = Field(default=None, alias="PublicIp")
    certificate_arn: Optional[str] = Field(default=None, alias="CertificateArn")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    device_name: Optional[str] = Field(default=None, alias="DeviceName")
    ip_address: Optional[str] = Field(default=None, alias="IpAddress")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateDhcpOptionsRequestModel(BaseModel):
    dhcp_configurations: Sequence[NewDhcpConfigurationModel] = Field(
        alias="DhcpConfigurations"
    )
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateDhcpOptionsRequestServiceResourceCreateDhcpOptionsModel(BaseModel):
    dhcp_configurations: Sequence[NewDhcpConfigurationModel] = Field(
        alias="DhcpConfigurations"
    )
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateEgressOnlyInternetGatewayRequestModel(BaseModel):
    vpc_id: str = Field(alias="VpcId")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class CreateFlowLogsRequestModel(BaseModel):
    resource_ids: Sequence[str] = Field(alias="ResourceIds")
    resource_type: Literal[
        "NetworkInterface",
        "Subnet",
        "TransitGateway",
        "TransitGatewayAttachment",
        "VPC",
    ] = Field(alias="ResourceType")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    deliver_logs_permission_arn: Optional[str] = Field(
        default=None, alias="DeliverLogsPermissionArn"
    )
    deliver_cross_account_role: Optional[str] = Field(
        default=None, alias="DeliverCrossAccountRole"
    )
    log_group_name: Optional[str] = Field(default=None, alias="LogGroupName")
    traffic_type: Optional[Literal["ACCEPT", "ALL", "REJECT"]] = Field(
        default=None, alias="TrafficType"
    )
    log_destination_type: Optional[
        Literal["cloud-watch-logs", "kinesis-data-firehose", "s3"]
    ] = Field(default=None, alias="LogDestinationType")
    log_destination: Optional[str] = Field(default=None, alias="LogDestination")
    log_format: Optional[str] = Field(default=None, alias="LogFormat")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    max_aggregation_interval: Optional[int] = Field(
        default=None, alias="MaxAggregationInterval"
    )
    destination_options: Optional[DestinationOptionsRequestModel] = Field(
        default=None, alias="DestinationOptions"
    )


class CreateFpgaImageRequestModel(BaseModel):
    input_storage_location: StorageLocationModel = Field(alias="InputStorageLocation")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    logs_storage_location: Optional[StorageLocationModel] = Field(
        default=None, alias="LogsStorageLocation"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    name: Optional[str] = Field(default=None, alias="Name")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class CreateInstanceEventWindowRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    name: Optional[str] = Field(default=None, alias="Name")
    time_ranges: Optional[Sequence[InstanceEventWindowTimeRangeRequestModel]] = Field(
        default=None, alias="TimeRanges"
    )
    cron_expression: Optional[str] = Field(default=None, alias="CronExpression")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class CreateInstanceExportTaskRequestModel(BaseModel):
    export_to_s3_task: ExportToS3TaskSpecificationModel = Field(alias="ExportToS3Task")
    instance_id: str = Field(alias="InstanceId")
    target_environment: Literal["citrix", "microsoft", "vmware"] = Field(
        alias="TargetEnvironment"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class CreateInternetGatewayRequestModel(BaseModel):
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateInternetGatewayRequestServiceResourceCreateInternetGatewayModel(BaseModel):
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateIpamPoolRequestModel(BaseModel):
    ipam_scope_id: str = Field(alias="IpamScopeId")
    address_family: Literal["ipv4", "ipv6"] = Field(alias="AddressFamily")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    locale: Optional[str] = Field(default=None, alias="Locale")
    source_ipam_pool_id: Optional[str] = Field(default=None, alias="SourceIpamPoolId")
    description: Optional[str] = Field(default=None, alias="Description")
    auto_import: Optional[bool] = Field(default=None, alias="AutoImport")
    publicly_advertisable: Optional[bool] = Field(
        default=None, alias="PubliclyAdvertisable"
    )
    allocation_min_netmask_length: Optional[int] = Field(
        default=None, alias="AllocationMinNetmaskLength"
    )
    allocation_max_netmask_length: Optional[int] = Field(
        default=None, alias="AllocationMaxNetmaskLength"
    )
    allocation_default_netmask_length: Optional[int] = Field(
        default=None, alias="AllocationDefaultNetmaskLength"
    )
    allocation_resource_tags: Optional[Sequence[RequestIpamResourceTagModel]] = Field(
        default=None, alias="AllocationResourceTags"
    )
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    aws_service: Optional[Literal["ec2"]] = Field(default=None, alias="AwsService")
    public_ip_source: Optional[Literal["amazon", "byoip"]] = Field(
        default=None, alias="PublicIpSource"
    )


class CreateIpamRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    description: Optional[str] = Field(default=None, alias="Description")
    operating_regions: Optional[Sequence[AddIpamOperatingRegionModel]] = Field(
        default=None, alias="OperatingRegions"
    )
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    client_token: Optional[str] = Field(default=None, alias="ClientToken")


class CreateIpamResourceDiscoveryRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    description: Optional[str] = Field(default=None, alias="Description")
    operating_regions: Optional[Sequence[AddIpamOperatingRegionModel]] = Field(
        default=None, alias="OperatingRegions"
    )
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    client_token: Optional[str] = Field(default=None, alias="ClientToken")


class CreateIpamScopeRequestModel(BaseModel):
    ipam_id: str = Field(alias="IpamId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    description: Optional[str] = Field(default=None, alias="Description")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    client_token: Optional[str] = Field(default=None, alias="ClientToken")


class CreateKeyPairRequestModel(BaseModel):
    key_name: str = Field(alias="KeyName")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    key_type: Optional[Literal["ed25519", "rsa"]] = Field(default=None, alias="KeyType")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    key_format: Optional[Literal["pem", "ppk"]] = Field(default=None, alias="KeyFormat")


class CreateKeyPairRequestServiceResourceCreateKeyPairModel(BaseModel):
    key_name: str = Field(alias="KeyName")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    key_type: Optional[Literal["ed25519", "rsa"]] = Field(default=None, alias="KeyType")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    key_format: Optional[Literal["pem", "ppk"]] = Field(default=None, alias="KeyFormat")


class CreateLocalGatewayRouteTableRequestModel(BaseModel):
    local_gateway_id: str = Field(alias="LocalGatewayId")
    mode: Optional[Literal["coip", "direct-vpc-routing"]] = Field(
        default=None, alias="Mode"
    )
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequestModel(
    BaseModel
):
    local_gateway_route_table_id: str = Field(alias="LocalGatewayRouteTableId")
    local_gateway_virtual_interface_group_id: str = Field(
        alias="LocalGatewayVirtualInterfaceGroupId"
    )
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateLocalGatewayRouteTableVpcAssociationRequestModel(BaseModel):
    local_gateway_route_table_id: str = Field(alias="LocalGatewayRouteTableId")
    vpc_id: str = Field(alias="VpcId")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateManagedPrefixListRequestModel(BaseModel):
    prefix_list_name: str = Field(alias="PrefixListName")
    max_entries: int = Field(alias="MaxEntries")
    address_family: str = Field(alias="AddressFamily")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    entries: Optional[Sequence[AddPrefixListEntryModel]] = Field(
        default=None, alias="Entries"
    )
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    client_token: Optional[str] = Field(default=None, alias="ClientToken")


class CreateNatGatewayRequestModel(BaseModel):
    subnet_id: str = Field(alias="SubnetId")
    allocation_id: Optional[str] = Field(default=None, alias="AllocationId")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    connectivity_type: Optional[Literal["private", "public"]] = Field(
        default=None, alias="ConnectivityType"
    )
    private_ip_address: Optional[str] = Field(default=None, alias="PrivateIpAddress")
    secondary_allocation_ids: Optional[Sequence[str]] = Field(
        default=None, alias="SecondaryAllocationIds"
    )
    secondary_private_ip_addresses: Optional[Sequence[str]] = Field(
        default=None, alias="SecondaryPrivateIpAddresses"
    )
    secondary_private_ip_address_count: Optional[int] = Field(
        default=None, alias="SecondaryPrivateIpAddressCount"
    )


class CreateNetworkAclRequestModel(BaseModel):
    vpc_id: str = Field(alias="VpcId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class CreateNetworkAclRequestServiceResourceCreateNetworkAclModel(BaseModel):
    vpc_id: str = Field(alias="VpcId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class CreateNetworkAclRequestVpcCreateNetworkAclModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class CreateNetworkInsightsPathRequestModel(BaseModel):
    source: str = Field(alias="Source")
    destination: str = Field(alias="Destination")
    protocol: Literal["tcp", "udp"] = Field(alias="Protocol")
    client_token: str = Field(alias="ClientToken")
    source_ip: Optional[str] = Field(default=None, alias="SourceIp")
    destination_ip: Optional[str] = Field(default=None, alias="DestinationIp")
    destination_port: Optional[int] = Field(default=None, alias="DestinationPort")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateNetworkInterfaceRequestModel(BaseModel):
    subnet_id: str = Field(alias="SubnetId")
    description: Optional[str] = Field(default=None, alias="Description")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    groups: Optional[Sequence[str]] = Field(default=None, alias="Groups")
    ipv6_address_count: Optional[int] = Field(default=None, alias="Ipv6AddressCount")
    ipv6_addresses: Optional[Sequence[InstanceIpv6AddressModel]] = Field(
        default=None, alias="Ipv6Addresses"
    )
    private_ip_address: Optional[str] = Field(default=None, alias="PrivateIpAddress")
    private_ip_addresses: Optional[
        Sequence[PrivateIpAddressSpecificationModel]
    ] = Field(default=None, alias="PrivateIpAddresses")
    secondary_private_ip_address_count: Optional[int] = Field(
        default=None, alias="SecondaryPrivateIpAddressCount"
    )
    ipv4_prefixes: Optional[Sequence[Ipv4PrefixSpecificationRequestModel]] = Field(
        default=None, alias="Ipv4Prefixes"
    )
    ipv4_prefix_count: Optional[int] = Field(default=None, alias="Ipv4PrefixCount")
    ipv6_prefixes: Optional[Sequence[Ipv6PrefixSpecificationRequestModel]] = Field(
        default=None, alias="Ipv6Prefixes"
    )
    ipv6_prefix_count: Optional[int] = Field(default=None, alias="Ipv6PrefixCount")
    interface_type: Optional[Literal["branch", "efa", "trunk"]] = Field(
        default=None, alias="InterfaceType"
    )
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    client_token: Optional[str] = Field(default=None, alias="ClientToken")


class CreateNetworkInterfaceRequestServiceResourceCreateNetworkInterfaceModel(
    BaseModel
):
    subnet_id: str = Field(alias="SubnetId")
    description: Optional[str] = Field(default=None, alias="Description")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    groups: Optional[Sequence[str]] = Field(default=None, alias="Groups")
    ipv6_address_count: Optional[int] = Field(default=None, alias="Ipv6AddressCount")
    ipv6_addresses: Optional[Sequence[InstanceIpv6AddressModel]] = Field(
        default=None, alias="Ipv6Addresses"
    )
    private_ip_address: Optional[str] = Field(default=None, alias="PrivateIpAddress")
    private_ip_addresses: Optional[
        Sequence[PrivateIpAddressSpecificationModel]
    ] = Field(default=None, alias="PrivateIpAddresses")
    secondary_private_ip_address_count: Optional[int] = Field(
        default=None, alias="SecondaryPrivateIpAddressCount"
    )
    ipv4_prefixes: Optional[Sequence[Ipv4PrefixSpecificationRequestModel]] = Field(
        default=None, alias="Ipv4Prefixes"
    )
    ipv4_prefix_count: Optional[int] = Field(default=None, alias="Ipv4PrefixCount")
    ipv6_prefixes: Optional[Sequence[Ipv6PrefixSpecificationRequestModel]] = Field(
        default=None, alias="Ipv6Prefixes"
    )
    ipv6_prefix_count: Optional[int] = Field(default=None, alias="Ipv6PrefixCount")
    interface_type: Optional[Literal["branch", "efa", "trunk"]] = Field(
        default=None, alias="InterfaceType"
    )
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    client_token: Optional[str] = Field(default=None, alias="ClientToken")


class CreateNetworkInterfaceRequestSubnetCreateNetworkInterfaceModel(BaseModel):
    description: Optional[str] = Field(default=None, alias="Description")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    groups: Optional[Sequence[str]] = Field(default=None, alias="Groups")
    ipv6_address_count: Optional[int] = Field(default=None, alias="Ipv6AddressCount")
    ipv6_addresses: Optional[Sequence[InstanceIpv6AddressModel]] = Field(
        default=None, alias="Ipv6Addresses"
    )
    private_ip_address: Optional[str] = Field(default=None, alias="PrivateIpAddress")
    private_ip_addresses: Optional[
        Sequence[PrivateIpAddressSpecificationModel]
    ] = Field(default=None, alias="PrivateIpAddresses")
    secondary_private_ip_address_count: Optional[int] = Field(
        default=None, alias="SecondaryPrivateIpAddressCount"
    )
    ipv4_prefixes: Optional[Sequence[Ipv4PrefixSpecificationRequestModel]] = Field(
        default=None, alias="Ipv4Prefixes"
    )
    ipv4_prefix_count: Optional[int] = Field(default=None, alias="Ipv4PrefixCount")
    ipv6_prefixes: Optional[Sequence[Ipv6PrefixSpecificationRequestModel]] = Field(
        default=None, alias="Ipv6Prefixes"
    )
    ipv6_prefix_count: Optional[int] = Field(default=None, alias="Ipv6PrefixCount")
    interface_type: Optional[Literal["branch", "efa", "trunk"]] = Field(
        default=None, alias="InterfaceType"
    )
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    client_token: Optional[str] = Field(default=None, alias="ClientToken")


class CreatePlacementGroupRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    group_name: Optional[str] = Field(default=None, alias="GroupName")
    strategy: Optional[Literal["cluster", "partition", "spread"]] = Field(
        default=None, alias="Strategy"
    )
    partition_count: Optional[int] = Field(default=None, alias="PartitionCount")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    spread_level: Optional[Literal["host", "rack"]] = Field(
        default=None, alias="SpreadLevel"
    )


class CreatePlacementGroupRequestServiceResourceCreatePlacementGroupModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    group_name: Optional[str] = Field(default=None, alias="GroupName")
    strategy: Optional[Literal["cluster", "partition", "spread"]] = Field(
        default=None, alias="Strategy"
    )
    partition_count: Optional[int] = Field(default=None, alias="PartitionCount")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    spread_level: Optional[Literal["host", "rack"]] = Field(
        default=None, alias="SpreadLevel"
    )


class CreatePublicIpv4PoolRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class CreateReplaceRootVolumeTaskRequestModel(BaseModel):
    instance_id: str = Field(alias="InstanceId")
    snapshot_id: Optional[str] = Field(default=None, alias="SnapshotId")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    image_id: Optional[str] = Field(default=None, alias="ImageId")
    delete_replaced_root_volume: Optional[bool] = Field(
        default=None, alias="DeleteReplacedRootVolume"
    )


class CreateRestoreImageTaskRequestModel(BaseModel):
    bucket: str = Field(alias="Bucket")
    object_key: str = Field(alias="ObjectKey")
    name: Optional[str] = Field(default=None, alias="Name")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateRouteTableRequestModel(BaseModel):
    vpc_id: str = Field(alias="VpcId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class CreateRouteTableRequestServiceResourceCreateRouteTableModel(BaseModel):
    vpc_id: str = Field(alias="VpcId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class CreateRouteTableRequestVpcCreateRouteTableModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class CreateSecurityGroupRequestModel(BaseModel):
    description: str = Field(alias="Description")
    group_name: str = Field(alias="GroupName")
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateSecurityGroupRequestServiceResourceCreateSecurityGroupModel(BaseModel):
    description: str = Field(alias="Description")
    group_name: str = Field(alias="GroupName")
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateSecurityGroupRequestVpcCreateSecurityGroupModel(BaseModel):
    description: str = Field(alias="Description")
    group_name: str = Field(alias="GroupName")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateSnapshotRequestModel(BaseModel):
    volume_id: str = Field(alias="VolumeId")
    description: Optional[str] = Field(default=None, alias="Description")
    outpost_arn: Optional[str] = Field(default=None, alias="OutpostArn")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateSnapshotRequestServiceResourceCreateSnapshotModel(BaseModel):
    volume_id: str = Field(alias="VolumeId")
    description: Optional[str] = Field(default=None, alias="Description")
    outpost_arn: Optional[str] = Field(default=None, alias="OutpostArn")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateSnapshotRequestVolumeCreateSnapshotModel(BaseModel):
    description: Optional[str] = Field(default=None, alias="Description")
    outpost_arn: Optional[str] = Field(default=None, alias="OutpostArn")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateSnapshotsRequestModel(BaseModel):
    instance_specification: InstanceSpecificationModel = Field(
        alias="InstanceSpecification"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    outpost_arn: Optional[str] = Field(default=None, alias="OutpostArn")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    copy_tags_from_source: Optional[Literal["volume"]] = Field(
        default=None, alias="CopyTagsFromSource"
    )


class CreateSubnetCidrReservationRequestModel(BaseModel):
    subnet_id: str = Field(alias="SubnetId")
    cidr: str = Field(alias="Cidr")
    reservation_type: Literal["explicit", "prefix"] = Field(alias="ReservationType")
    description: Optional[str] = Field(default=None, alias="Description")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class CreateSubnetRequestModel(BaseModel):
    vpc_id: str = Field(alias="VpcId")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    availability_zone_id: Optional[str] = Field(
        default=None, alias="AvailabilityZoneId"
    )
    cidr_block: Optional[str] = Field(default=None, alias="CidrBlock")
    ipv6_cidr_block: Optional[str] = Field(default=None, alias="Ipv6CidrBlock")
    outpost_arn: Optional[str] = Field(default=None, alias="OutpostArn")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    ipv6_native: Optional[bool] = Field(default=None, alias="Ipv6Native")


class CreateSubnetRequestServiceResourceCreateSubnetModel(BaseModel):
    vpc_id: str = Field(alias="VpcId")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    availability_zone_id: Optional[str] = Field(
        default=None, alias="AvailabilityZoneId"
    )
    cidr_block: Optional[str] = Field(default=None, alias="CidrBlock")
    ipv6_cidr_block: Optional[str] = Field(default=None, alias="Ipv6CidrBlock")
    outpost_arn: Optional[str] = Field(default=None, alias="OutpostArn")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    ipv6_native: Optional[bool] = Field(default=None, alias="Ipv6Native")


class CreateSubnetRequestVpcCreateSubnetModel(BaseModel):
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    availability_zone_id: Optional[str] = Field(
        default=None, alias="AvailabilityZoneId"
    )
    cidr_block: Optional[str] = Field(default=None, alias="CidrBlock")
    ipv6_cidr_block: Optional[str] = Field(default=None, alias="Ipv6CidrBlock")
    outpost_arn: Optional[str] = Field(default=None, alias="OutpostArn")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    ipv6_native: Optional[bool] = Field(default=None, alias="Ipv6Native")


class CreateTrafficMirrorFilterRequestModel(BaseModel):
    description: Optional[str] = Field(default=None, alias="Description")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")


class CreateTrafficMirrorSessionRequestModel(BaseModel):
    network_interface_id: str = Field(alias="NetworkInterfaceId")
    traffic_mirror_target_id: str = Field(alias="TrafficMirrorTargetId")
    traffic_mirror_filter_id: str = Field(alias="TrafficMirrorFilterId")
    session_number: int = Field(alias="SessionNumber")
    packet_length: Optional[int] = Field(default=None, alias="PacketLength")
    virtual_network_id: Optional[int] = Field(default=None, alias="VirtualNetworkId")
    description: Optional[str] = Field(default=None, alias="Description")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")


class CreateTrafficMirrorTargetRequestModel(BaseModel):
    network_interface_id: Optional[str] = Field(
        default=None, alias="NetworkInterfaceId"
    )
    network_load_balancer_arn: Optional[str] = Field(
        default=None, alias="NetworkLoadBalancerArn"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    gateway_load_balancer_endpoint_id: Optional[str] = Field(
        default=None, alias="GatewayLoadBalancerEndpointId"
    )


class CreateTransitGatewayConnectPeerRequestModel(BaseModel):
    transit_gateway_attachment_id: str = Field(alias="TransitGatewayAttachmentId")
    peer_address: str = Field(alias="PeerAddress")
    inside_cidr_blocks: Sequence[str] = Field(alias="InsideCidrBlocks")
    transit_gateway_address: Optional[str] = Field(
        default=None, alias="TransitGatewayAddress"
    )
    bgp_options: Optional[TransitGatewayConnectRequestBgpOptionsModel] = Field(
        default=None, alias="BgpOptions"
    )
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateTransitGatewayConnectRequestModel(BaseModel):
    transport_transit_gateway_attachment_id: str = Field(
        alias="TransportTransitGatewayAttachmentId"
    )
    options: CreateTransitGatewayConnectRequestOptionsModel = Field(alias="Options")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateTransitGatewayMulticastDomainRequestModel(BaseModel):
    transit_gateway_id: str = Field(alias="TransitGatewayId")
    options: Optional[CreateTransitGatewayMulticastDomainRequestOptionsModel] = Field(
        default=None, alias="Options"
    )
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateTransitGatewayPeeringAttachmentRequestModel(BaseModel):
    transit_gateway_id: str = Field(alias="TransitGatewayId")
    peer_transit_gateway_id: str = Field(alias="PeerTransitGatewayId")
    peer_account_id: str = Field(alias="PeerAccountId")
    peer_region: str = Field(alias="PeerRegion")
    options: Optional[CreateTransitGatewayPeeringAttachmentRequestOptionsModel] = Field(
        default=None, alias="Options"
    )
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateTransitGatewayPolicyTableRequestModel(BaseModel):
    transit_gateway_id: str = Field(alias="TransitGatewayId")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateTransitGatewayRequestModel(BaseModel):
    description: Optional[str] = Field(default=None, alias="Description")
    options: Optional[TransitGatewayRequestOptionsModel] = Field(
        default=None, alias="Options"
    )
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateTransitGatewayRouteTableAnnouncementRequestModel(BaseModel):
    transit_gateway_route_table_id: str = Field(alias="TransitGatewayRouteTableId")
    peering_attachment_id: str = Field(alias="PeeringAttachmentId")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateTransitGatewayRouteTableRequestModel(BaseModel):
    transit_gateway_id: str = Field(alias="TransitGatewayId")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateTransitGatewayVpcAttachmentRequestModel(BaseModel):
    transit_gateway_id: str = Field(alias="TransitGatewayId")
    vpc_id: str = Field(alias="VpcId")
    subnet_ids: Sequence[str] = Field(alias="SubnetIds")
    options: Optional[CreateTransitGatewayVpcAttachmentRequestOptionsModel] = Field(
        default=None, alias="Options"
    )
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateVerifiedAccessEndpointRequestModel(BaseModel):
    verified_access_group_id: str = Field(alias="VerifiedAccessGroupId")
    endpoint_type: Literal["load-balancer", "network-interface"] = Field(
        alias="EndpointType"
    )
    attachment_type: Literal["vpc"] = Field(alias="AttachmentType")
    domain_certificate_arn: str = Field(alias="DomainCertificateArn")
    application_domain: str = Field(alias="ApplicationDomain")
    endpoint_domain_prefix: str = Field(alias="EndpointDomainPrefix")
    security_group_ids: Optional[Sequence[str]] = Field(
        default=None, alias="SecurityGroupIds"
    )
    load_balancer_options: Optional[
        CreateVerifiedAccessEndpointLoadBalancerOptionsModel
    ] = Field(default=None, alias="LoadBalancerOptions")
    network_interface_options: Optional[
        CreateVerifiedAccessEndpointEniOptionsModel
    ] = Field(default=None, alias="NetworkInterfaceOptions")
    description: Optional[str] = Field(default=None, alias="Description")
    policy_document: Optional[str] = Field(default=None, alias="PolicyDocument")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateVerifiedAccessGroupRequestModel(BaseModel):
    verified_access_instance_id: str = Field(alias="VerifiedAccessInstanceId")
    description: Optional[str] = Field(default=None, alias="Description")
    policy_document: Optional[str] = Field(default=None, alias="PolicyDocument")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateVerifiedAccessInstanceRequestModel(BaseModel):
    description: Optional[str] = Field(default=None, alias="Description")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateVerifiedAccessTrustProviderRequestModel(BaseModel):
    trust_provider_type: Literal["device", "user"] = Field(alias="TrustProviderType")
    policy_reference_name: str = Field(alias="PolicyReferenceName")
    user_trust_provider_type: Optional[Literal["iam-identity-center", "oidc"]] = Field(
        default=None, alias="UserTrustProviderType"
    )
    device_trust_provider_type: Optional[Literal["crowdstrike", "jamf"]] = Field(
        default=None, alias="DeviceTrustProviderType"
    )
    oidc_options: Optional[CreateVerifiedAccessTrustProviderOidcOptionsModel] = Field(
        default=None, alias="OidcOptions"
    )
    device_options: Optional[
        CreateVerifiedAccessTrustProviderDeviceOptionsModel
    ] = Field(default=None, alias="DeviceOptions")
    description: Optional[str] = Field(default=None, alias="Description")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateVolumeRequestModel(BaseModel):
    availability_zone: str = Field(alias="AvailabilityZone")
    encrypted: Optional[bool] = Field(default=None, alias="Encrypted")
    iops: Optional[int] = Field(default=None, alias="Iops")
    kms_key_id: Optional[str] = Field(default=None, alias="KmsKeyId")
    outpost_arn: Optional[str] = Field(default=None, alias="OutpostArn")
    size: Optional[int] = Field(default=None, alias="Size")
    snapshot_id: Optional[str] = Field(default=None, alias="SnapshotId")
    volume_type: Optional[
        Literal["gp2", "gp3", "io1", "io2", "sc1", "st1", "standard"]
    ] = Field(default=None, alias="VolumeType")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    multi_attach_enabled: Optional[bool] = Field(
        default=None, alias="MultiAttachEnabled"
    )
    throughput: Optional[int] = Field(default=None, alias="Throughput")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")


class CreateVolumeRequestServiceResourceCreateVolumeModel(BaseModel):
    availability_zone: str = Field(alias="AvailabilityZone")
    encrypted: Optional[bool] = Field(default=None, alias="Encrypted")
    iops: Optional[int] = Field(default=None, alias="Iops")
    kms_key_id: Optional[str] = Field(default=None, alias="KmsKeyId")
    outpost_arn: Optional[str] = Field(default=None, alias="OutpostArn")
    size: Optional[int] = Field(default=None, alias="Size")
    snapshot_id: Optional[str] = Field(default=None, alias="SnapshotId")
    volume_type: Optional[
        Literal["gp2", "gp3", "io1", "io2", "sc1", "st1", "standard"]
    ] = Field(default=None, alias="VolumeType")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    multi_attach_enabled: Optional[bool] = Field(
        default=None, alias="MultiAttachEnabled"
    )
    throughput: Optional[int] = Field(default=None, alias="Throughput")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")


class CreateVpcEndpointRequestModel(BaseModel):
    vpc_id: str = Field(alias="VpcId")
    service_name: str = Field(alias="ServiceName")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    vpc_endpoint_type: Optional[
        Literal["Gateway", "GatewayLoadBalancer", "Interface"]
    ] = Field(default=None, alias="VpcEndpointType")
    policy_document: Optional[str] = Field(default=None, alias="PolicyDocument")
    route_table_ids: Optional[Sequence[str]] = Field(
        default=None, alias="RouteTableIds"
    )
    subnet_ids: Optional[Sequence[str]] = Field(default=None, alias="SubnetIds")
    security_group_ids: Optional[Sequence[str]] = Field(
        default=None, alias="SecurityGroupIds"
    )
    ip_address_type: Optional[Literal["dualstack", "ipv4", "ipv6"]] = Field(
        default=None, alias="IpAddressType"
    )
    dns_options: Optional[DnsOptionsSpecificationModel] = Field(
        default=None, alias="DnsOptions"
    )
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    private_dns_enabled: Optional[bool] = Field(default=None, alias="PrivateDnsEnabled")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class CreateVpcEndpointServiceConfigurationRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    acceptance_required: Optional[bool] = Field(
        default=None, alias="AcceptanceRequired"
    )
    private_dns_name: Optional[str] = Field(default=None, alias="PrivateDnsName")
    network_load_balancer_arns: Optional[Sequence[str]] = Field(
        default=None, alias="NetworkLoadBalancerArns"
    )
    gateway_load_balancer_arns: Optional[Sequence[str]] = Field(
        default=None, alias="GatewayLoadBalancerArns"
    )
    supported_ip_address_types: Optional[Sequence[str]] = Field(
        default=None, alias="SupportedIpAddressTypes"
    )
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class CreateVpcPeeringConnectionRequestModel(BaseModel):
    vpc_id: str = Field(alias="VpcId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    peer_owner_id: Optional[str] = Field(default=None, alias="PeerOwnerId")
    peer_vpc_id: Optional[str] = Field(default=None, alias="PeerVpcId")
    peer_region: Optional[str] = Field(default=None, alias="PeerRegion")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class CreateVpcPeeringConnectionRequestServiceResourceCreateVpcPeeringConnectionModel(
    BaseModel
):
    vpc_id: str = Field(alias="VpcId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    peer_owner_id: Optional[str] = Field(default=None, alias="PeerOwnerId")
    peer_vpc_id: Optional[str] = Field(default=None, alias="PeerVpcId")
    peer_region: Optional[str] = Field(default=None, alias="PeerRegion")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class CreateVpcPeeringConnectionRequestVpcRequestVpcPeeringConnectionModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    peer_owner_id: Optional[str] = Field(default=None, alias="PeerOwnerId")
    peer_vpc_id: Optional[str] = Field(default=None, alias="PeerVpcId")
    peer_region: Optional[str] = Field(default=None, alias="PeerRegion")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class CreateVpcRequestModel(BaseModel):
    cidr_block: Optional[str] = Field(default=None, alias="CidrBlock")
    amazon_provided_ipv6_cidr_block: Optional[bool] = Field(
        default=None, alias="AmazonProvidedIpv6CidrBlock"
    )
    ipv6_pool: Optional[str] = Field(default=None, alias="Ipv6Pool")
    ipv6_cidr_block: Optional[str] = Field(default=None, alias="Ipv6CidrBlock")
    ipv4_ipam_pool_id: Optional[str] = Field(default=None, alias="Ipv4IpamPoolId")
    ipv4_netmask_length: Optional[int] = Field(default=None, alias="Ipv4NetmaskLength")
    ipv6_ipam_pool_id: Optional[str] = Field(default=None, alias="Ipv6IpamPoolId")
    ipv6_netmask_length: Optional[int] = Field(default=None, alias="Ipv6NetmaskLength")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    instance_tenancy: Optional[Literal["dedicated", "default", "host"]] = Field(
        default=None, alias="InstanceTenancy"
    )
    ipv6_cidr_block_network_border_group: Optional[str] = Field(
        default=None, alias="Ipv6CidrBlockNetworkBorderGroup"
    )
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class CreateVpcRequestServiceResourceCreateVpcModel(BaseModel):
    cidr_block: Optional[str] = Field(default=None, alias="CidrBlock")
    amazon_provided_ipv6_cidr_block: Optional[bool] = Field(
        default=None, alias="AmazonProvidedIpv6CidrBlock"
    )
    ipv6_pool: Optional[str] = Field(default=None, alias="Ipv6Pool")
    ipv6_cidr_block: Optional[str] = Field(default=None, alias="Ipv6CidrBlock")
    ipv4_ipam_pool_id: Optional[str] = Field(default=None, alias="Ipv4IpamPoolId")
    ipv4_netmask_length: Optional[int] = Field(default=None, alias="Ipv4NetmaskLength")
    ipv6_ipam_pool_id: Optional[str] = Field(default=None, alias="Ipv6IpamPoolId")
    ipv6_netmask_length: Optional[int] = Field(default=None, alias="Ipv6NetmaskLength")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    instance_tenancy: Optional[Literal["dedicated", "default", "host"]] = Field(
        default=None, alias="InstanceTenancy"
    )
    ipv6_cidr_block_network_border_group: Optional[str] = Field(
        default=None, alias="Ipv6CidrBlockNetworkBorderGroup"
    )
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class CreateVpnGatewayRequestModel(BaseModel):
    type: Literal["ipsec.1"] = Field(alias="Type")
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    amazon_side_asn: Optional[int] = Field(default=None, alias="AmazonSideAsn")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ExportImageRequestModel(BaseModel):
    disk_image_format: Literal["RAW", "VHD", "VMDK"] = Field(alias="DiskImageFormat")
    image_id: str = Field(alias="ImageId")
    s3_export_location: ExportTaskS3LocationRequestModel = Field(
        alias="S3ExportLocation"
    )
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    description: Optional[str] = Field(default=None, alias="Description")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    role_name: Optional[str] = Field(default=None, alias="RoleName")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class ImportKeyPairRequestModel(BaseModel):
    key_name: str = Field(alias="KeyName")
    public_key_material: Union[str, bytes, Type[IO[Any]], Type[StreamingBody]] = Field(
        alias="PublicKeyMaterial"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class ImportKeyPairRequestServiceResourceImportKeyPairModel(BaseModel):
    key_name: str = Field(alias="KeyName")
    public_key_material: Union[str, bytes, Type[IO[Any]], Type[StreamingBody]] = Field(
        alias="PublicKeyMaterial"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class ProvisionByoipCidrRequestModel(BaseModel):
    cidr: str = Field(alias="Cidr")
    cidr_authorization_context: Optional[CidrAuthorizationContextModel] = Field(
        default=None, alias="CidrAuthorizationContext"
    )
    publicly_advertisable: Optional[bool] = Field(
        default=None, alias="PubliclyAdvertisable"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pool_tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="PoolTagSpecifications"
    )
    multi_region: Optional[bool] = Field(default=None, alias="MultiRegion")


class PurchaseHostReservationRequestModel(BaseModel):
    host_id_set: Sequence[str] = Field(alias="HostIdSet")
    offering_id: str = Field(alias="OfferingId")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    currency_code: Optional[Literal["USD"]] = Field(default=None, alias="CurrencyCode")
    limit_price: Optional[str] = Field(default=None, alias="LimitPrice")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class StartNetworkInsightsAccessScopeAnalysisRequestModel(BaseModel):
    network_insights_access_scope_id: str = Field(alias="NetworkInsightsAccessScopeId")
    client_token: str = Field(alias="ClientToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class StartNetworkInsightsAnalysisRequestModel(BaseModel):
    network_insights_path_id: str = Field(alias="NetworkInsightsPathId")
    client_token: str = Field(alias="ClientToken")
    additional_accounts: Optional[Sequence[str]] = Field(
        default=None, alias="AdditionalAccounts"
    )
    filter_in_arns: Optional[Sequence[str]] = Field(default=None, alias="FilterInArns")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class CreateTrafficMirrorSessionResultModel(BaseModel):
    traffic_mirror_session: TrafficMirrorSessionModel = Field(
        alias="TrafficMirrorSession"
    )
    client_token: str = Field(alias="ClientToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeTrafficMirrorSessionsResultModel(BaseModel):
    traffic_mirror_sessions: List[TrafficMirrorSessionModel] = Field(
        alias="TrafficMirrorSessions"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyTrafficMirrorSessionResultModel(BaseModel):
    traffic_mirror_session: TrafficMirrorSessionModel = Field(
        alias="TrafficMirrorSession"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateTrafficMirrorTargetResultModel(BaseModel):
    traffic_mirror_target: TrafficMirrorTargetModel = Field(alias="TrafficMirrorTarget")
    client_token: str = Field(alias="ClientToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeTrafficMirrorTargetsResultModel(BaseModel):
    traffic_mirror_targets: List[TrafficMirrorTargetModel] = Field(
        alias="TrafficMirrorTargets"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateTransitGatewayPolicyTableResultModel(BaseModel):
    transit_gateway_policy_table: TransitGatewayPolicyTableModel = Field(
        alias="TransitGatewayPolicyTable"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteTransitGatewayPolicyTableResultModel(BaseModel):
    transit_gateway_policy_table: TransitGatewayPolicyTableModel = Field(
        alias="TransitGatewayPolicyTable"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeTransitGatewayPolicyTablesResultModel(BaseModel):
    transit_gateway_policy_tables: List[TransitGatewayPolicyTableModel] = Field(
        alias="TransitGatewayPolicyTables"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateTransitGatewayRouteTableAnnouncementResultModel(BaseModel):
    transit_gateway_route_table_announcement: TransitGatewayRouteTableAnnouncementModel = Field(
        alias="TransitGatewayRouteTableAnnouncement"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteTransitGatewayRouteTableAnnouncementResultModel(BaseModel):
    transit_gateway_route_table_announcement: TransitGatewayRouteTableAnnouncementModel = Field(
        alias="TransitGatewayRouteTableAnnouncement"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeTransitGatewayRouteTableAnnouncementsResultModel(BaseModel):
    transit_gateway_route_table_announcements: List[
        TransitGatewayRouteTableAnnouncementModel
    ] = Field(alias="TransitGatewayRouteTableAnnouncements")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateTransitGatewayRouteTableResultModel(BaseModel):
    transit_gateway_route_table: TransitGatewayRouteTableModel = Field(
        alias="TransitGatewayRouteTable"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteTransitGatewayRouteTableResultModel(BaseModel):
    transit_gateway_route_table: TransitGatewayRouteTableModel = Field(
        alias="TransitGatewayRouteTable"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeTransitGatewayRouteTablesResultModel(BaseModel):
    transit_gateway_route_tables: List[TransitGatewayRouteTableModel] = Field(
        alias="TransitGatewayRouteTables"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AssociateTrunkInterfaceResultModel(BaseModel):
    interface_association: TrunkInterfaceAssociationModel = Field(
        alias="InterfaceAssociation"
    )
    client_token: str = Field(alias="ClientToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeTrunkInterfaceAssociationsResultModel(BaseModel):
    interface_associations: List[TrunkInterfaceAssociationModel] = Field(
        alias="InterfaceAssociations"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateVerifiedAccessGroupResultModel(BaseModel):
    verified_access_group: VerifiedAccessGroupModel = Field(alias="VerifiedAccessGroup")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteVerifiedAccessGroupResultModel(BaseModel):
    verified_access_group: VerifiedAccessGroupModel = Field(alias="VerifiedAccessGroup")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeVerifiedAccessGroupsResultModel(BaseModel):
    verified_access_groups: List[VerifiedAccessGroupModel] = Field(
        alias="VerifiedAccessGroups"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyVerifiedAccessGroupResultModel(BaseModel):
    verified_access_group: VerifiedAccessGroupModel = Field(alias="VerifiedAccessGroup")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeVpcClassicLinkResultModel(BaseModel):
    vpcs: List[VpcClassicLinkModel] = Field(alias="Vpcs")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ExplanationModel(BaseModel):
    acl: Optional[AnalysisComponentModel] = Field(default=None, alias="Acl")
    acl_rule: Optional[AnalysisAclRuleModel] = Field(default=None, alias="AclRule")
    address: Optional[str] = Field(default=None, alias="Address")
    addresses: Optional[List[str]] = Field(default=None, alias="Addresses")
    attached_to: Optional[AnalysisComponentModel] = Field(
        default=None, alias="AttachedTo"
    )
    availability_zones: Optional[List[str]] = Field(
        default=None, alias="AvailabilityZones"
    )
    cidrs: Optional[List[str]] = Field(default=None, alias="Cidrs")
    component: Optional[AnalysisComponentModel] = Field(default=None, alias="Component")
    customer_gateway: Optional[AnalysisComponentModel] = Field(
        default=None, alias="CustomerGateway"
    )
    destination: Optional[AnalysisComponentModel] = Field(
        default=None, alias="Destination"
    )
    destination_vpc: Optional[AnalysisComponentModel] = Field(
        default=None, alias="DestinationVpc"
    )
    direction: Optional[str] = Field(default=None, alias="Direction")
    explanation_code: Optional[str] = Field(default=None, alias="ExplanationCode")
    ingress_route_table: Optional[AnalysisComponentModel] = Field(
        default=None, alias="IngressRouteTable"
    )
    internet_gateway: Optional[AnalysisComponentModel] = Field(
        default=None, alias="InternetGateway"
    )
    load_balancer_arn: Optional[str] = Field(default=None, alias="LoadBalancerArn")
    classic_load_balancer_listener: Optional[AnalysisLoadBalancerListenerModel] = Field(
        default=None, alias="ClassicLoadBalancerListener"
    )
    load_balancer_listener_port: Optional[int] = Field(
        default=None, alias="LoadBalancerListenerPort"
    )
    load_balancer_target: Optional[AnalysisLoadBalancerTargetModel] = Field(
        default=None, alias="LoadBalancerTarget"
    )
    load_balancer_target_group: Optional[AnalysisComponentModel] = Field(
        default=None, alias="LoadBalancerTargetGroup"
    )
    load_balancer_target_groups: Optional[List[AnalysisComponentModel]] = Field(
        default=None, alias="LoadBalancerTargetGroups"
    )
    load_balancer_target_port: Optional[int] = Field(
        default=None, alias="LoadBalancerTargetPort"
    )
    elastic_load_balancer_listener: Optional[AnalysisComponentModel] = Field(
        default=None, alias="ElasticLoadBalancerListener"
    )
    missing_component: Optional[str] = Field(default=None, alias="MissingComponent")
    nat_gateway: Optional[AnalysisComponentModel] = Field(
        default=None, alias="NatGateway"
    )
    network_interface: Optional[AnalysisComponentModel] = Field(
        default=None, alias="NetworkInterface"
    )
    packet_field: Optional[str] = Field(default=None, alias="PacketField")
    vpc_peering_connection: Optional[AnalysisComponentModel] = Field(
        default=None, alias="VpcPeeringConnection"
    )
    port: Optional[int] = Field(default=None, alias="Port")
    port_ranges: Optional[List[PortRangeModel]] = Field(
        default=None, alias="PortRanges"
    )
    prefix_list: Optional[AnalysisComponentModel] = Field(
        default=None, alias="PrefixList"
    )
    protocols: Optional[List[str]] = Field(default=None, alias="Protocols")
    route_table_route: Optional[AnalysisRouteTableRouteModel] = Field(
        default=None, alias="RouteTableRoute"
    )
    route_table: Optional[AnalysisComponentModel] = Field(
        default=None, alias="RouteTable"
    )
    security_group: Optional[AnalysisComponentModel] = Field(
        default=None, alias="SecurityGroup"
    )
    security_group_rule: Optional[AnalysisSecurityGroupRuleModel] = Field(
        default=None, alias="SecurityGroupRule"
    )
    security_groups: Optional[List[AnalysisComponentModel]] = Field(
        default=None, alias="SecurityGroups"
    )
    source_vpc: Optional[AnalysisComponentModel] = Field(
        default=None, alias="SourceVpc"
    )
    state: Optional[str] = Field(default=None, alias="State")
    subnet: Optional[AnalysisComponentModel] = Field(default=None, alias="Subnet")
    subnet_route_table: Optional[AnalysisComponentModel] = Field(
        default=None, alias="SubnetRouteTable"
    )
    vpc: Optional[AnalysisComponentModel] = Field(default=None, alias="Vpc")
    vpc_endpoint: Optional[AnalysisComponentModel] = Field(
        default=None, alias="VpcEndpoint"
    )
    vpn_connection: Optional[AnalysisComponentModel] = Field(
        default=None, alias="VpnConnection"
    )
    vpn_gateway: Optional[AnalysisComponentModel] = Field(
        default=None, alias="VpnGateway"
    )
    transit_gateway: Optional[AnalysisComponentModel] = Field(
        default=None, alias="TransitGateway"
    )
    transit_gateway_route_table: Optional[AnalysisComponentModel] = Field(
        default=None, alias="TransitGatewayRouteTable"
    )
    transit_gateway_route_table_route: Optional[
        TransitGatewayRouteTableRouteModel
    ] = Field(default=None, alias="TransitGatewayRouteTableRoute")
    transit_gateway_attachment: Optional[AnalysisComponentModel] = Field(
        default=None, alias="TransitGatewayAttachment"
    )
    component_account: Optional[str] = Field(default=None, alias="ComponentAccount")
    component_region: Optional[str] = Field(default=None, alias="ComponentRegion")


class DescribeClientVpnTargetNetworksResultModel(BaseModel):
    client_vpn_target_networks: List[TargetNetworkModel] = Field(
        alias="ClientVpnTargetNetworks"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class RouteTableModel(BaseModel):
    associations: Optional[List[RouteTableAssociationModel]] = Field(
        default=None, alias="Associations"
    )
    propagating_vgws: Optional[List[PropagatingVgwModel]] = Field(
        default=None, alias="PropagatingVgws"
    )
    route_table_id: Optional[str] = Field(default=None, alias="RouteTableId")
    routes: Optional[List[RouteModel]] = Field(default=None, alias="Routes")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")


class GetFlowLogsIntegrationTemplateRequestModel(BaseModel):
    flow_log_id: str = Field(alias="FlowLogId")
    config_delivery_s3_destination_arn: str = Field(
        alias="ConfigDeliveryS3DestinationArn"
    )
    integrate_services: IntegrateServicesModel = Field(alias="IntegrateServices")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateVpnGatewayResultModel(BaseModel):
    vpn_gateway: VpnGatewayModel = Field(alias="VpnGateway")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeVpnGatewaysResultModel(BaseModel):
    vpn_gateways: List[VpnGatewayModel] = Field(alias="VpnGateways")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class NetworkInterfaceAttachmentResponseMetadataModel(BaseModel):
    attach_time: datetime = Field(alias="AttachTime")
    attachment_id: str = Field(alias="AttachmentId")
    delete_on_termination: bool = Field(alias="DeleteOnTermination")
    device_index: int = Field(alias="DeviceIndex")
    network_card_index: int = Field(alias="NetworkCardIndex")
    instance_id: str = Field(alias="InstanceId")
    instance_owner_id: str = Field(alias="InstanceOwnerId")
    status: Literal["attached", "attaching", "detached", "detaching"] = Field(
        alias="Status"
    )
    ena_srd_specification: AttachmentEnaSrdSpecificationModel = Field(
        alias="EnaSrdSpecification"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class NetworkInterfaceAttachmentModel(BaseModel):
    attach_time: Optional[datetime] = Field(default=None, alias="AttachTime")
    attachment_id: Optional[str] = Field(default=None, alias="AttachmentId")
    delete_on_termination: Optional[bool] = Field(
        default=None, alias="DeleteOnTermination"
    )
    device_index: Optional[int] = Field(default=None, alias="DeviceIndex")
    network_card_index: Optional[int] = Field(default=None, alias="NetworkCardIndex")
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    instance_owner_id: Optional[str] = Field(default=None, alias="InstanceOwnerId")
    status: Optional[Literal["attached", "attaching", "detached", "detaching"]] = Field(
        default=None, alias="Status"
    )
    ena_srd_specification: Optional[AttachmentEnaSrdSpecificationModel] = Field(
        default=None, alias="EnaSrdSpecification"
    )


class DhcpOptionsModel(BaseModel):
    dhcp_configurations: Optional[List[DhcpConfigurationModel]] = Field(
        default=None, alias="DhcpConfigurations"
    )
    dhcp_options_id: Optional[str] = Field(default=None, alias="DhcpOptionsId")
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class DescribeClientVpnAuthorizationRulesResultModel(BaseModel):
    authorization_rules: List[AuthorizationRuleModel] = Field(
        alias="AuthorizationRules"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeAvailabilityZonesResultModel(BaseModel):
    availability_zones: List[AvailabilityZoneModel] = Field(alias="AvailabilityZones")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class HostModel(BaseModel):
    auto_placement: Optional[Literal["off", "on"]] = Field(
        default=None, alias="AutoPlacement"
    )
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    available_capacity: Optional[AvailableCapacityModel] = Field(
        default=None, alias="AvailableCapacity"
    )
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    host_id: Optional[str] = Field(default=None, alias="HostId")
    host_properties: Optional[HostPropertiesModel] = Field(
        default=None, alias="HostProperties"
    )
    host_reservation_id: Optional[str] = Field(default=None, alias="HostReservationId")
    instances: Optional[List[HostInstanceModel]] = Field(
        default=None, alias="Instances"
    )
    state: Optional[
        Literal[
            "available",
            "pending",
            "permanent-failure",
            "released",
            "released-permanent-failure",
            "under-assessment",
        ]
    ] = Field(default=None, alias="State")
    allocation_time: Optional[datetime] = Field(default=None, alias="AllocationTime")
    release_time: Optional[datetime] = Field(default=None, alias="ReleaseTime")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    host_recovery: Optional[Literal["off", "on"]] = Field(
        default=None, alias="HostRecovery"
    )
    allows_multiple_instance_types: Optional[Literal["off", "on"]] = Field(
        default=None, alias="AllowsMultipleInstanceTypes"
    )
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    availability_zone_id: Optional[str] = Field(
        default=None, alias="AvailabilityZoneId"
    )
    member_of_service_linked_resource_group: Optional[bool] = Field(
        default=None, alias="MemberOfServiceLinkedResourceGroup"
    )
    outpost_arn: Optional[str] = Field(default=None, alias="OutpostArn")
    host_maintenance: Optional[Literal["off", "on"]] = Field(
        default=None, alias="HostMaintenance"
    )


class CreateImageRequestInstanceCreateImageModel(BaseModel):
    name: str = Field(alias="Name")
    block_device_mappings: Optional[Sequence[BlockDeviceMappingModel]] = Field(
        default=None, alias="BlockDeviceMappings"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    no_reboot: Optional[bool] = Field(default=None, alias="NoReboot")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class CreateImageRequestModel(BaseModel):
    instance_id: str = Field(alias="InstanceId")
    name: str = Field(alias="Name")
    block_device_mappings: Optional[Sequence[BlockDeviceMappingModel]] = Field(
        default=None, alias="BlockDeviceMappings"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    no_reboot: Optional[bool] = Field(default=None, alias="NoReboot")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class ImageAttributeModel(BaseModel):
    block_device_mappings: List[BlockDeviceMappingModel] = Field(
        alias="BlockDeviceMappings"
    )
    image_id: str = Field(alias="ImageId")
    launch_permissions: List[LaunchPermissionModel] = Field(alias="LaunchPermissions")
    product_codes: List[ProductCodeModel] = Field(alias="ProductCodes")
    description: AttributeValueModel = Field(alias="Description")
    kernel_id: AttributeValueModel = Field(alias="KernelId")
    ramdisk_id: AttributeValueModel = Field(alias="RamdiskId")
    sriov_net_support: AttributeValueModel = Field(alias="SriovNetSupport")
    boot_mode: AttributeValueModel = Field(alias="BootMode")
    tpm_support: AttributeValueModel = Field(alias="TpmSupport")
    uefi_data: AttributeValueModel = Field(alias="UefiData")
    last_launched_time: AttributeValueModel = Field(alias="LastLaunchedTime")
    imds_support: AttributeValueModel = Field(alias="ImdsSupport")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ImageModel(BaseModel):
    architecture: Optional[
        Literal["arm64", "arm64_mac", "i386", "x86_64", "x86_64_mac"]
    ] = Field(default=None, alias="Architecture")
    creation_date: Optional[str] = Field(default=None, alias="CreationDate")
    image_id: Optional[str] = Field(default=None, alias="ImageId")
    image_location: Optional[str] = Field(default=None, alias="ImageLocation")
    image_type: Optional[Literal["kernel", "machine", "ramdisk"]] = Field(
        default=None, alias="ImageType"
    )
    public: Optional[bool] = Field(default=None, alias="Public")
    kernel_id: Optional[str] = Field(default=None, alias="KernelId")
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    platform: Optional[Literal["Windows"]] = Field(default=None, alias="Platform")
    platform_details: Optional[str] = Field(default=None, alias="PlatformDetails")
    usage_operation: Optional[str] = Field(default=None, alias="UsageOperation")
    product_codes: Optional[List[ProductCodeModel]] = Field(
        default=None, alias="ProductCodes"
    )
    ramdisk_id: Optional[str] = Field(default=None, alias="RamdiskId")
    state: Optional[
        Literal[
            "available",
            "deregistered",
            "error",
            "failed",
            "invalid",
            "pending",
            "transient",
        ]
    ] = Field(default=None, alias="State")
    block_device_mappings: Optional[List[BlockDeviceMappingModel]] = Field(
        default=None, alias="BlockDeviceMappings"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    ena_support: Optional[bool] = Field(default=None, alias="EnaSupport")
    hypervisor: Optional[Literal["ovm", "xen"]] = Field(
        default=None, alias="Hypervisor"
    )
    image_owner_alias: Optional[str] = Field(default=None, alias="ImageOwnerAlias")
    name: Optional[str] = Field(default=None, alias="Name")
    root_device_name: Optional[str] = Field(default=None, alias="RootDeviceName")
    root_device_type: Optional[Literal["ebs", "instance-store"]] = Field(
        default=None, alias="RootDeviceType"
    )
    sriov_net_support: Optional[str] = Field(default=None, alias="SriovNetSupport")
    state_reason: Optional[StateReasonModel] = Field(default=None, alias="StateReason")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    virtualization_type: Optional[Literal["hvm", "paravirtual"]] = Field(
        default=None, alias="VirtualizationType"
    )
    boot_mode: Optional[Literal["legacy-bios", "uefi"]] = Field(
        default=None, alias="BootMode"
    )
    tpm_support: Optional[Literal["v2.0"]] = Field(default=None, alias="TpmSupport")
    deprecation_time: Optional[str] = Field(default=None, alias="DeprecationTime")
    imds_support: Optional[Literal["v2.0"]] = Field(default=None, alias="ImdsSupport")


class RegisterImageRequestModel(BaseModel):
    name: str = Field(alias="Name")
    image_location: Optional[str] = Field(default=None, alias="ImageLocation")
    architecture: Optional[
        Literal["arm64", "arm64_mac", "i386", "x86_64", "x86_64_mac"]
    ] = Field(default=None, alias="Architecture")
    block_device_mappings: Optional[Sequence[BlockDeviceMappingModel]] = Field(
        default=None, alias="BlockDeviceMappings"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    ena_support: Optional[bool] = Field(default=None, alias="EnaSupport")
    kernel_id: Optional[str] = Field(default=None, alias="KernelId")
    billing_products: Optional[Sequence[str]] = Field(
        default=None, alias="BillingProducts"
    )
    ramdisk_id: Optional[str] = Field(default=None, alias="RamdiskId")
    root_device_name: Optional[str] = Field(default=None, alias="RootDeviceName")
    sriov_net_support: Optional[str] = Field(default=None, alias="SriovNetSupport")
    virtualization_type: Optional[str] = Field(default=None, alias="VirtualizationType")
    boot_mode: Optional[Literal["legacy-bios", "uefi"]] = Field(
        default=None, alias="BootMode"
    )
    tpm_support: Optional[Literal["v2.0"]] = Field(default=None, alias="TpmSupport")
    uefi_data: Optional[str] = Field(default=None, alias="UefiData")
    imds_support: Optional[Literal["v2.0"]] = Field(default=None, alias="ImdsSupport")


class RegisterImageRequestServiceResourceRegisterImageModel(BaseModel):
    name: str = Field(alias="Name")
    image_location: Optional[str] = Field(default=None, alias="ImageLocation")
    architecture: Optional[
        Literal["arm64", "arm64_mac", "i386", "x86_64", "x86_64_mac"]
    ] = Field(default=None, alias="Architecture")
    block_device_mappings: Optional[Sequence[BlockDeviceMappingModel]] = Field(
        default=None, alias="BlockDeviceMappings"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    ena_support: Optional[bool] = Field(default=None, alias="EnaSupport")
    kernel_id: Optional[str] = Field(default=None, alias="KernelId")
    billing_products: Optional[Sequence[str]] = Field(
        default=None, alias="BillingProducts"
    )
    ramdisk_id: Optional[str] = Field(default=None, alias="RamdiskId")
    root_device_name: Optional[str] = Field(default=None, alias="RootDeviceName")
    sriov_net_support: Optional[str] = Field(default=None, alias="SriovNetSupport")
    virtualization_type: Optional[str] = Field(default=None, alias="VirtualizationType")
    boot_mode: Optional[Literal["legacy-bios", "uefi"]] = Field(
        default=None, alias="BootMode"
    )
    tpm_support: Optional[Literal["v2.0"]] = Field(default=None, alias="TpmSupport")
    uefi_data: Optional[str] = Field(default=None, alias="UefiData")
    imds_support: Optional[Literal["v2.0"]] = Field(default=None, alias="ImdsSupport")


class CancelCapacityReservationFleetsResultModel(BaseModel):
    successful_fleet_cancellations: List[
        CapacityReservationFleetCancellationStateModel
    ] = Field(alias="SuccessfulFleetCancellations")
    failed_fleet_cancellations: List[
        FailedCapacityReservationFleetCancellationResultModel
    ] = Field(alias="FailedFleetCancellations")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CancelSpotFleetRequestsResponseModel(BaseModel):
    successful_fleet_requests: List[CancelSpotFleetRequestsSuccessItemModel] = Field(
        alias="SuccessfulFleetRequests"
    )
    unsuccessful_fleet_requests: List[CancelSpotFleetRequestsErrorItemModel] = Field(
        alias="UnsuccessfulFleetRequests"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateCapacityReservationResultModel(BaseModel):
    capacity_reservation: CapacityReservationModel = Field(alias="CapacityReservation")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeCapacityReservationsResultModel(BaseModel):
    next_token: str = Field(alias="NextToken")
    capacity_reservations: List[CapacityReservationModel] = Field(
        alias="CapacityReservations"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeCapacityReservationFleetsResultModel(BaseModel):
    capacity_reservation_fleets: List[CapacityReservationFleetModel] = Field(
        alias="CapacityReservationFleets"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyInstanceCapacityReservationAttributesRequestModel(BaseModel):
    instance_id: str = Field(alias="InstanceId")
    capacity_reservation_specification: CapacityReservationSpecificationModel = Field(
        alias="CapacityReservationSpecification"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class DescribeClassicLinkInstancesResultModel(BaseModel):
    instances: List[ClassicLinkInstanceModel] = Field(alias="Instances")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateClientVpnEndpointRequestModel(BaseModel):
    client_cidr_block: str = Field(alias="ClientCidrBlock")
    server_certificate_arn: str = Field(alias="ServerCertificateArn")
    authentication_options: Sequence[ClientVpnAuthenticationRequestModel] = Field(
        alias="AuthenticationOptions"
    )
    connection_log_options: ConnectionLogOptionsModel = Field(
        alias="ConnectionLogOptions"
    )
    dns_servers: Optional[Sequence[str]] = Field(default=None, alias="DnsServers")
    transport_protocol: Optional[Literal["tcp", "udp"]] = Field(
        default=None, alias="TransportProtocol"
    )
    vpn_port: Optional[int] = Field(default=None, alias="VpnPort")
    description: Optional[str] = Field(default=None, alias="Description")
    split_tunnel: Optional[bool] = Field(default=None, alias="SplitTunnel")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    security_group_ids: Optional[Sequence[str]] = Field(
        default=None, alias="SecurityGroupIds"
    )
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")
    self_service_portal: Optional[Literal["disabled", "enabled"]] = Field(
        default=None, alias="SelfServicePortal"
    )
    client_connect_options: Optional[ClientConnectOptionsModel] = Field(
        default=None, alias="ClientConnectOptions"
    )
    session_timeout_hours: Optional[int] = Field(
        default=None, alias="SessionTimeoutHours"
    )
    client_login_banner_options: Optional[ClientLoginBannerOptionsModel] = Field(
        default=None, alias="ClientLoginBannerOptions"
    )


class ClientVpnEndpointModel(BaseModel):
    client_vpn_endpoint_id: Optional[str] = Field(
        default=None, alias="ClientVpnEndpointId"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    status: Optional[ClientVpnEndpointStatusModel] = Field(default=None, alias="Status")
    creation_time: Optional[str] = Field(default=None, alias="CreationTime")
    deletion_time: Optional[str] = Field(default=None, alias="DeletionTime")
    dns_name: Optional[str] = Field(default=None, alias="DnsName")
    client_cidr_block: Optional[str] = Field(default=None, alias="ClientCidrBlock")
    dns_servers: Optional[List[str]] = Field(default=None, alias="DnsServers")
    split_tunnel: Optional[bool] = Field(default=None, alias="SplitTunnel")
    vpn_protocol: Optional[Literal["openvpn"]] = Field(
        default=None, alias="VpnProtocol"
    )
    transport_protocol: Optional[Literal["tcp", "udp"]] = Field(
        default=None, alias="TransportProtocol"
    )
    vpn_port: Optional[int] = Field(default=None, alias="VpnPort")
    associated_target_networks: Optional[List[AssociatedTargetNetworkModel]] = Field(
        default=None, alias="AssociatedTargetNetworks"
    )
    server_certificate_arn: Optional[str] = Field(
        default=None, alias="ServerCertificateArn"
    )
    authentication_options: Optional[List[ClientVpnAuthenticationModel]] = Field(
        default=None, alias="AuthenticationOptions"
    )
    connection_log_options: Optional[ConnectionLogResponseOptionsModel] = Field(
        default=None, alias="ConnectionLogOptions"
    )
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    security_group_ids: Optional[List[str]] = Field(
        default=None, alias="SecurityGroupIds"
    )
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")
    self_service_portal_url: Optional[str] = Field(
        default=None, alias="SelfServicePortalUrl"
    )
    client_connect_options: Optional[ClientConnectResponseOptionsModel] = Field(
        default=None, alias="ClientConnectOptions"
    )
    session_timeout_hours: Optional[int] = Field(
        default=None, alias="SessionTimeoutHours"
    )
    client_login_banner_options: Optional[
        ClientLoginBannerResponseOptionsModel
    ] = Field(default=None, alias="ClientLoginBannerOptions")


class DescribeClientVpnConnectionsResultModel(BaseModel):
    connections: List[ClientVpnConnectionModel] = Field(alias="Connections")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class TerminateClientVpnConnectionsResultModel(BaseModel):
    client_vpn_endpoint_id: str = Field(alias="ClientVpnEndpointId")
    username: str = Field(alias="Username")
    connection_statuses: List[TerminateConnectionStatusModel] = Field(
        alias="ConnectionStatuses"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeClientVpnRoutesResultModel(BaseModel):
    routes: List[ClientVpnRouteModel] = Field(alias="Routes")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyVpnTunnelOptionsSpecificationModel(BaseModel):
    tunnel_inside_cidr: Optional[str] = Field(default=None, alias="TunnelInsideCidr")
    tunnel_inside_ipv6_cidr: Optional[str] = Field(
        default=None, alias="TunnelInsideIpv6Cidr"
    )
    pre_shared_key: Optional[str] = Field(default=None, alias="PreSharedKey")
    phase1_lifetime_seconds: Optional[int] = Field(
        default=None, alias="Phase1LifetimeSeconds"
    )
    phase2_lifetime_seconds: Optional[int] = Field(
        default=None, alias="Phase2LifetimeSeconds"
    )
    rekey_margin_time_seconds: Optional[int] = Field(
        default=None, alias="RekeyMarginTimeSeconds"
    )
    rekey_fuzz_percentage: Optional[int] = Field(
        default=None, alias="RekeyFuzzPercentage"
    )
    replay_window_size: Optional[int] = Field(default=None, alias="ReplayWindowSize")
    dp_dtimeout_seconds: Optional[int] = Field(default=None, alias="DPDTimeoutSeconds")
    dp_dtimeout_action: Optional[str] = Field(default=None, alias="DPDTimeoutAction")
    phase1_encryption_algorithms: Optional[
        Sequence[Phase1EncryptionAlgorithmsRequestListValueModel]
    ] = Field(default=None, alias="Phase1EncryptionAlgorithms")
    phase2_encryption_algorithms: Optional[
        Sequence[Phase2EncryptionAlgorithmsRequestListValueModel]
    ] = Field(default=None, alias="Phase2EncryptionAlgorithms")
    phase1_integrity_algorithms: Optional[
        Sequence[Phase1IntegrityAlgorithmsRequestListValueModel]
    ] = Field(default=None, alias="Phase1IntegrityAlgorithms")
    phase2_integrity_algorithms: Optional[
        Sequence[Phase2IntegrityAlgorithmsRequestListValueModel]
    ] = Field(default=None, alias="Phase2IntegrityAlgorithms")
    phase1_dhgroup_numbers: Optional[
        Sequence[Phase1DHGroupNumbersRequestListValueModel]
    ] = Field(default=None, alias="Phase1DHGroupNumbers")
    phase2_dhgroup_numbers: Optional[
        Sequence[Phase2DHGroupNumbersRequestListValueModel]
    ] = Field(default=None, alias="Phase2DHGroupNumbers")
    ikeversions: Optional[Sequence[IKEVersionsRequestListValueModel]] = Field(
        default=None, alias="IKEVersions"
    )
    startup_action: Optional[str] = Field(default=None, alias="StartupAction")
    log_options: Optional[VpnTunnelLogOptionsSpecificationModel] = Field(
        default=None, alias="LogOptions"
    )


class VpnTunnelOptionsSpecificationModel(BaseModel):
    tunnel_inside_cidr: Optional[str] = Field(default=None, alias="TunnelInsideCidr")
    tunnel_inside_ipv6_cidr: Optional[str] = Field(
        default=None, alias="TunnelInsideIpv6Cidr"
    )
    pre_shared_key: Optional[str] = Field(default=None, alias="PreSharedKey")
    phase1_lifetime_seconds: Optional[int] = Field(
        default=None, alias="Phase1LifetimeSeconds"
    )
    phase2_lifetime_seconds: Optional[int] = Field(
        default=None, alias="Phase2LifetimeSeconds"
    )
    rekey_margin_time_seconds: Optional[int] = Field(
        default=None, alias="RekeyMarginTimeSeconds"
    )
    rekey_fuzz_percentage: Optional[int] = Field(
        default=None, alias="RekeyFuzzPercentage"
    )
    replay_window_size: Optional[int] = Field(default=None, alias="ReplayWindowSize")
    dp_dtimeout_seconds: Optional[int] = Field(default=None, alias="DPDTimeoutSeconds")
    dp_dtimeout_action: Optional[str] = Field(default=None, alias="DPDTimeoutAction")
    phase1_encryption_algorithms: Optional[
        Sequence[Phase1EncryptionAlgorithmsRequestListValueModel]
    ] = Field(default=None, alias="Phase1EncryptionAlgorithms")
    phase2_encryption_algorithms: Optional[
        Sequence[Phase2EncryptionAlgorithmsRequestListValueModel]
    ] = Field(default=None, alias="Phase2EncryptionAlgorithms")
    phase1_integrity_algorithms: Optional[
        Sequence[Phase1IntegrityAlgorithmsRequestListValueModel]
    ] = Field(default=None, alias="Phase1IntegrityAlgorithms")
    phase2_integrity_algorithms: Optional[
        Sequence[Phase2IntegrityAlgorithmsRequestListValueModel]
    ] = Field(default=None, alias="Phase2IntegrityAlgorithms")
    phase1_dhgroup_numbers: Optional[
        Sequence[Phase1DHGroupNumbersRequestListValueModel]
    ] = Field(default=None, alias="Phase1DHGroupNumbers")
    phase2_dhgroup_numbers: Optional[
        Sequence[Phase2DHGroupNumbersRequestListValueModel]
    ] = Field(default=None, alias="Phase2DHGroupNumbers")
    ikeversions: Optional[Sequence[IKEVersionsRequestListValueModel]] = Field(
        default=None, alias="IKEVersions"
    )
    startup_action: Optional[str] = Field(default=None, alias="StartupAction")
    log_options: Optional[VpnTunnelLogOptionsSpecificationModel] = Field(
        default=None, alias="LogOptions"
    )


class TunnelOptionModel(BaseModel):
    outside_ip_address: Optional[str] = Field(default=None, alias="OutsideIpAddress")
    tunnel_inside_cidr: Optional[str] = Field(default=None, alias="TunnelInsideCidr")
    tunnel_inside_ipv6_cidr: Optional[str] = Field(
        default=None, alias="TunnelInsideIpv6Cidr"
    )
    pre_shared_key: Optional[str] = Field(default=None, alias="PreSharedKey")
    phase1_lifetime_seconds: Optional[int] = Field(
        default=None, alias="Phase1LifetimeSeconds"
    )
    phase2_lifetime_seconds: Optional[int] = Field(
        default=None, alias="Phase2LifetimeSeconds"
    )
    rekey_margin_time_seconds: Optional[int] = Field(
        default=None, alias="RekeyMarginTimeSeconds"
    )
    rekey_fuzz_percentage: Optional[int] = Field(
        default=None, alias="RekeyFuzzPercentage"
    )
    replay_window_size: Optional[int] = Field(default=None, alias="ReplayWindowSize")
    dpd_timeout_seconds: Optional[int] = Field(default=None, alias="DpdTimeoutSeconds")
    dpd_timeout_action: Optional[str] = Field(default=None, alias="DpdTimeoutAction")
    phase1_encryption_algorithms: Optional[
        List[Phase1EncryptionAlgorithmsListValueModel]
    ] = Field(default=None, alias="Phase1EncryptionAlgorithms")
    phase2_encryption_algorithms: Optional[
        List[Phase2EncryptionAlgorithmsListValueModel]
    ] = Field(default=None, alias="Phase2EncryptionAlgorithms")
    phase1_integrity_algorithms: Optional[
        List[Phase1IntegrityAlgorithmsListValueModel]
    ] = Field(default=None, alias="Phase1IntegrityAlgorithms")
    phase2_integrity_algorithms: Optional[
        List[Phase2IntegrityAlgorithmsListValueModel]
    ] = Field(default=None, alias="Phase2IntegrityAlgorithms")
    phase1_dhgroup_numbers: Optional[List[Phase1DHGroupNumbersListValueModel]] = Field(
        default=None, alias="Phase1DHGroupNumbers"
    )
    phase2_dhgroup_numbers: Optional[List[Phase2DHGroupNumbersListValueModel]] = Field(
        default=None, alias="Phase2DHGroupNumbers"
    )
    ike_versions: Optional[List[IKEVersionsListValueModel]] = Field(
        default=None, alias="IkeVersions"
    )
    startup_action: Optional[str] = Field(default=None, alias="StartupAction")
    log_options: Optional[VpnTunnelLogOptionsModel] = Field(
        default=None, alias="LogOptions"
    )


class NetworkAclModel(BaseModel):
    associations: Optional[List[NetworkAclAssociationModel]] = Field(
        default=None, alias="Associations"
    )
    entries: Optional[List[NetworkAclEntryModel]] = Field(default=None, alias="Entries")
    is_default: Optional[bool] = Field(default=None, alias="IsDefault")
    network_acl_id: Optional[str] = Field(default=None, alias="NetworkAclId")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")


class LaunchSpecificationModel(BaseModel):
    user_data: Optional[str] = Field(default=None, alias="UserData")
    security_groups: Optional[List[GroupIdentifierModel]] = Field(
        default=None, alias="SecurityGroups"
    )
    addressing_type: Optional[str] = Field(default=None, alias="AddressingType")
    block_device_mappings: Optional[List[BlockDeviceMappingModel]] = Field(
        default=None, alias="BlockDeviceMappings"
    )
    ebs_optimized: Optional[bool] = Field(default=None, alias="EbsOptimized")
    iam_instance_profile: Optional[IamInstanceProfileSpecificationModel] = Field(
        default=None, alias="IamInstanceProfile"
    )
    image_id: Optional[str] = Field(default=None, alias="ImageId")
    instance_type: Optional[
        Literal[
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.large",
            "a1.medium",
            "a1.metal",
            "a1.xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c3.large",
            "c3.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.large",
            "c5.metal",
            "c5.xlarge",
            "c5a.12xlarge",
            "c5a.16xlarge",
            "c5a.24xlarge",
            "c5a.2xlarge",
            "c5a.4xlarge",
            "c5a.8xlarge",
            "c5a.large",
            "c5a.xlarge",
            "c5ad.12xlarge",
            "c5ad.16xlarge",
            "c5ad.24xlarge",
            "c5ad.2xlarge",
            "c5ad.4xlarge",
            "c5ad.8xlarge",
            "c5ad.large",
            "c5ad.xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.large",
            "c5d.metal",
            "c5d.xlarge",
            "c5n.18xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.large",
            "c5n.metal",
            "c5n.xlarge",
            "c6a.12xlarge",
            "c6a.16xlarge",
            "c6a.24xlarge",
            "c6a.2xlarge",
            "c6a.32xlarge",
            "c6a.48xlarge",
            "c6a.4xlarge",
            "c6a.8xlarge",
            "c6a.large",
            "c6a.metal",
            "c6a.xlarge",
            "c6g.12xlarge",
            "c6g.16xlarge",
            "c6g.2xlarge",
            "c6g.4xlarge",
            "c6g.8xlarge",
            "c6g.large",
            "c6g.medium",
            "c6g.metal",
            "c6g.xlarge",
            "c6gd.12xlarge",
            "c6gd.16xlarge",
            "c6gd.2xlarge",
            "c6gd.4xlarge",
            "c6gd.8xlarge",
            "c6gd.large",
            "c6gd.medium",
            "c6gd.metal",
            "c6gd.xlarge",
            "c6gn.12xlarge",
            "c6gn.16xlarge",
            "c6gn.2xlarge",
            "c6gn.4xlarge",
            "c6gn.8xlarge",
            "c6gn.large",
            "c6gn.medium",
            "c6gn.xlarge",
            "c6i.12xlarge",
            "c6i.16xlarge",
            "c6i.24xlarge",
            "c6i.2xlarge",
            "c6i.32xlarge",
            "c6i.4xlarge",
            "c6i.8xlarge",
            "c6i.large",
            "c6i.metal",
            "c6i.xlarge",
            "c6id.12xlarge",
            "c6id.16xlarge",
            "c6id.24xlarge",
            "c6id.2xlarge",
            "c6id.32xlarge",
            "c6id.4xlarge",
            "c6id.8xlarge",
            "c6id.large",
            "c6id.metal",
            "c6id.xlarge",
            "c6in.12xlarge",
            "c6in.16xlarge",
            "c6in.24xlarge",
            "c6in.2xlarge",
            "c6in.32xlarge",
            "c6in.4xlarge",
            "c6in.8xlarge",
            "c6in.large",
            "c6in.xlarge",
            "c7g.12xlarge",
            "c7g.16xlarge",
            "c7g.2xlarge",
            "c7g.4xlarge",
            "c7g.8xlarge",
            "c7g.large",
            "c7g.medium",
            "c7g.xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "cg1.4xlarge",
            "cr1.8xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "d2.xlarge",
            "d3.2xlarge",
            "d3.4xlarge",
            "d3.8xlarge",
            "d3.xlarge",
            "d3en.12xlarge",
            "d3en.2xlarge",
            "d3en.4xlarge",
            "d3en.6xlarge",
            "d3en.8xlarge",
            "d3en.xlarge",
            "dl1.24xlarge",
            "f1.16xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.16xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3s.xlarge",
            "g4ad.16xlarge",
            "g4ad.2xlarge",
            "g4ad.4xlarge",
            "g4ad.8xlarge",
            "g4ad.xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.metal",
            "g4dn.xlarge",
            "g5.12xlarge",
            "g5.16xlarge",
            "g5.24xlarge",
            "g5.2xlarge",
            "g5.48xlarge",
            "g5.4xlarge",
            "g5.8xlarge",
            "g5.xlarge",
            "g5g.16xlarge",
            "g5g.2xlarge",
            "g5g.4xlarge",
            "g5g.8xlarge",
            "g5g.metal",
            "g5g.xlarge",
            "h1.16xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "hi1.4xlarge",
            "hpc6a.48xlarge",
            "hpc6id.32xlarge",
            "hs1.8xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i2.xlarge",
            "i3.16xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.large",
            "i3.metal",
            "i3.xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.large",
            "i3en.metal",
            "i3en.xlarge",
            "i4i.16xlarge",
            "i4i.2xlarge",
            "i4i.32xlarge",
            "i4i.4xlarge",
            "i4i.8xlarge",
            "i4i.large",
            "i4i.metal",
            "i4i.xlarge",
            "im4gn.16xlarge",
            "im4gn.2xlarge",
            "im4gn.4xlarge",
            "im4gn.8xlarge",
            "im4gn.large",
            "im4gn.xlarge",
            "inf1.24xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.xlarge",
            "is4gen.2xlarge",
            "is4gen.4xlarge",
            "is4gen.8xlarge",
            "is4gen.large",
            "is4gen.medium",
            "is4gen.xlarge",
            "m1.large",
            "m1.medium",
            "m1.small",
            "m1.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "m2.xlarge",
            "m3.2xlarge",
            "m3.large",
            "m3.medium",
            "m3.xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.large",
            "m4.xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.large",
            "m5.metal",
            "m5.xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.large",
            "m5a.xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.large",
            "m5ad.xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.large",
            "m5d.metal",
            "m5d.xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.large",
            "m5dn.metal",
            "m5dn.xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.large",
            "m5n.metal",
            "m5n.xlarge",
            "m5zn.12xlarge",
            "m5zn.2xlarge",
            "m5zn.3xlarge",
            "m5zn.6xlarge",
            "m5zn.large",
            "m5zn.metal",
            "m5zn.xlarge",
            "m6a.12xlarge",
            "m6a.16xlarge",
            "m6a.24xlarge",
            "m6a.2xlarge",
            "m6a.32xlarge",
            "m6a.48xlarge",
            "m6a.4xlarge",
            "m6a.8xlarge",
            "m6a.large",
            "m6a.metal",
            "m6a.xlarge",
            "m6g.12xlarge",
            "m6g.16xlarge",
            "m6g.2xlarge",
            "m6g.4xlarge",
            "m6g.8xlarge",
            "m6g.large",
            "m6g.medium",
            "m6g.metal",
            "m6g.xlarge",
            "m6gd.12xlarge",
            "m6gd.16xlarge",
            "m6gd.2xlarge",
            "m6gd.4xlarge",
            "m6gd.8xlarge",
            "m6gd.large",
            "m6gd.medium",
            "m6gd.metal",
            "m6gd.xlarge",
            "m6i.12xlarge",
            "m6i.16xlarge",
            "m6i.24xlarge",
            "m6i.2xlarge",
            "m6i.32xlarge",
            "m6i.4xlarge",
            "m6i.8xlarge",
            "m6i.large",
            "m6i.metal",
            "m6i.xlarge",
            "m6id.12xlarge",
            "m6id.16xlarge",
            "m6id.24xlarge",
            "m6id.2xlarge",
            "m6id.32xlarge",
            "m6id.4xlarge",
            "m6id.8xlarge",
            "m6id.large",
            "m6id.metal",
            "m6id.xlarge",
            "m6idn.12xlarge",
            "m6idn.16xlarge",
            "m6idn.24xlarge",
            "m6idn.2xlarge",
            "m6idn.32xlarge",
            "m6idn.4xlarge",
            "m6idn.8xlarge",
            "m6idn.large",
            "m6idn.xlarge",
            "m6in.12xlarge",
            "m6in.16xlarge",
            "m6in.24xlarge",
            "m6in.2xlarge",
            "m6in.32xlarge",
            "m6in.4xlarge",
            "m6in.8xlarge",
            "m6in.large",
            "m6in.xlarge",
            "mac1.metal",
            "mac2.metal",
            "p2.16xlarge",
            "p2.8xlarge",
            "p2.xlarge",
            "p3.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3dn.24xlarge",
            "p4d.24xlarge",
            "p4de.24xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r4.16xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.large",
            "r5.metal",
            "r5.xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.large",
            "r5a.xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.large",
            "r5ad.xlarge",
            "r5b.12xlarge",
            "r5b.16xlarge",
            "r5b.24xlarge",
            "r5b.2xlarge",
            "r5b.4xlarge",
            "r5b.8xlarge",
            "r5b.large",
            "r5b.metal",
            "r5b.xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.large",
            "r5d.metal",
            "r5d.xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.large",
            "r5dn.metal",
            "r5dn.xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.large",
            "r5n.metal",
            "r5n.xlarge",
            "r6a.12xlarge",
            "r6a.16xlarge",
            "r6a.24xlarge",
            "r6a.2xlarge",
            "r6a.32xlarge",
            "r6a.48xlarge",
            "r6a.4xlarge",
            "r6a.8xlarge",
            "r6a.large",
            "r6a.metal",
            "r6a.xlarge",
            "r6g.12xlarge",
            "r6g.16xlarge",
            "r6g.2xlarge",
            "r6g.4xlarge",
            "r6g.8xlarge",
            "r6g.large",
            "r6g.medium",
            "r6g.metal",
            "r6g.xlarge",
            "r6gd.12xlarge",
            "r6gd.16xlarge",
            "r6gd.2xlarge",
            "r6gd.4xlarge",
            "r6gd.8xlarge",
            "r6gd.large",
            "r6gd.medium",
            "r6gd.metal",
            "r6gd.xlarge",
            "r6i.12xlarge",
            "r6i.16xlarge",
            "r6i.24xlarge",
            "r6i.2xlarge",
            "r6i.32xlarge",
            "r6i.4xlarge",
            "r6i.8xlarge",
            "r6i.large",
            "r6i.metal",
            "r6i.xlarge",
            "r6id.12xlarge",
            "r6id.16xlarge",
            "r6id.24xlarge",
            "r6id.2xlarge",
            "r6id.32xlarge",
            "r6id.4xlarge",
            "r6id.8xlarge",
            "r6id.large",
            "r6id.metal",
            "r6id.xlarge",
            "r6idn.12xlarge",
            "r6idn.16xlarge",
            "r6idn.24xlarge",
            "r6idn.2xlarge",
            "r6idn.32xlarge",
            "r6idn.4xlarge",
            "r6idn.8xlarge",
            "r6idn.large",
            "r6idn.xlarge",
            "r6in.12xlarge",
            "r6in.16xlarge",
            "r6in.24xlarge",
            "r6in.2xlarge",
            "r6in.32xlarge",
            "r6in.4xlarge",
            "r6in.8xlarge",
            "r6in.large",
            "r6in.xlarge",
            "t1.micro",
            "t2.2xlarge",
            "t2.large",
            "t2.medium",
            "t2.micro",
            "t2.nano",
            "t2.small",
            "t2.xlarge",
            "t3.2xlarge",
            "t3.large",
            "t3.medium",
            "t3.micro",
            "t3.nano",
            "t3.small",
            "t3.xlarge",
            "t3a.2xlarge",
            "t3a.large",
            "t3a.medium",
            "t3a.micro",
            "t3a.nano",
            "t3a.small",
            "t3a.xlarge",
            "t4g.2xlarge",
            "t4g.large",
            "t4g.medium",
            "t4g.micro",
            "t4g.nano",
            "t4g.small",
            "t4g.xlarge",
            "trn1.2xlarge",
            "trn1.32xlarge",
            "u-12tb1.112xlarge",
            "u-12tb1.metal",
            "u-18tb1.112xlarge",
            "u-18tb1.metal",
            "u-24tb1.112xlarge",
            "u-24tb1.metal",
            "u-3tb1.56xlarge",
            "u-6tb1.112xlarge",
            "u-6tb1.56xlarge",
            "u-6tb1.metal",
            "u-9tb1.112xlarge",
            "u-9tb1.metal",
            "vt1.24xlarge",
            "vt1.3xlarge",
            "vt1.6xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.16xlarge",
            "x1e.2xlarge",
            "x1e.32xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.xlarge",
            "x2gd.12xlarge",
            "x2gd.16xlarge",
            "x2gd.2xlarge",
            "x2gd.4xlarge",
            "x2gd.8xlarge",
            "x2gd.large",
            "x2gd.medium",
            "x2gd.metal",
            "x2gd.xlarge",
            "x2idn.16xlarge",
            "x2idn.24xlarge",
            "x2idn.32xlarge",
            "x2idn.metal",
            "x2iedn.16xlarge",
            "x2iedn.24xlarge",
            "x2iedn.2xlarge",
            "x2iedn.32xlarge",
            "x2iedn.4xlarge",
            "x2iedn.8xlarge",
            "x2iedn.metal",
            "x2iedn.xlarge",
            "x2iezn.12xlarge",
            "x2iezn.2xlarge",
            "x2iezn.4xlarge",
            "x2iezn.6xlarge",
            "x2iezn.8xlarge",
            "x2iezn.metal",
            "z1d.12xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.large",
            "z1d.metal",
            "z1d.xlarge",
        ]
    ] = Field(default=None, alias="InstanceType")
    kernel_id: Optional[str] = Field(default=None, alias="KernelId")
    key_name: Optional[str] = Field(default=None, alias="KeyName")
    network_interfaces: Optional[
        List[InstanceNetworkInterfaceSpecificationModel]
    ] = Field(default=None, alias="NetworkInterfaces")
    placement: Optional[SpotPlacementModel] = Field(default=None, alias="Placement")
    ramdisk_id: Optional[str] = Field(default=None, alias="RamdiskId")
    subnet_id: Optional[str] = Field(default=None, alias="SubnetId")
    monitoring: Optional[RunInstancesMonitoringEnabledModel] = Field(
        default=None, alias="Monitoring"
    )


class RequestSpotLaunchSpecificationModel(BaseModel):
    security_group_ids: Optional[Sequence[str]] = Field(
        default=None, alias="SecurityGroupIds"
    )
    security_groups: Optional[Sequence[str]] = Field(
        default=None, alias="SecurityGroups"
    )
    addressing_type: Optional[str] = Field(default=None, alias="AddressingType")
    block_device_mappings: Optional[Sequence[BlockDeviceMappingModel]] = Field(
        default=None, alias="BlockDeviceMappings"
    )
    ebs_optimized: Optional[bool] = Field(default=None, alias="EbsOptimized")
    iam_instance_profile: Optional[IamInstanceProfileSpecificationModel] = Field(
        default=None, alias="IamInstanceProfile"
    )
    image_id: Optional[str] = Field(default=None, alias="ImageId")
    instance_type: Optional[
        Literal[
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.large",
            "a1.medium",
            "a1.metal",
            "a1.xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c3.large",
            "c3.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.large",
            "c5.metal",
            "c5.xlarge",
            "c5a.12xlarge",
            "c5a.16xlarge",
            "c5a.24xlarge",
            "c5a.2xlarge",
            "c5a.4xlarge",
            "c5a.8xlarge",
            "c5a.large",
            "c5a.xlarge",
            "c5ad.12xlarge",
            "c5ad.16xlarge",
            "c5ad.24xlarge",
            "c5ad.2xlarge",
            "c5ad.4xlarge",
            "c5ad.8xlarge",
            "c5ad.large",
            "c5ad.xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.large",
            "c5d.metal",
            "c5d.xlarge",
            "c5n.18xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.large",
            "c5n.metal",
            "c5n.xlarge",
            "c6a.12xlarge",
            "c6a.16xlarge",
            "c6a.24xlarge",
            "c6a.2xlarge",
            "c6a.32xlarge",
            "c6a.48xlarge",
            "c6a.4xlarge",
            "c6a.8xlarge",
            "c6a.large",
            "c6a.metal",
            "c6a.xlarge",
            "c6g.12xlarge",
            "c6g.16xlarge",
            "c6g.2xlarge",
            "c6g.4xlarge",
            "c6g.8xlarge",
            "c6g.large",
            "c6g.medium",
            "c6g.metal",
            "c6g.xlarge",
            "c6gd.12xlarge",
            "c6gd.16xlarge",
            "c6gd.2xlarge",
            "c6gd.4xlarge",
            "c6gd.8xlarge",
            "c6gd.large",
            "c6gd.medium",
            "c6gd.metal",
            "c6gd.xlarge",
            "c6gn.12xlarge",
            "c6gn.16xlarge",
            "c6gn.2xlarge",
            "c6gn.4xlarge",
            "c6gn.8xlarge",
            "c6gn.large",
            "c6gn.medium",
            "c6gn.xlarge",
            "c6i.12xlarge",
            "c6i.16xlarge",
            "c6i.24xlarge",
            "c6i.2xlarge",
            "c6i.32xlarge",
            "c6i.4xlarge",
            "c6i.8xlarge",
            "c6i.large",
            "c6i.metal",
            "c6i.xlarge",
            "c6id.12xlarge",
            "c6id.16xlarge",
            "c6id.24xlarge",
            "c6id.2xlarge",
            "c6id.32xlarge",
            "c6id.4xlarge",
            "c6id.8xlarge",
            "c6id.large",
            "c6id.metal",
            "c6id.xlarge",
            "c6in.12xlarge",
            "c6in.16xlarge",
            "c6in.24xlarge",
            "c6in.2xlarge",
            "c6in.32xlarge",
            "c6in.4xlarge",
            "c6in.8xlarge",
            "c6in.large",
            "c6in.xlarge",
            "c7g.12xlarge",
            "c7g.16xlarge",
            "c7g.2xlarge",
            "c7g.4xlarge",
            "c7g.8xlarge",
            "c7g.large",
            "c7g.medium",
            "c7g.xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "cg1.4xlarge",
            "cr1.8xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "d2.xlarge",
            "d3.2xlarge",
            "d3.4xlarge",
            "d3.8xlarge",
            "d3.xlarge",
            "d3en.12xlarge",
            "d3en.2xlarge",
            "d3en.4xlarge",
            "d3en.6xlarge",
            "d3en.8xlarge",
            "d3en.xlarge",
            "dl1.24xlarge",
            "f1.16xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.16xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3s.xlarge",
            "g4ad.16xlarge",
            "g4ad.2xlarge",
            "g4ad.4xlarge",
            "g4ad.8xlarge",
            "g4ad.xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.metal",
            "g4dn.xlarge",
            "g5.12xlarge",
            "g5.16xlarge",
            "g5.24xlarge",
            "g5.2xlarge",
            "g5.48xlarge",
            "g5.4xlarge",
            "g5.8xlarge",
            "g5.xlarge",
            "g5g.16xlarge",
            "g5g.2xlarge",
            "g5g.4xlarge",
            "g5g.8xlarge",
            "g5g.metal",
            "g5g.xlarge",
            "h1.16xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "hi1.4xlarge",
            "hpc6a.48xlarge",
            "hpc6id.32xlarge",
            "hs1.8xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i2.xlarge",
            "i3.16xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.large",
            "i3.metal",
            "i3.xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.large",
            "i3en.metal",
            "i3en.xlarge",
            "i4i.16xlarge",
            "i4i.2xlarge",
            "i4i.32xlarge",
            "i4i.4xlarge",
            "i4i.8xlarge",
            "i4i.large",
            "i4i.metal",
            "i4i.xlarge",
            "im4gn.16xlarge",
            "im4gn.2xlarge",
            "im4gn.4xlarge",
            "im4gn.8xlarge",
            "im4gn.large",
            "im4gn.xlarge",
            "inf1.24xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.xlarge",
            "is4gen.2xlarge",
            "is4gen.4xlarge",
            "is4gen.8xlarge",
            "is4gen.large",
            "is4gen.medium",
            "is4gen.xlarge",
            "m1.large",
            "m1.medium",
            "m1.small",
            "m1.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "m2.xlarge",
            "m3.2xlarge",
            "m3.large",
            "m3.medium",
            "m3.xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.large",
            "m4.xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.large",
            "m5.metal",
            "m5.xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.large",
            "m5a.xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.large",
            "m5ad.xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.large",
            "m5d.metal",
            "m5d.xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.large",
            "m5dn.metal",
            "m5dn.xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.large",
            "m5n.metal",
            "m5n.xlarge",
            "m5zn.12xlarge",
            "m5zn.2xlarge",
            "m5zn.3xlarge",
            "m5zn.6xlarge",
            "m5zn.large",
            "m5zn.metal",
            "m5zn.xlarge",
            "m6a.12xlarge",
            "m6a.16xlarge",
            "m6a.24xlarge",
            "m6a.2xlarge",
            "m6a.32xlarge",
            "m6a.48xlarge",
            "m6a.4xlarge",
            "m6a.8xlarge",
            "m6a.large",
            "m6a.metal",
            "m6a.xlarge",
            "m6g.12xlarge",
            "m6g.16xlarge",
            "m6g.2xlarge",
            "m6g.4xlarge",
            "m6g.8xlarge",
            "m6g.large",
            "m6g.medium",
            "m6g.metal",
            "m6g.xlarge",
            "m6gd.12xlarge",
            "m6gd.16xlarge",
            "m6gd.2xlarge",
            "m6gd.4xlarge",
            "m6gd.8xlarge",
            "m6gd.large",
            "m6gd.medium",
            "m6gd.metal",
            "m6gd.xlarge",
            "m6i.12xlarge",
            "m6i.16xlarge",
            "m6i.24xlarge",
            "m6i.2xlarge",
            "m6i.32xlarge",
            "m6i.4xlarge",
            "m6i.8xlarge",
            "m6i.large",
            "m6i.metal",
            "m6i.xlarge",
            "m6id.12xlarge",
            "m6id.16xlarge",
            "m6id.24xlarge",
            "m6id.2xlarge",
            "m6id.32xlarge",
            "m6id.4xlarge",
            "m6id.8xlarge",
            "m6id.large",
            "m6id.metal",
            "m6id.xlarge",
            "m6idn.12xlarge",
            "m6idn.16xlarge",
            "m6idn.24xlarge",
            "m6idn.2xlarge",
            "m6idn.32xlarge",
            "m6idn.4xlarge",
            "m6idn.8xlarge",
            "m6idn.large",
            "m6idn.xlarge",
            "m6in.12xlarge",
            "m6in.16xlarge",
            "m6in.24xlarge",
            "m6in.2xlarge",
            "m6in.32xlarge",
            "m6in.4xlarge",
            "m6in.8xlarge",
            "m6in.large",
            "m6in.xlarge",
            "mac1.metal",
            "mac2.metal",
            "p2.16xlarge",
            "p2.8xlarge",
            "p2.xlarge",
            "p3.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3dn.24xlarge",
            "p4d.24xlarge",
            "p4de.24xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r4.16xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.large",
            "r5.metal",
            "r5.xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.large",
            "r5a.xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.large",
            "r5ad.xlarge",
            "r5b.12xlarge",
            "r5b.16xlarge",
            "r5b.24xlarge",
            "r5b.2xlarge",
            "r5b.4xlarge",
            "r5b.8xlarge",
            "r5b.large",
            "r5b.metal",
            "r5b.xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.large",
            "r5d.metal",
            "r5d.xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.large",
            "r5dn.metal",
            "r5dn.xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.large",
            "r5n.metal",
            "r5n.xlarge",
            "r6a.12xlarge",
            "r6a.16xlarge",
            "r6a.24xlarge",
            "r6a.2xlarge",
            "r6a.32xlarge",
            "r6a.48xlarge",
            "r6a.4xlarge",
            "r6a.8xlarge",
            "r6a.large",
            "r6a.metal",
            "r6a.xlarge",
            "r6g.12xlarge",
            "r6g.16xlarge",
            "r6g.2xlarge",
            "r6g.4xlarge",
            "r6g.8xlarge",
            "r6g.large",
            "r6g.medium",
            "r6g.metal",
            "r6g.xlarge",
            "r6gd.12xlarge",
            "r6gd.16xlarge",
            "r6gd.2xlarge",
            "r6gd.4xlarge",
            "r6gd.8xlarge",
            "r6gd.large",
            "r6gd.medium",
            "r6gd.metal",
            "r6gd.xlarge",
            "r6i.12xlarge",
            "r6i.16xlarge",
            "r6i.24xlarge",
            "r6i.2xlarge",
            "r6i.32xlarge",
            "r6i.4xlarge",
            "r6i.8xlarge",
            "r6i.large",
            "r6i.metal",
            "r6i.xlarge",
            "r6id.12xlarge",
            "r6id.16xlarge",
            "r6id.24xlarge",
            "r6id.2xlarge",
            "r6id.32xlarge",
            "r6id.4xlarge",
            "r6id.8xlarge",
            "r6id.large",
            "r6id.metal",
            "r6id.xlarge",
            "r6idn.12xlarge",
            "r6idn.16xlarge",
            "r6idn.24xlarge",
            "r6idn.2xlarge",
            "r6idn.32xlarge",
            "r6idn.4xlarge",
            "r6idn.8xlarge",
            "r6idn.large",
            "r6idn.xlarge",
            "r6in.12xlarge",
            "r6in.16xlarge",
            "r6in.24xlarge",
            "r6in.2xlarge",
            "r6in.32xlarge",
            "r6in.4xlarge",
            "r6in.8xlarge",
            "r6in.large",
            "r6in.xlarge",
            "t1.micro",
            "t2.2xlarge",
            "t2.large",
            "t2.medium",
            "t2.micro",
            "t2.nano",
            "t2.small",
            "t2.xlarge",
            "t3.2xlarge",
            "t3.large",
            "t3.medium",
            "t3.micro",
            "t3.nano",
            "t3.small",
            "t3.xlarge",
            "t3a.2xlarge",
            "t3a.large",
            "t3a.medium",
            "t3a.micro",
            "t3a.nano",
            "t3a.small",
            "t3a.xlarge",
            "t4g.2xlarge",
            "t4g.large",
            "t4g.medium",
            "t4g.micro",
            "t4g.nano",
            "t4g.small",
            "t4g.xlarge",
            "trn1.2xlarge",
            "trn1.32xlarge",
            "u-12tb1.112xlarge",
            "u-12tb1.metal",
            "u-18tb1.112xlarge",
            "u-18tb1.metal",
            "u-24tb1.112xlarge",
            "u-24tb1.metal",
            "u-3tb1.56xlarge",
            "u-6tb1.112xlarge",
            "u-6tb1.56xlarge",
            "u-6tb1.metal",
            "u-9tb1.112xlarge",
            "u-9tb1.metal",
            "vt1.24xlarge",
            "vt1.3xlarge",
            "vt1.6xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.16xlarge",
            "x1e.2xlarge",
            "x1e.32xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.xlarge",
            "x2gd.12xlarge",
            "x2gd.16xlarge",
            "x2gd.2xlarge",
            "x2gd.4xlarge",
            "x2gd.8xlarge",
            "x2gd.large",
            "x2gd.medium",
            "x2gd.metal",
            "x2gd.xlarge",
            "x2idn.16xlarge",
            "x2idn.24xlarge",
            "x2idn.32xlarge",
            "x2idn.metal",
            "x2iedn.16xlarge",
            "x2iedn.24xlarge",
            "x2iedn.2xlarge",
            "x2iedn.32xlarge",
            "x2iedn.4xlarge",
            "x2iedn.8xlarge",
            "x2iedn.metal",
            "x2iedn.xlarge",
            "x2iezn.12xlarge",
            "x2iezn.2xlarge",
            "x2iezn.4xlarge",
            "x2iezn.6xlarge",
            "x2iezn.8xlarge",
            "x2iezn.metal",
            "z1d.12xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.large",
            "z1d.metal",
            "z1d.xlarge",
        ]
    ] = Field(default=None, alias="InstanceType")
    kernel_id: Optional[str] = Field(default=None, alias="KernelId")
    key_name: Optional[str] = Field(default=None, alias="KeyName")
    monitoring: Optional[RunInstancesMonitoringEnabledModel] = Field(
        default=None, alias="Monitoring"
    )
    network_interfaces: Optional[
        Sequence[InstanceNetworkInterfaceSpecificationModel]
    ] = Field(default=None, alias="NetworkInterfaces")
    placement: Optional[SpotPlacementModel] = Field(default=None, alias="Placement")
    ramdisk_id: Optional[str] = Field(default=None, alias="RamdiskId")
    subnet_id: Optional[str] = Field(default=None, alias="SubnetId")
    user_data: Optional[str] = Field(default=None, alias="UserData")


class ModifySnapshotAttributeRequestModel(BaseModel):
    snapshot_id: str = Field(alias="SnapshotId")
    attribute: Optional[Literal["createVolumePermission", "productCodes"]] = Field(
        default=None, alias="Attribute"
    )
    create_volume_permission: Optional[
        CreateVolumePermissionModificationsModel
    ] = Field(default=None, alias="CreateVolumePermission")
    group_names: Optional[Sequence[str]] = Field(default=None, alias="GroupNames")
    operation_type: Optional[Literal["add", "remove"]] = Field(
        default=None, alias="OperationType"
    )
    user_ids: Optional[Sequence[str]] = Field(default=None, alias="UserIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class ModifySnapshotAttributeRequestSnapshotModifyAttributeModel(BaseModel):
    attribute: Optional[Literal["createVolumePermission", "productCodes"]] = Field(
        default=None, alias="Attribute"
    )
    create_volume_permission: Optional[
        CreateVolumePermissionModificationsModel
    ] = Field(default=None, alias="CreateVolumePermission")
    group_names: Optional[Sequence[str]] = Field(default=None, alias="GroupNames")
    operation_type: Optional[Literal["add", "remove"]] = Field(
        default=None, alias="OperationType"
    )
    user_ids: Optional[Sequence[str]] = Field(default=None, alias="UserIds")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class GetAwsNetworkPerformanceDataResultModel(BaseModel):
    data_responses: List[DataResponseModel] = Field(alias="DataResponses")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteFleetsResultModel(BaseModel):
    successful_fleet_deletions: List[DeleteFleetSuccessItemModel] = Field(
        alias="SuccessfulFleetDeletions"
    )
    unsuccessful_fleet_deletions: List[DeleteFleetErrorItemModel] = Field(
        alias="UnsuccessfulFleetDeletions"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteLaunchTemplateVersionsResultModel(BaseModel):
    successfully_deleted_launch_template_versions: List[
        DeleteLaunchTemplateVersionsResponseSuccessItemModel
    ] = Field(alias="SuccessfullyDeletedLaunchTemplateVersions")
    unsuccessfully_deleted_launch_template_versions: List[
        DeleteLaunchTemplateVersionsResponseErrorItemModel
    ] = Field(alias="UnsuccessfullyDeletedLaunchTemplateVersions")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteQueuedReservedInstancesResultModel(BaseModel):
    successful_queued_purchase_deletions: List[
        SuccessfulQueuedPurchaseDeletionModel
    ] = Field(alias="SuccessfulQueuedPurchaseDeletions")
    failed_queued_purchase_deletions: List[FailedQueuedPurchaseDeletionModel] = Field(
        alias="FailedQueuedPurchaseDeletions"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribePrincipalIdFormatResultModel(BaseModel):
    principals: List[PrincipalIdFormatModel] = Field(alias="Principals")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeFastLaunchImagesResultModel(BaseModel):
    fast_launch_images: List[DescribeFastLaunchImagesSuccessItemModel] = Field(
        alias="FastLaunchImages"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeFlowLogsResultModel(BaseModel):
    flow_logs: List[FlowLogModel] = Field(alias="FlowLogs")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DisableFastSnapshotRestoreErrorItemModel(BaseModel):
    snapshot_id: Optional[str] = Field(default=None, alias="SnapshotId")
    fast_snapshot_restore_state_errors: Optional[
        List[DisableFastSnapshotRestoreStateErrorItemModel]
    ] = Field(default=None, alias="FastSnapshotRestoreStateErrors")


class ImportInstanceTaskDetailsModel(BaseModel):
    description: Optional[str] = Field(default=None, alias="Description")
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    platform: Optional[Literal["Windows"]] = Field(default=None, alias="Platform")
    volumes: Optional[List[ImportInstanceVolumeDetailItemModel]] = Field(
        default=None, alias="Volumes"
    )


class DescribeVpcEndpointConnectionsResultModel(BaseModel):
    vpc_endpoint_connections: List[VpcEndpointConnectionModel] = Field(
        alias="VpcEndpointConnections"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyInstanceAttributeRequestInstanceModifyAttributeModel(BaseModel):
    source_dest_check: Optional[AttributeBooleanValueModel] = Field(
        default=None, alias="SourceDestCheck"
    )
    attribute: Optional[
        Literal[
            "blockDeviceMapping",
            "disableApiStop",
            "disableApiTermination",
            "ebsOptimized",
            "enaSupport",
            "enclaveOptions",
            "groupSet",
            "instanceInitiatedShutdownBehavior",
            "instanceType",
            "kernel",
            "productCodes",
            "ramdisk",
            "rootDeviceName",
            "sourceDestCheck",
            "sriovNetSupport",
            "userData",
        ]
    ] = Field(default=None, alias="Attribute")
    block_device_mappings: Optional[
        Sequence[InstanceBlockDeviceMappingSpecificationModel]
    ] = Field(default=None, alias="BlockDeviceMappings")
    disable_api_termination: Optional[AttributeBooleanValueModel] = Field(
        default=None, alias="DisableApiTermination"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    ebs_optimized: Optional[AttributeBooleanValueModel] = Field(
        default=None, alias="EbsOptimized"
    )
    ena_support: Optional[AttributeBooleanValueModel] = Field(
        default=None, alias="EnaSupport"
    )
    groups: Optional[Sequence[str]] = Field(default=None, alias="Groups")
    instance_initiated_shutdown_behavior: Optional[AttributeValueModel] = Field(
        default=None, alias="InstanceInitiatedShutdownBehavior"
    )
    instance_type: Optional[AttributeValueModel] = Field(
        default=None, alias="InstanceType"
    )
    kernel: Optional[AttributeValueModel] = Field(default=None, alias="Kernel")
    ramdisk: Optional[AttributeValueModel] = Field(default=None, alias="Ramdisk")
    sriov_net_support: Optional[AttributeValueModel] = Field(
        default=None, alias="SriovNetSupport"
    )
    user_data: Optional[BlobAttributeValueModel] = Field(default=None, alias="UserData")
    value: Optional[str] = Field(default=None, alias="Value")
    disable_api_stop: Optional[AttributeBooleanValueModel] = Field(
        default=None, alias="DisableApiStop"
    )


class ModifyInstanceAttributeRequestModel(BaseModel):
    instance_id: str = Field(alias="InstanceId")
    source_dest_check: Optional[AttributeBooleanValueModel] = Field(
        default=None, alias="SourceDestCheck"
    )
    attribute: Optional[
        Literal[
            "blockDeviceMapping",
            "disableApiStop",
            "disableApiTermination",
            "ebsOptimized",
            "enaSupport",
            "enclaveOptions",
            "groupSet",
            "instanceInitiatedShutdownBehavior",
            "instanceType",
            "kernel",
            "productCodes",
            "ramdisk",
            "rootDeviceName",
            "sourceDestCheck",
            "sriovNetSupport",
            "userData",
        ]
    ] = Field(default=None, alias="Attribute")
    block_device_mappings: Optional[
        Sequence[InstanceBlockDeviceMappingSpecificationModel]
    ] = Field(default=None, alias="BlockDeviceMappings")
    disable_api_termination: Optional[AttributeBooleanValueModel] = Field(
        default=None, alias="DisableApiTermination"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    ebs_optimized: Optional[AttributeBooleanValueModel] = Field(
        default=None, alias="EbsOptimized"
    )
    ena_support: Optional[AttributeBooleanValueModel] = Field(
        default=None, alias="EnaSupport"
    )
    groups: Optional[Sequence[str]] = Field(default=None, alias="Groups")
    instance_initiated_shutdown_behavior: Optional[AttributeValueModel] = Field(
        default=None, alias="InstanceInitiatedShutdownBehavior"
    )
    instance_type: Optional[AttributeValueModel] = Field(
        default=None, alias="InstanceType"
    )
    kernel: Optional[AttributeValueModel] = Field(default=None, alias="Kernel")
    ramdisk: Optional[AttributeValueModel] = Field(default=None, alias="Ramdisk")
    sriov_net_support: Optional[AttributeValueModel] = Field(
        default=None, alias="SriovNetSupport"
    )
    user_data: Optional[BlobAttributeValueModel] = Field(default=None, alias="UserData")
    value: Optional[str] = Field(default=None, alias="Value")
    disable_api_stop: Optional[AttributeBooleanValueModel] = Field(
        default=None, alias="DisableApiStop"
    )


class InstanceAttributeModel(BaseModel):
    groups: List[GroupIdentifierModel] = Field(alias="Groups")
    block_device_mappings: List[InstanceBlockDeviceMappingModel] = Field(
        alias="BlockDeviceMappings"
    )
    disable_api_termination: AttributeBooleanValueModel = Field(
        alias="DisableApiTermination"
    )
    ena_support: AttributeBooleanValueModel = Field(alias="EnaSupport")
    enclave_options: EnclaveOptionsModel = Field(alias="EnclaveOptions")
    ebs_optimized: AttributeBooleanValueModel = Field(alias="EbsOptimized")
    instance_id: str = Field(alias="InstanceId")
    instance_initiated_shutdown_behavior: AttributeValueModel = Field(
        alias="InstanceInitiatedShutdownBehavior"
    )
    instance_type: AttributeValueModel = Field(alias="InstanceType")
    kernel_id: AttributeValueModel = Field(alias="KernelId")
    product_codes: List[ProductCodeModel] = Field(alias="ProductCodes")
    ramdisk_id: AttributeValueModel = Field(alias="RamdiskId")
    root_device_name: AttributeValueModel = Field(alias="RootDeviceName")
    source_dest_check: AttributeBooleanValueModel = Field(alias="SourceDestCheck")
    sriov_net_support: AttributeValueModel = Field(alias="SriovNetSupport")
    user_data: AttributeValueModel = Field(alias="UserData")
    disable_api_stop: AttributeBooleanValueModel = Field(alias="DisableApiStop")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateEgressOnlyInternetGatewayResultModel(BaseModel):
    client_token: str = Field(alias="ClientToken")
    egress_only_internet_gateway: EgressOnlyInternetGatewayModel = Field(
        alias="EgressOnlyInternetGateway"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeEgressOnlyInternetGatewaysResultModel(BaseModel):
    egress_only_internet_gateways: List[EgressOnlyInternetGatewayModel] = Field(
        alias="EgressOnlyInternetGateways"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateInternetGatewayResultModel(BaseModel):
    internet_gateway: InternetGatewayModel = Field(alias="InternetGateway")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeInternetGatewaysResultModel(BaseModel):
    internet_gateways: List[InternetGatewayModel] = Field(alias="InternetGateways")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeElasticGpusResultModel(BaseModel):
    elastic_gpu_set: List[ElasticGpusModel] = Field(alias="ElasticGpuSet")
    max_results: int = Field(alias="MaxResults")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AttachNetworkInterfaceRequestNetworkInterfaceAttachModel(BaseModel):
    device_index: int = Field(alias="DeviceIndex")
    instance_id: str = Field(alias="InstanceId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    network_card_index: Optional[int] = Field(default=None, alias="NetworkCardIndex")
    ena_srd_specification: Optional[EnaSrdSpecificationModel] = Field(
        default=None, alias="EnaSrdSpecification"
    )


class AttachNetworkInterfaceRequestModel(BaseModel):
    device_index: int = Field(alias="DeviceIndex")
    instance_id: str = Field(alias="InstanceId")
    network_interface_id: str = Field(alias="NetworkInterfaceId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    network_card_index: Optional[int] = Field(default=None, alias="NetworkCardIndex")
    ena_srd_specification: Optional[EnaSrdSpecificationModel] = Field(
        default=None, alias="EnaSrdSpecification"
    )


class ModifyNetworkInterfaceAttributeRequestNetworkInterfaceModifyAttributeModel(
    BaseModel
):
    attachment: Optional[NetworkInterfaceAttachmentChangesModel] = Field(
        default=None, alias="Attachment"
    )
    description: Optional[AttributeValueModel] = Field(
        default=None, alias="Description"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    groups: Optional[Sequence[str]] = Field(default=None, alias="Groups")
    source_dest_check: Optional[AttributeBooleanValueModel] = Field(
        default=None, alias="SourceDestCheck"
    )
    ena_srd_specification: Optional[EnaSrdSpecificationModel] = Field(
        default=None, alias="EnaSrdSpecification"
    )


class ModifyNetworkInterfaceAttributeRequestModel(BaseModel):
    network_interface_id: str = Field(alias="NetworkInterfaceId")
    attachment: Optional[NetworkInterfaceAttachmentChangesModel] = Field(
        default=None, alias="Attachment"
    )
    description: Optional[AttributeValueModel] = Field(
        default=None, alias="Description"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    groups: Optional[Sequence[str]] = Field(default=None, alias="Groups")
    source_dest_check: Optional[AttributeBooleanValueModel] = Field(
        default=None, alias="SourceDestCheck"
    )
    ena_srd_specification: Optional[EnaSrdSpecificationModel] = Field(
        default=None, alias="EnaSrdSpecification"
    )


class EnableFastSnapshotRestoreErrorItemModel(BaseModel):
    snapshot_id: Optional[str] = Field(default=None, alias="SnapshotId")
    fast_snapshot_restore_state_errors: Optional[
        List[EnableFastSnapshotRestoreStateErrorItemModel]
    ] = Field(default=None, alias="FastSnapshotRestoreStateErrors")


class DescribeFleetHistoryResultModel(BaseModel):
    history_records: List[HistoryRecordEntryModel] = Field(alias="HistoryRecords")
    last_evaluated_time: datetime = Field(alias="LastEvaluatedTime")
    next_token: str = Field(alias="NextToken")
    fleet_id: str = Field(alias="FleetId")
    start_time: datetime = Field(alias="StartTime")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeSpotFleetRequestHistoryResponseModel(BaseModel):
    history_records: List[HistoryRecordModel] = Field(alias="HistoryRecords")
    last_evaluated_time: datetime = Field(alias="LastEvaluatedTime")
    next_token: str = Field(alias="NextToken")
    spot_fleet_request_id: str = Field(alias="SpotFleetRequestId")
    start_time: datetime = Field(alias="StartTime")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeExportImageTasksResultModel(BaseModel):
    export_image_tasks: List[ExportImageTaskModel] = Field(alias="ExportImageTasks")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateInstanceExportTaskResultModel(BaseModel):
    export_task: ExportTaskModel = Field(alias="ExportTask")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeExportTasksResultModel(BaseModel):
    export_tasks: List[ExportTaskModel] = Field(alias="ExportTasks")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class SpotOptionsRequestModel(BaseModel):
    allocation_strategy: Optional[
        Literal[
            "capacity-optimized",
            "capacity-optimized-prioritized",
            "diversified",
            "lowest-price",
            "price-capacity-optimized",
        ]
    ] = Field(default=None, alias="AllocationStrategy")
    maintenance_strategies: Optional[
        FleetSpotMaintenanceStrategiesRequestModel
    ] = Field(default=None, alias="MaintenanceStrategies")
    instance_interruption_behavior: Optional[
        Literal["hibernate", "stop", "terminate"]
    ] = Field(default=None, alias="InstanceInterruptionBehavior")
    instance_pools_to_use_count: Optional[int] = Field(
        default=None, alias="InstancePoolsToUseCount"
    )
    single_instance_type: Optional[bool] = Field(
        default=None, alias="SingleInstanceType"
    )
    single_availability_zone: Optional[bool] = Field(
        default=None, alias="SingleAvailabilityZone"
    )
    min_target_capacity: Optional[int] = Field(default=None, alias="MinTargetCapacity")
    max_total_price: Optional[str] = Field(default=None, alias="MaxTotalPrice")


class SpotOptionsModel(BaseModel):
    allocation_strategy: Optional[
        Literal[
            "capacity-optimized",
            "capacity-optimized-prioritized",
            "diversified",
            "lowest-price",
            "price-capacity-optimized",
        ]
    ] = Field(default=None, alias="AllocationStrategy")
    maintenance_strategies: Optional[FleetSpotMaintenanceStrategiesModel] = Field(
        default=None, alias="MaintenanceStrategies"
    )
    instance_interruption_behavior: Optional[
        Literal["hibernate", "stop", "terminate"]
    ] = Field(default=None, alias="InstanceInterruptionBehavior")
    instance_pools_to_use_count: Optional[int] = Field(
        default=None, alias="InstancePoolsToUseCount"
    )
    single_instance_type: Optional[bool] = Field(
        default=None, alias="SingleInstanceType"
    )
    single_availability_zone: Optional[bool] = Field(
        default=None, alias="SingleAvailabilityZone"
    )
    min_target_capacity: Optional[int] = Field(default=None, alias="MinTargetCapacity")
    max_total_price: Optional[str] = Field(default=None, alias="MaxTotalPrice")


class FpgaInfoModel(BaseModel):
    fpgas: Optional[List[FpgaDeviceInfoModel]] = Field(default=None, alias="Fpgas")
    total_fpga_memory_in_mi_b: Optional[int] = Field(
        default=None, alias="TotalFpgaMemoryInMiB"
    )


class DescribeFpgaImageAttributeResultModel(BaseModel):
    fpga_image_attribute: FpgaImageAttributeModel = Field(alias="FpgaImageAttribute")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyFpgaImageAttributeResultModel(BaseModel):
    fpga_image_attribute: FpgaImageAttributeModel = Field(alias="FpgaImageAttribute")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeFpgaImagesResultModel(BaseModel):
    fpga_images: List[FpgaImageModel] = Field(alias="FpgaImages")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GpuInfoModel(BaseModel):
    gpus: Optional[List[GpuDeviceInfoModel]] = Field(default=None, alias="Gpus")
    total_gpu_memory_in_mi_b: Optional[int] = Field(
        default=None, alias="TotalGpuMemoryInMiB"
    )


class AssociateIamInstanceProfileResultModel(BaseModel):
    iam_instance_profile_association: IamInstanceProfileAssociationModel = Field(
        alias="IamInstanceProfileAssociation"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeIamInstanceProfileAssociationsResultModel(BaseModel):
    iam_instance_profile_associations: List[IamInstanceProfileAssociationModel] = Field(
        alias="IamInstanceProfileAssociations"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DisassociateIamInstanceProfileResultModel(BaseModel):
    iam_instance_profile_association: IamInstanceProfileAssociationModel = Field(
        alias="IamInstanceProfileAssociation"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ReplaceIamInstanceProfileAssociationResultModel(BaseModel):
    iam_instance_profile_association: IamInstanceProfileAssociationModel = Field(
        alias="IamInstanceProfileAssociation"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyImageAttributeRequestImageModifyAttributeModel(BaseModel):
    attribute: Optional[str] = Field(default=None, alias="Attribute")
    description: Optional[AttributeValueModel] = Field(
        default=None, alias="Description"
    )
    launch_permission: Optional[LaunchPermissionModificationsModel] = Field(
        default=None, alias="LaunchPermission"
    )
    operation_type: Optional[Literal["add", "remove"]] = Field(
        default=None, alias="OperationType"
    )
    product_codes: Optional[Sequence[str]] = Field(default=None, alias="ProductCodes")
    user_groups: Optional[Sequence[str]] = Field(default=None, alias="UserGroups")
    user_ids: Optional[Sequence[str]] = Field(default=None, alias="UserIds")
    value: Optional[str] = Field(default=None, alias="Value")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    organization_arns: Optional[Sequence[str]] = Field(
        default=None, alias="OrganizationArns"
    )
    organizational_unit_arns: Optional[Sequence[str]] = Field(
        default=None, alias="OrganizationalUnitArns"
    )
    imds_support: Optional[AttributeValueModel] = Field(
        default=None, alias="ImdsSupport"
    )


class ModifyImageAttributeRequestModel(BaseModel):
    image_id: str = Field(alias="ImageId")
    attribute: Optional[str] = Field(default=None, alias="Attribute")
    description: Optional[AttributeValueModel] = Field(
        default=None, alias="Description"
    )
    launch_permission: Optional[LaunchPermissionModificationsModel] = Field(
        default=None, alias="LaunchPermission"
    )
    operation_type: Optional[Literal["add", "remove"]] = Field(
        default=None, alias="OperationType"
    )
    product_codes: Optional[Sequence[str]] = Field(default=None, alias="ProductCodes")
    user_groups: Optional[Sequence[str]] = Field(default=None, alias="UserGroups")
    user_ids: Optional[Sequence[str]] = Field(default=None, alias="UserIds")
    value: Optional[str] = Field(default=None, alias="Value")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    organization_arns: Optional[Sequence[str]] = Field(
        default=None, alias="OrganizationArns"
    )
    organizational_unit_arns: Optional[Sequence[str]] = Field(
        default=None, alias="OrganizationalUnitArns"
    )
    imds_support: Optional[AttributeValueModel] = Field(
        default=None, alias="ImdsSupport"
    )


class ImportImageRequestModel(BaseModel):
    architecture: Optional[str] = Field(default=None, alias="Architecture")
    client_data: Optional[ClientDataModel] = Field(default=None, alias="ClientData")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    description: Optional[str] = Field(default=None, alias="Description")
    disk_containers: Optional[Sequence[ImageDiskContainerModel]] = Field(
        default=None, alias="DiskContainers"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    encrypted: Optional[bool] = Field(default=None, alias="Encrypted")
    hypervisor: Optional[str] = Field(default=None, alias="Hypervisor")
    kms_key_id: Optional[str] = Field(default=None, alias="KmsKeyId")
    license_type: Optional[str] = Field(default=None, alias="LicenseType")
    platform: Optional[str] = Field(default=None, alias="Platform")
    role_name: Optional[str] = Field(default=None, alias="RoleName")
    license_specifications: Optional[
        Sequence[ImportImageLicenseConfigurationRequestModel]
    ] = Field(default=None, alias="LicenseSpecifications")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    usage_operation: Optional[str] = Field(default=None, alias="UsageOperation")
    boot_mode: Optional[Literal["legacy-bios", "uefi"]] = Field(
        default=None, alias="BootMode"
    )


class ImportSnapshotRequestModel(BaseModel):
    client_data: Optional[ClientDataModel] = Field(default=None, alias="ClientData")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    description: Optional[str] = Field(default=None, alias="Description")
    disk_container: Optional[SnapshotDiskContainerModel] = Field(
        default=None, alias="DiskContainer"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    encrypted: Optional[bool] = Field(default=None, alias="Encrypted")
    kms_key_id: Optional[str] = Field(default=None, alias="KmsKeyId")
    role_name: Optional[str] = Field(default=None, alias="RoleName")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class CreateLocalGatewayRouteTableResultModel(BaseModel):
    local_gateway_route_table: LocalGatewayRouteTableModel = Field(
        alias="LocalGatewayRouteTable"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteLocalGatewayRouteTableResultModel(BaseModel):
    local_gateway_route_table: LocalGatewayRouteTableModel = Field(
        alias="LocalGatewayRouteTable"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeLocalGatewayRouteTablesResultModel(BaseModel):
    local_gateway_route_tables: List[LocalGatewayRouteTableModel] = Field(
        alias="LocalGatewayRouteTables"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ImportInstanceRequestModel(BaseModel):
    platform: Literal["Windows"] = Field(alias="Platform")
    description: Optional[str] = Field(default=None, alias="Description")
    disk_images: Optional[Sequence[DiskImageModel]] = Field(
        default=None, alias="DiskImages"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    launch_specification: Optional[ImportInstanceLaunchSpecificationModel] = Field(
        default=None, alias="LaunchSpecification"
    )


class RunInstancesRequestModel(BaseModel):
    max_count: int = Field(alias="MaxCount")
    min_count: int = Field(alias="MinCount")
    block_device_mappings: Optional[Sequence[BlockDeviceMappingModel]] = Field(
        default=None, alias="BlockDeviceMappings"
    )
    image_id: Optional[str] = Field(default=None, alias="ImageId")
    instance_type: Optional[
        Literal[
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.large",
            "a1.medium",
            "a1.metal",
            "a1.xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c3.large",
            "c3.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.large",
            "c5.metal",
            "c5.xlarge",
            "c5a.12xlarge",
            "c5a.16xlarge",
            "c5a.24xlarge",
            "c5a.2xlarge",
            "c5a.4xlarge",
            "c5a.8xlarge",
            "c5a.large",
            "c5a.xlarge",
            "c5ad.12xlarge",
            "c5ad.16xlarge",
            "c5ad.24xlarge",
            "c5ad.2xlarge",
            "c5ad.4xlarge",
            "c5ad.8xlarge",
            "c5ad.large",
            "c5ad.xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.large",
            "c5d.metal",
            "c5d.xlarge",
            "c5n.18xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.large",
            "c5n.metal",
            "c5n.xlarge",
            "c6a.12xlarge",
            "c6a.16xlarge",
            "c6a.24xlarge",
            "c6a.2xlarge",
            "c6a.32xlarge",
            "c6a.48xlarge",
            "c6a.4xlarge",
            "c6a.8xlarge",
            "c6a.large",
            "c6a.metal",
            "c6a.xlarge",
            "c6g.12xlarge",
            "c6g.16xlarge",
            "c6g.2xlarge",
            "c6g.4xlarge",
            "c6g.8xlarge",
            "c6g.large",
            "c6g.medium",
            "c6g.metal",
            "c6g.xlarge",
            "c6gd.12xlarge",
            "c6gd.16xlarge",
            "c6gd.2xlarge",
            "c6gd.4xlarge",
            "c6gd.8xlarge",
            "c6gd.large",
            "c6gd.medium",
            "c6gd.metal",
            "c6gd.xlarge",
            "c6gn.12xlarge",
            "c6gn.16xlarge",
            "c6gn.2xlarge",
            "c6gn.4xlarge",
            "c6gn.8xlarge",
            "c6gn.large",
            "c6gn.medium",
            "c6gn.xlarge",
            "c6i.12xlarge",
            "c6i.16xlarge",
            "c6i.24xlarge",
            "c6i.2xlarge",
            "c6i.32xlarge",
            "c6i.4xlarge",
            "c6i.8xlarge",
            "c6i.large",
            "c6i.metal",
            "c6i.xlarge",
            "c6id.12xlarge",
            "c6id.16xlarge",
            "c6id.24xlarge",
            "c6id.2xlarge",
            "c6id.32xlarge",
            "c6id.4xlarge",
            "c6id.8xlarge",
            "c6id.large",
            "c6id.metal",
            "c6id.xlarge",
            "c6in.12xlarge",
            "c6in.16xlarge",
            "c6in.24xlarge",
            "c6in.2xlarge",
            "c6in.32xlarge",
            "c6in.4xlarge",
            "c6in.8xlarge",
            "c6in.large",
            "c6in.xlarge",
            "c7g.12xlarge",
            "c7g.16xlarge",
            "c7g.2xlarge",
            "c7g.4xlarge",
            "c7g.8xlarge",
            "c7g.large",
            "c7g.medium",
            "c7g.xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "cg1.4xlarge",
            "cr1.8xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "d2.xlarge",
            "d3.2xlarge",
            "d3.4xlarge",
            "d3.8xlarge",
            "d3.xlarge",
            "d3en.12xlarge",
            "d3en.2xlarge",
            "d3en.4xlarge",
            "d3en.6xlarge",
            "d3en.8xlarge",
            "d3en.xlarge",
            "dl1.24xlarge",
            "f1.16xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.16xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3s.xlarge",
            "g4ad.16xlarge",
            "g4ad.2xlarge",
            "g4ad.4xlarge",
            "g4ad.8xlarge",
            "g4ad.xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.metal",
            "g4dn.xlarge",
            "g5.12xlarge",
            "g5.16xlarge",
            "g5.24xlarge",
            "g5.2xlarge",
            "g5.48xlarge",
            "g5.4xlarge",
            "g5.8xlarge",
            "g5.xlarge",
            "g5g.16xlarge",
            "g5g.2xlarge",
            "g5g.4xlarge",
            "g5g.8xlarge",
            "g5g.metal",
            "g5g.xlarge",
            "h1.16xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "hi1.4xlarge",
            "hpc6a.48xlarge",
            "hpc6id.32xlarge",
            "hs1.8xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i2.xlarge",
            "i3.16xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.large",
            "i3.metal",
            "i3.xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.large",
            "i3en.metal",
            "i3en.xlarge",
            "i4i.16xlarge",
            "i4i.2xlarge",
            "i4i.32xlarge",
            "i4i.4xlarge",
            "i4i.8xlarge",
            "i4i.large",
            "i4i.metal",
            "i4i.xlarge",
            "im4gn.16xlarge",
            "im4gn.2xlarge",
            "im4gn.4xlarge",
            "im4gn.8xlarge",
            "im4gn.large",
            "im4gn.xlarge",
            "inf1.24xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.xlarge",
            "is4gen.2xlarge",
            "is4gen.4xlarge",
            "is4gen.8xlarge",
            "is4gen.large",
            "is4gen.medium",
            "is4gen.xlarge",
            "m1.large",
            "m1.medium",
            "m1.small",
            "m1.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "m2.xlarge",
            "m3.2xlarge",
            "m3.large",
            "m3.medium",
            "m3.xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.large",
            "m4.xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.large",
            "m5.metal",
            "m5.xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.large",
            "m5a.xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.large",
            "m5ad.xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.large",
            "m5d.metal",
            "m5d.xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.large",
            "m5dn.metal",
            "m5dn.xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.large",
            "m5n.metal",
            "m5n.xlarge",
            "m5zn.12xlarge",
            "m5zn.2xlarge",
            "m5zn.3xlarge",
            "m5zn.6xlarge",
            "m5zn.large",
            "m5zn.metal",
            "m5zn.xlarge",
            "m6a.12xlarge",
            "m6a.16xlarge",
            "m6a.24xlarge",
            "m6a.2xlarge",
            "m6a.32xlarge",
            "m6a.48xlarge",
            "m6a.4xlarge",
            "m6a.8xlarge",
            "m6a.large",
            "m6a.metal",
            "m6a.xlarge",
            "m6g.12xlarge",
            "m6g.16xlarge",
            "m6g.2xlarge",
            "m6g.4xlarge",
            "m6g.8xlarge",
            "m6g.large",
            "m6g.medium",
            "m6g.metal",
            "m6g.xlarge",
            "m6gd.12xlarge",
            "m6gd.16xlarge",
            "m6gd.2xlarge",
            "m6gd.4xlarge",
            "m6gd.8xlarge",
            "m6gd.large",
            "m6gd.medium",
            "m6gd.metal",
            "m6gd.xlarge",
            "m6i.12xlarge",
            "m6i.16xlarge",
            "m6i.24xlarge",
            "m6i.2xlarge",
            "m6i.32xlarge",
            "m6i.4xlarge",
            "m6i.8xlarge",
            "m6i.large",
            "m6i.metal",
            "m6i.xlarge",
            "m6id.12xlarge",
            "m6id.16xlarge",
            "m6id.24xlarge",
            "m6id.2xlarge",
            "m6id.32xlarge",
            "m6id.4xlarge",
            "m6id.8xlarge",
            "m6id.large",
            "m6id.metal",
            "m6id.xlarge",
            "m6idn.12xlarge",
            "m6idn.16xlarge",
            "m6idn.24xlarge",
            "m6idn.2xlarge",
            "m6idn.32xlarge",
            "m6idn.4xlarge",
            "m6idn.8xlarge",
            "m6idn.large",
            "m6idn.xlarge",
            "m6in.12xlarge",
            "m6in.16xlarge",
            "m6in.24xlarge",
            "m6in.2xlarge",
            "m6in.32xlarge",
            "m6in.4xlarge",
            "m6in.8xlarge",
            "m6in.large",
            "m6in.xlarge",
            "mac1.metal",
            "mac2.metal",
            "p2.16xlarge",
            "p2.8xlarge",
            "p2.xlarge",
            "p3.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3dn.24xlarge",
            "p4d.24xlarge",
            "p4de.24xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r4.16xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.large",
            "r5.metal",
            "r5.xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.large",
            "r5a.xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.large",
            "r5ad.xlarge",
            "r5b.12xlarge",
            "r5b.16xlarge",
            "r5b.24xlarge",
            "r5b.2xlarge",
            "r5b.4xlarge",
            "r5b.8xlarge",
            "r5b.large",
            "r5b.metal",
            "r5b.xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.large",
            "r5d.metal",
            "r5d.xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.large",
            "r5dn.metal",
            "r5dn.xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.large",
            "r5n.metal",
            "r5n.xlarge",
            "r6a.12xlarge",
            "r6a.16xlarge",
            "r6a.24xlarge",
            "r6a.2xlarge",
            "r6a.32xlarge",
            "r6a.48xlarge",
            "r6a.4xlarge",
            "r6a.8xlarge",
            "r6a.large",
            "r6a.metal",
            "r6a.xlarge",
            "r6g.12xlarge",
            "r6g.16xlarge",
            "r6g.2xlarge",
            "r6g.4xlarge",
            "r6g.8xlarge",
            "r6g.large",
            "r6g.medium",
            "r6g.metal",
            "r6g.xlarge",
            "r6gd.12xlarge",
            "r6gd.16xlarge",
            "r6gd.2xlarge",
            "r6gd.4xlarge",
            "r6gd.8xlarge",
            "r6gd.large",
            "r6gd.medium",
            "r6gd.metal",
            "r6gd.xlarge",
            "r6i.12xlarge",
            "r6i.16xlarge",
            "r6i.24xlarge",
            "r6i.2xlarge",
            "r6i.32xlarge",
            "r6i.4xlarge",
            "r6i.8xlarge",
            "r6i.large",
            "r6i.metal",
            "r6i.xlarge",
            "r6id.12xlarge",
            "r6id.16xlarge",
            "r6id.24xlarge",
            "r6id.2xlarge",
            "r6id.32xlarge",
            "r6id.4xlarge",
            "r6id.8xlarge",
            "r6id.large",
            "r6id.metal",
            "r6id.xlarge",
            "r6idn.12xlarge",
            "r6idn.16xlarge",
            "r6idn.24xlarge",
            "r6idn.2xlarge",
            "r6idn.32xlarge",
            "r6idn.4xlarge",
            "r6idn.8xlarge",
            "r6idn.large",
            "r6idn.xlarge",
            "r6in.12xlarge",
            "r6in.16xlarge",
            "r6in.24xlarge",
            "r6in.2xlarge",
            "r6in.32xlarge",
            "r6in.4xlarge",
            "r6in.8xlarge",
            "r6in.large",
            "r6in.xlarge",
            "t1.micro",
            "t2.2xlarge",
            "t2.large",
            "t2.medium",
            "t2.micro",
            "t2.nano",
            "t2.small",
            "t2.xlarge",
            "t3.2xlarge",
            "t3.large",
            "t3.medium",
            "t3.micro",
            "t3.nano",
            "t3.small",
            "t3.xlarge",
            "t3a.2xlarge",
            "t3a.large",
            "t3a.medium",
            "t3a.micro",
            "t3a.nano",
            "t3a.small",
            "t3a.xlarge",
            "t4g.2xlarge",
            "t4g.large",
            "t4g.medium",
            "t4g.micro",
            "t4g.nano",
            "t4g.small",
            "t4g.xlarge",
            "trn1.2xlarge",
            "trn1.32xlarge",
            "u-12tb1.112xlarge",
            "u-12tb1.metal",
            "u-18tb1.112xlarge",
            "u-18tb1.metal",
            "u-24tb1.112xlarge",
            "u-24tb1.metal",
            "u-3tb1.56xlarge",
            "u-6tb1.112xlarge",
            "u-6tb1.56xlarge",
            "u-6tb1.metal",
            "u-9tb1.112xlarge",
            "u-9tb1.metal",
            "vt1.24xlarge",
            "vt1.3xlarge",
            "vt1.6xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.16xlarge",
            "x1e.2xlarge",
            "x1e.32xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.xlarge",
            "x2gd.12xlarge",
            "x2gd.16xlarge",
            "x2gd.2xlarge",
            "x2gd.4xlarge",
            "x2gd.8xlarge",
            "x2gd.large",
            "x2gd.medium",
            "x2gd.metal",
            "x2gd.xlarge",
            "x2idn.16xlarge",
            "x2idn.24xlarge",
            "x2idn.32xlarge",
            "x2idn.metal",
            "x2iedn.16xlarge",
            "x2iedn.24xlarge",
            "x2iedn.2xlarge",
            "x2iedn.32xlarge",
            "x2iedn.4xlarge",
            "x2iedn.8xlarge",
            "x2iedn.metal",
            "x2iedn.xlarge",
            "x2iezn.12xlarge",
            "x2iezn.2xlarge",
            "x2iezn.4xlarge",
            "x2iezn.6xlarge",
            "x2iezn.8xlarge",
            "x2iezn.metal",
            "z1d.12xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.large",
            "z1d.metal",
            "z1d.xlarge",
        ]
    ] = Field(default=None, alias="InstanceType")
    ipv6_address_count: Optional[int] = Field(default=None, alias="Ipv6AddressCount")
    ipv6_addresses: Optional[Sequence[InstanceIpv6AddressModel]] = Field(
        default=None, alias="Ipv6Addresses"
    )
    kernel_id: Optional[str] = Field(default=None, alias="KernelId")
    key_name: Optional[str] = Field(default=None, alias="KeyName")
    monitoring: Optional[RunInstancesMonitoringEnabledModel] = Field(
        default=None, alias="Monitoring"
    )
    placement: Optional[PlacementModel] = Field(default=None, alias="Placement")
    ramdisk_id: Optional[str] = Field(default=None, alias="RamdiskId")
    security_group_ids: Optional[Sequence[str]] = Field(
        default=None, alias="SecurityGroupIds"
    )
    security_groups: Optional[Sequence[str]] = Field(
        default=None, alias="SecurityGroups"
    )
    subnet_id: Optional[str] = Field(default=None, alias="SubnetId")
    user_data: Optional[str] = Field(default=None, alias="UserData")
    additional_info: Optional[str] = Field(default=None, alias="AdditionalInfo")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    disable_api_termination: Optional[bool] = Field(
        default=None, alias="DisableApiTermination"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    ebs_optimized: Optional[bool] = Field(default=None, alias="EbsOptimized")
    iam_instance_profile: Optional[IamInstanceProfileSpecificationModel] = Field(
        default=None, alias="IamInstanceProfile"
    )
    instance_initiated_shutdown_behavior: Optional[
        Literal["stop", "terminate"]
    ] = Field(default=None, alias="InstanceInitiatedShutdownBehavior")
    network_interfaces: Optional[
        Sequence[InstanceNetworkInterfaceSpecificationModel]
    ] = Field(default=None, alias="NetworkInterfaces")
    private_ip_address: Optional[str] = Field(default=None, alias="PrivateIpAddress")
    elastic_gpu_specification: Optional[Sequence[ElasticGpuSpecificationModel]] = Field(
        default=None, alias="ElasticGpuSpecification"
    )
    elastic_inference_accelerators: Optional[
        Sequence[ElasticInferenceAcceleratorModel]
    ] = Field(default=None, alias="ElasticInferenceAccelerators")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    launch_template: Optional[LaunchTemplateSpecificationModel] = Field(
        default=None, alias="LaunchTemplate"
    )
    instance_market_options: Optional[InstanceMarketOptionsRequestModel] = Field(
        default=None, alias="InstanceMarketOptions"
    )
    credit_specification: Optional[CreditSpecificationRequestModel] = Field(
        default=None, alias="CreditSpecification"
    )
    cpu_options: Optional[CpuOptionsRequestModel] = Field(
        default=None, alias="CpuOptions"
    )
    capacity_reservation_specification: Optional[
        CapacityReservationSpecificationModel
    ] = Field(default=None, alias="CapacityReservationSpecification")
    hibernation_options: Optional[HibernationOptionsRequestModel] = Field(
        default=None, alias="HibernationOptions"
    )
    license_specifications: Optional[
        Sequence[LicenseConfigurationRequestModel]
    ] = Field(default=None, alias="LicenseSpecifications")
    metadata_options: Optional[InstanceMetadataOptionsRequestModel] = Field(
        default=None, alias="MetadataOptions"
    )
    enclave_options: Optional[EnclaveOptionsRequestModel] = Field(
        default=None, alias="EnclaveOptions"
    )
    private_dns_name_options: Optional[PrivateDnsNameOptionsRequestModel] = Field(
        default=None, alias="PrivateDnsNameOptions"
    )
    maintenance_options: Optional[InstanceMaintenanceOptionsRequestModel] = Field(
        default=None, alias="MaintenanceOptions"
    )
    disable_api_stop: Optional[bool] = Field(default=None, alias="DisableApiStop")


class RunInstancesRequestServiceResourceCreateInstancesModel(BaseModel):
    max_count: int = Field(alias="MaxCount")
    min_count: int = Field(alias="MinCount")
    block_device_mappings: Optional[Sequence[BlockDeviceMappingModel]] = Field(
        default=None, alias="BlockDeviceMappings"
    )
    image_id: Optional[str] = Field(default=None, alias="ImageId")
    instance_type: Optional[
        Literal[
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.large",
            "a1.medium",
            "a1.metal",
            "a1.xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c3.large",
            "c3.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.large",
            "c5.metal",
            "c5.xlarge",
            "c5a.12xlarge",
            "c5a.16xlarge",
            "c5a.24xlarge",
            "c5a.2xlarge",
            "c5a.4xlarge",
            "c5a.8xlarge",
            "c5a.large",
            "c5a.xlarge",
            "c5ad.12xlarge",
            "c5ad.16xlarge",
            "c5ad.24xlarge",
            "c5ad.2xlarge",
            "c5ad.4xlarge",
            "c5ad.8xlarge",
            "c5ad.large",
            "c5ad.xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.large",
            "c5d.metal",
            "c5d.xlarge",
            "c5n.18xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.large",
            "c5n.metal",
            "c5n.xlarge",
            "c6a.12xlarge",
            "c6a.16xlarge",
            "c6a.24xlarge",
            "c6a.2xlarge",
            "c6a.32xlarge",
            "c6a.48xlarge",
            "c6a.4xlarge",
            "c6a.8xlarge",
            "c6a.large",
            "c6a.metal",
            "c6a.xlarge",
            "c6g.12xlarge",
            "c6g.16xlarge",
            "c6g.2xlarge",
            "c6g.4xlarge",
            "c6g.8xlarge",
            "c6g.large",
            "c6g.medium",
            "c6g.metal",
            "c6g.xlarge",
            "c6gd.12xlarge",
            "c6gd.16xlarge",
            "c6gd.2xlarge",
            "c6gd.4xlarge",
            "c6gd.8xlarge",
            "c6gd.large",
            "c6gd.medium",
            "c6gd.metal",
            "c6gd.xlarge",
            "c6gn.12xlarge",
            "c6gn.16xlarge",
            "c6gn.2xlarge",
            "c6gn.4xlarge",
            "c6gn.8xlarge",
            "c6gn.large",
            "c6gn.medium",
            "c6gn.xlarge",
            "c6i.12xlarge",
            "c6i.16xlarge",
            "c6i.24xlarge",
            "c6i.2xlarge",
            "c6i.32xlarge",
            "c6i.4xlarge",
            "c6i.8xlarge",
            "c6i.large",
            "c6i.metal",
            "c6i.xlarge",
            "c6id.12xlarge",
            "c6id.16xlarge",
            "c6id.24xlarge",
            "c6id.2xlarge",
            "c6id.32xlarge",
            "c6id.4xlarge",
            "c6id.8xlarge",
            "c6id.large",
            "c6id.metal",
            "c6id.xlarge",
            "c6in.12xlarge",
            "c6in.16xlarge",
            "c6in.24xlarge",
            "c6in.2xlarge",
            "c6in.32xlarge",
            "c6in.4xlarge",
            "c6in.8xlarge",
            "c6in.large",
            "c6in.xlarge",
            "c7g.12xlarge",
            "c7g.16xlarge",
            "c7g.2xlarge",
            "c7g.4xlarge",
            "c7g.8xlarge",
            "c7g.large",
            "c7g.medium",
            "c7g.xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "cg1.4xlarge",
            "cr1.8xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "d2.xlarge",
            "d3.2xlarge",
            "d3.4xlarge",
            "d3.8xlarge",
            "d3.xlarge",
            "d3en.12xlarge",
            "d3en.2xlarge",
            "d3en.4xlarge",
            "d3en.6xlarge",
            "d3en.8xlarge",
            "d3en.xlarge",
            "dl1.24xlarge",
            "f1.16xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.16xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3s.xlarge",
            "g4ad.16xlarge",
            "g4ad.2xlarge",
            "g4ad.4xlarge",
            "g4ad.8xlarge",
            "g4ad.xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.metal",
            "g4dn.xlarge",
            "g5.12xlarge",
            "g5.16xlarge",
            "g5.24xlarge",
            "g5.2xlarge",
            "g5.48xlarge",
            "g5.4xlarge",
            "g5.8xlarge",
            "g5.xlarge",
            "g5g.16xlarge",
            "g5g.2xlarge",
            "g5g.4xlarge",
            "g5g.8xlarge",
            "g5g.metal",
            "g5g.xlarge",
            "h1.16xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "hi1.4xlarge",
            "hpc6a.48xlarge",
            "hpc6id.32xlarge",
            "hs1.8xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i2.xlarge",
            "i3.16xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.large",
            "i3.metal",
            "i3.xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.large",
            "i3en.metal",
            "i3en.xlarge",
            "i4i.16xlarge",
            "i4i.2xlarge",
            "i4i.32xlarge",
            "i4i.4xlarge",
            "i4i.8xlarge",
            "i4i.large",
            "i4i.metal",
            "i4i.xlarge",
            "im4gn.16xlarge",
            "im4gn.2xlarge",
            "im4gn.4xlarge",
            "im4gn.8xlarge",
            "im4gn.large",
            "im4gn.xlarge",
            "inf1.24xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.xlarge",
            "is4gen.2xlarge",
            "is4gen.4xlarge",
            "is4gen.8xlarge",
            "is4gen.large",
            "is4gen.medium",
            "is4gen.xlarge",
            "m1.large",
            "m1.medium",
            "m1.small",
            "m1.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "m2.xlarge",
            "m3.2xlarge",
            "m3.large",
            "m3.medium",
            "m3.xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.large",
            "m4.xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.large",
            "m5.metal",
            "m5.xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.large",
            "m5a.xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.large",
            "m5ad.xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.large",
            "m5d.metal",
            "m5d.xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.large",
            "m5dn.metal",
            "m5dn.xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.large",
            "m5n.metal",
            "m5n.xlarge",
            "m5zn.12xlarge",
            "m5zn.2xlarge",
            "m5zn.3xlarge",
            "m5zn.6xlarge",
            "m5zn.large",
            "m5zn.metal",
            "m5zn.xlarge",
            "m6a.12xlarge",
            "m6a.16xlarge",
            "m6a.24xlarge",
            "m6a.2xlarge",
            "m6a.32xlarge",
            "m6a.48xlarge",
            "m6a.4xlarge",
            "m6a.8xlarge",
            "m6a.large",
            "m6a.metal",
            "m6a.xlarge",
            "m6g.12xlarge",
            "m6g.16xlarge",
            "m6g.2xlarge",
            "m6g.4xlarge",
            "m6g.8xlarge",
            "m6g.large",
            "m6g.medium",
            "m6g.metal",
            "m6g.xlarge",
            "m6gd.12xlarge",
            "m6gd.16xlarge",
            "m6gd.2xlarge",
            "m6gd.4xlarge",
            "m6gd.8xlarge",
            "m6gd.large",
            "m6gd.medium",
            "m6gd.metal",
            "m6gd.xlarge",
            "m6i.12xlarge",
            "m6i.16xlarge",
            "m6i.24xlarge",
            "m6i.2xlarge",
            "m6i.32xlarge",
            "m6i.4xlarge",
            "m6i.8xlarge",
            "m6i.large",
            "m6i.metal",
            "m6i.xlarge",
            "m6id.12xlarge",
            "m6id.16xlarge",
            "m6id.24xlarge",
            "m6id.2xlarge",
            "m6id.32xlarge",
            "m6id.4xlarge",
            "m6id.8xlarge",
            "m6id.large",
            "m6id.metal",
            "m6id.xlarge",
            "m6idn.12xlarge",
            "m6idn.16xlarge",
            "m6idn.24xlarge",
            "m6idn.2xlarge",
            "m6idn.32xlarge",
            "m6idn.4xlarge",
            "m6idn.8xlarge",
            "m6idn.large",
            "m6idn.xlarge",
            "m6in.12xlarge",
            "m6in.16xlarge",
            "m6in.24xlarge",
            "m6in.2xlarge",
            "m6in.32xlarge",
            "m6in.4xlarge",
            "m6in.8xlarge",
            "m6in.large",
            "m6in.xlarge",
            "mac1.metal",
            "mac2.metal",
            "p2.16xlarge",
            "p2.8xlarge",
            "p2.xlarge",
            "p3.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3dn.24xlarge",
            "p4d.24xlarge",
            "p4de.24xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r4.16xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.large",
            "r5.metal",
            "r5.xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.large",
            "r5a.xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.large",
            "r5ad.xlarge",
            "r5b.12xlarge",
            "r5b.16xlarge",
            "r5b.24xlarge",
            "r5b.2xlarge",
            "r5b.4xlarge",
            "r5b.8xlarge",
            "r5b.large",
            "r5b.metal",
            "r5b.xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.large",
            "r5d.metal",
            "r5d.xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.large",
            "r5dn.metal",
            "r5dn.xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.large",
            "r5n.metal",
            "r5n.xlarge",
            "r6a.12xlarge",
            "r6a.16xlarge",
            "r6a.24xlarge",
            "r6a.2xlarge",
            "r6a.32xlarge",
            "r6a.48xlarge",
            "r6a.4xlarge",
            "r6a.8xlarge",
            "r6a.large",
            "r6a.metal",
            "r6a.xlarge",
            "r6g.12xlarge",
            "r6g.16xlarge",
            "r6g.2xlarge",
            "r6g.4xlarge",
            "r6g.8xlarge",
            "r6g.large",
            "r6g.medium",
            "r6g.metal",
            "r6g.xlarge",
            "r6gd.12xlarge",
            "r6gd.16xlarge",
            "r6gd.2xlarge",
            "r6gd.4xlarge",
            "r6gd.8xlarge",
            "r6gd.large",
            "r6gd.medium",
            "r6gd.metal",
            "r6gd.xlarge",
            "r6i.12xlarge",
            "r6i.16xlarge",
            "r6i.24xlarge",
            "r6i.2xlarge",
            "r6i.32xlarge",
            "r6i.4xlarge",
            "r6i.8xlarge",
            "r6i.large",
            "r6i.metal",
            "r6i.xlarge",
            "r6id.12xlarge",
            "r6id.16xlarge",
            "r6id.24xlarge",
            "r6id.2xlarge",
            "r6id.32xlarge",
            "r6id.4xlarge",
            "r6id.8xlarge",
            "r6id.large",
            "r6id.metal",
            "r6id.xlarge",
            "r6idn.12xlarge",
            "r6idn.16xlarge",
            "r6idn.24xlarge",
            "r6idn.2xlarge",
            "r6idn.32xlarge",
            "r6idn.4xlarge",
            "r6idn.8xlarge",
            "r6idn.large",
            "r6idn.xlarge",
            "r6in.12xlarge",
            "r6in.16xlarge",
            "r6in.24xlarge",
            "r6in.2xlarge",
            "r6in.32xlarge",
            "r6in.4xlarge",
            "r6in.8xlarge",
            "r6in.large",
            "r6in.xlarge",
            "t1.micro",
            "t2.2xlarge",
            "t2.large",
            "t2.medium",
            "t2.micro",
            "t2.nano",
            "t2.small",
            "t2.xlarge",
            "t3.2xlarge",
            "t3.large",
            "t3.medium",
            "t3.micro",
            "t3.nano",
            "t3.small",
            "t3.xlarge",
            "t3a.2xlarge",
            "t3a.large",
            "t3a.medium",
            "t3a.micro",
            "t3a.nano",
            "t3a.small",
            "t3a.xlarge",
            "t4g.2xlarge",
            "t4g.large",
            "t4g.medium",
            "t4g.micro",
            "t4g.nano",
            "t4g.small",
            "t4g.xlarge",
            "trn1.2xlarge",
            "trn1.32xlarge",
            "u-12tb1.112xlarge",
            "u-12tb1.metal",
            "u-18tb1.112xlarge",
            "u-18tb1.metal",
            "u-24tb1.112xlarge",
            "u-24tb1.metal",
            "u-3tb1.56xlarge",
            "u-6tb1.112xlarge",
            "u-6tb1.56xlarge",
            "u-6tb1.metal",
            "u-9tb1.112xlarge",
            "u-9tb1.metal",
            "vt1.24xlarge",
            "vt1.3xlarge",
            "vt1.6xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.16xlarge",
            "x1e.2xlarge",
            "x1e.32xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.xlarge",
            "x2gd.12xlarge",
            "x2gd.16xlarge",
            "x2gd.2xlarge",
            "x2gd.4xlarge",
            "x2gd.8xlarge",
            "x2gd.large",
            "x2gd.medium",
            "x2gd.metal",
            "x2gd.xlarge",
            "x2idn.16xlarge",
            "x2idn.24xlarge",
            "x2idn.32xlarge",
            "x2idn.metal",
            "x2iedn.16xlarge",
            "x2iedn.24xlarge",
            "x2iedn.2xlarge",
            "x2iedn.32xlarge",
            "x2iedn.4xlarge",
            "x2iedn.8xlarge",
            "x2iedn.metal",
            "x2iedn.xlarge",
            "x2iezn.12xlarge",
            "x2iezn.2xlarge",
            "x2iezn.4xlarge",
            "x2iezn.6xlarge",
            "x2iezn.8xlarge",
            "x2iezn.metal",
            "z1d.12xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.large",
            "z1d.metal",
            "z1d.xlarge",
        ]
    ] = Field(default=None, alias="InstanceType")
    ipv6_address_count: Optional[int] = Field(default=None, alias="Ipv6AddressCount")
    ipv6_addresses: Optional[Sequence[InstanceIpv6AddressModel]] = Field(
        default=None, alias="Ipv6Addresses"
    )
    kernel_id: Optional[str] = Field(default=None, alias="KernelId")
    key_name: Optional[str] = Field(default=None, alias="KeyName")
    monitoring: Optional[RunInstancesMonitoringEnabledModel] = Field(
        default=None, alias="Monitoring"
    )
    placement: Optional[PlacementModel] = Field(default=None, alias="Placement")
    ramdisk_id: Optional[str] = Field(default=None, alias="RamdiskId")
    security_group_ids: Optional[Sequence[str]] = Field(
        default=None, alias="SecurityGroupIds"
    )
    security_groups: Optional[Sequence[str]] = Field(
        default=None, alias="SecurityGroups"
    )
    subnet_id: Optional[str] = Field(default=None, alias="SubnetId")
    user_data: Optional[str] = Field(default=None, alias="UserData")
    additional_info: Optional[str] = Field(default=None, alias="AdditionalInfo")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    disable_api_termination: Optional[bool] = Field(
        default=None, alias="DisableApiTermination"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    ebs_optimized: Optional[bool] = Field(default=None, alias="EbsOptimized")
    iam_instance_profile: Optional[IamInstanceProfileSpecificationModel] = Field(
        default=None, alias="IamInstanceProfile"
    )
    instance_initiated_shutdown_behavior: Optional[
        Literal["stop", "terminate"]
    ] = Field(default=None, alias="InstanceInitiatedShutdownBehavior")
    network_interfaces: Optional[
        Sequence[InstanceNetworkInterfaceSpecificationModel]
    ] = Field(default=None, alias="NetworkInterfaces")
    private_ip_address: Optional[str] = Field(default=None, alias="PrivateIpAddress")
    elastic_gpu_specification: Optional[Sequence[ElasticGpuSpecificationModel]] = Field(
        default=None, alias="ElasticGpuSpecification"
    )
    elastic_inference_accelerators: Optional[
        Sequence[ElasticInferenceAcceleratorModel]
    ] = Field(default=None, alias="ElasticInferenceAccelerators")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    launch_template: Optional[LaunchTemplateSpecificationModel] = Field(
        default=None, alias="LaunchTemplate"
    )
    instance_market_options: Optional[InstanceMarketOptionsRequestModel] = Field(
        default=None, alias="InstanceMarketOptions"
    )
    credit_specification: Optional[CreditSpecificationRequestModel] = Field(
        default=None, alias="CreditSpecification"
    )
    cpu_options: Optional[CpuOptionsRequestModel] = Field(
        default=None, alias="CpuOptions"
    )
    capacity_reservation_specification: Optional[
        CapacityReservationSpecificationModel
    ] = Field(default=None, alias="CapacityReservationSpecification")
    hibernation_options: Optional[HibernationOptionsRequestModel] = Field(
        default=None, alias="HibernationOptions"
    )
    license_specifications: Optional[
        Sequence[LicenseConfigurationRequestModel]
    ] = Field(default=None, alias="LicenseSpecifications")
    metadata_options: Optional[InstanceMetadataOptionsRequestModel] = Field(
        default=None, alias="MetadataOptions"
    )
    enclave_options: Optional[EnclaveOptionsRequestModel] = Field(
        default=None, alias="EnclaveOptions"
    )
    private_dns_name_options: Optional[PrivateDnsNameOptionsRequestModel] = Field(
        default=None, alias="PrivateDnsNameOptions"
    )
    maintenance_options: Optional[InstanceMaintenanceOptionsRequestModel] = Field(
        default=None, alias="MaintenanceOptions"
    )
    disable_api_stop: Optional[bool] = Field(default=None, alias="DisableApiStop")


class RunInstancesRequestSubnetCreateInstancesModel(BaseModel):
    max_count: int = Field(alias="MaxCount")
    min_count: int = Field(alias="MinCount")
    block_device_mappings: Optional[Sequence[BlockDeviceMappingModel]] = Field(
        default=None, alias="BlockDeviceMappings"
    )
    image_id: Optional[str] = Field(default=None, alias="ImageId")
    instance_type: Optional[
        Literal[
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.large",
            "a1.medium",
            "a1.metal",
            "a1.xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c3.large",
            "c3.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.large",
            "c5.metal",
            "c5.xlarge",
            "c5a.12xlarge",
            "c5a.16xlarge",
            "c5a.24xlarge",
            "c5a.2xlarge",
            "c5a.4xlarge",
            "c5a.8xlarge",
            "c5a.large",
            "c5a.xlarge",
            "c5ad.12xlarge",
            "c5ad.16xlarge",
            "c5ad.24xlarge",
            "c5ad.2xlarge",
            "c5ad.4xlarge",
            "c5ad.8xlarge",
            "c5ad.large",
            "c5ad.xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.large",
            "c5d.metal",
            "c5d.xlarge",
            "c5n.18xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.large",
            "c5n.metal",
            "c5n.xlarge",
            "c6a.12xlarge",
            "c6a.16xlarge",
            "c6a.24xlarge",
            "c6a.2xlarge",
            "c6a.32xlarge",
            "c6a.48xlarge",
            "c6a.4xlarge",
            "c6a.8xlarge",
            "c6a.large",
            "c6a.metal",
            "c6a.xlarge",
            "c6g.12xlarge",
            "c6g.16xlarge",
            "c6g.2xlarge",
            "c6g.4xlarge",
            "c6g.8xlarge",
            "c6g.large",
            "c6g.medium",
            "c6g.metal",
            "c6g.xlarge",
            "c6gd.12xlarge",
            "c6gd.16xlarge",
            "c6gd.2xlarge",
            "c6gd.4xlarge",
            "c6gd.8xlarge",
            "c6gd.large",
            "c6gd.medium",
            "c6gd.metal",
            "c6gd.xlarge",
            "c6gn.12xlarge",
            "c6gn.16xlarge",
            "c6gn.2xlarge",
            "c6gn.4xlarge",
            "c6gn.8xlarge",
            "c6gn.large",
            "c6gn.medium",
            "c6gn.xlarge",
            "c6i.12xlarge",
            "c6i.16xlarge",
            "c6i.24xlarge",
            "c6i.2xlarge",
            "c6i.32xlarge",
            "c6i.4xlarge",
            "c6i.8xlarge",
            "c6i.large",
            "c6i.metal",
            "c6i.xlarge",
            "c6id.12xlarge",
            "c6id.16xlarge",
            "c6id.24xlarge",
            "c6id.2xlarge",
            "c6id.32xlarge",
            "c6id.4xlarge",
            "c6id.8xlarge",
            "c6id.large",
            "c6id.metal",
            "c6id.xlarge",
            "c6in.12xlarge",
            "c6in.16xlarge",
            "c6in.24xlarge",
            "c6in.2xlarge",
            "c6in.32xlarge",
            "c6in.4xlarge",
            "c6in.8xlarge",
            "c6in.large",
            "c6in.xlarge",
            "c7g.12xlarge",
            "c7g.16xlarge",
            "c7g.2xlarge",
            "c7g.4xlarge",
            "c7g.8xlarge",
            "c7g.large",
            "c7g.medium",
            "c7g.xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "cg1.4xlarge",
            "cr1.8xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "d2.xlarge",
            "d3.2xlarge",
            "d3.4xlarge",
            "d3.8xlarge",
            "d3.xlarge",
            "d3en.12xlarge",
            "d3en.2xlarge",
            "d3en.4xlarge",
            "d3en.6xlarge",
            "d3en.8xlarge",
            "d3en.xlarge",
            "dl1.24xlarge",
            "f1.16xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.16xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3s.xlarge",
            "g4ad.16xlarge",
            "g4ad.2xlarge",
            "g4ad.4xlarge",
            "g4ad.8xlarge",
            "g4ad.xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.metal",
            "g4dn.xlarge",
            "g5.12xlarge",
            "g5.16xlarge",
            "g5.24xlarge",
            "g5.2xlarge",
            "g5.48xlarge",
            "g5.4xlarge",
            "g5.8xlarge",
            "g5.xlarge",
            "g5g.16xlarge",
            "g5g.2xlarge",
            "g5g.4xlarge",
            "g5g.8xlarge",
            "g5g.metal",
            "g5g.xlarge",
            "h1.16xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "hi1.4xlarge",
            "hpc6a.48xlarge",
            "hpc6id.32xlarge",
            "hs1.8xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i2.xlarge",
            "i3.16xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.large",
            "i3.metal",
            "i3.xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.large",
            "i3en.metal",
            "i3en.xlarge",
            "i4i.16xlarge",
            "i4i.2xlarge",
            "i4i.32xlarge",
            "i4i.4xlarge",
            "i4i.8xlarge",
            "i4i.large",
            "i4i.metal",
            "i4i.xlarge",
            "im4gn.16xlarge",
            "im4gn.2xlarge",
            "im4gn.4xlarge",
            "im4gn.8xlarge",
            "im4gn.large",
            "im4gn.xlarge",
            "inf1.24xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.xlarge",
            "is4gen.2xlarge",
            "is4gen.4xlarge",
            "is4gen.8xlarge",
            "is4gen.large",
            "is4gen.medium",
            "is4gen.xlarge",
            "m1.large",
            "m1.medium",
            "m1.small",
            "m1.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "m2.xlarge",
            "m3.2xlarge",
            "m3.large",
            "m3.medium",
            "m3.xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.large",
            "m4.xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.large",
            "m5.metal",
            "m5.xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.large",
            "m5a.xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.large",
            "m5ad.xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.large",
            "m5d.metal",
            "m5d.xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.large",
            "m5dn.metal",
            "m5dn.xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.large",
            "m5n.metal",
            "m5n.xlarge",
            "m5zn.12xlarge",
            "m5zn.2xlarge",
            "m5zn.3xlarge",
            "m5zn.6xlarge",
            "m5zn.large",
            "m5zn.metal",
            "m5zn.xlarge",
            "m6a.12xlarge",
            "m6a.16xlarge",
            "m6a.24xlarge",
            "m6a.2xlarge",
            "m6a.32xlarge",
            "m6a.48xlarge",
            "m6a.4xlarge",
            "m6a.8xlarge",
            "m6a.large",
            "m6a.metal",
            "m6a.xlarge",
            "m6g.12xlarge",
            "m6g.16xlarge",
            "m6g.2xlarge",
            "m6g.4xlarge",
            "m6g.8xlarge",
            "m6g.large",
            "m6g.medium",
            "m6g.metal",
            "m6g.xlarge",
            "m6gd.12xlarge",
            "m6gd.16xlarge",
            "m6gd.2xlarge",
            "m6gd.4xlarge",
            "m6gd.8xlarge",
            "m6gd.large",
            "m6gd.medium",
            "m6gd.metal",
            "m6gd.xlarge",
            "m6i.12xlarge",
            "m6i.16xlarge",
            "m6i.24xlarge",
            "m6i.2xlarge",
            "m6i.32xlarge",
            "m6i.4xlarge",
            "m6i.8xlarge",
            "m6i.large",
            "m6i.metal",
            "m6i.xlarge",
            "m6id.12xlarge",
            "m6id.16xlarge",
            "m6id.24xlarge",
            "m6id.2xlarge",
            "m6id.32xlarge",
            "m6id.4xlarge",
            "m6id.8xlarge",
            "m6id.large",
            "m6id.metal",
            "m6id.xlarge",
            "m6idn.12xlarge",
            "m6idn.16xlarge",
            "m6idn.24xlarge",
            "m6idn.2xlarge",
            "m6idn.32xlarge",
            "m6idn.4xlarge",
            "m6idn.8xlarge",
            "m6idn.large",
            "m6idn.xlarge",
            "m6in.12xlarge",
            "m6in.16xlarge",
            "m6in.24xlarge",
            "m6in.2xlarge",
            "m6in.32xlarge",
            "m6in.4xlarge",
            "m6in.8xlarge",
            "m6in.large",
            "m6in.xlarge",
            "mac1.metal",
            "mac2.metal",
            "p2.16xlarge",
            "p2.8xlarge",
            "p2.xlarge",
            "p3.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3dn.24xlarge",
            "p4d.24xlarge",
            "p4de.24xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r4.16xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.large",
            "r5.metal",
            "r5.xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.large",
            "r5a.xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.large",
            "r5ad.xlarge",
            "r5b.12xlarge",
            "r5b.16xlarge",
            "r5b.24xlarge",
            "r5b.2xlarge",
            "r5b.4xlarge",
            "r5b.8xlarge",
            "r5b.large",
            "r5b.metal",
            "r5b.xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.large",
            "r5d.metal",
            "r5d.xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.large",
            "r5dn.metal",
            "r5dn.xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.large",
            "r5n.metal",
            "r5n.xlarge",
            "r6a.12xlarge",
            "r6a.16xlarge",
            "r6a.24xlarge",
            "r6a.2xlarge",
            "r6a.32xlarge",
            "r6a.48xlarge",
            "r6a.4xlarge",
            "r6a.8xlarge",
            "r6a.large",
            "r6a.metal",
            "r6a.xlarge",
            "r6g.12xlarge",
            "r6g.16xlarge",
            "r6g.2xlarge",
            "r6g.4xlarge",
            "r6g.8xlarge",
            "r6g.large",
            "r6g.medium",
            "r6g.metal",
            "r6g.xlarge",
            "r6gd.12xlarge",
            "r6gd.16xlarge",
            "r6gd.2xlarge",
            "r6gd.4xlarge",
            "r6gd.8xlarge",
            "r6gd.large",
            "r6gd.medium",
            "r6gd.metal",
            "r6gd.xlarge",
            "r6i.12xlarge",
            "r6i.16xlarge",
            "r6i.24xlarge",
            "r6i.2xlarge",
            "r6i.32xlarge",
            "r6i.4xlarge",
            "r6i.8xlarge",
            "r6i.large",
            "r6i.metal",
            "r6i.xlarge",
            "r6id.12xlarge",
            "r6id.16xlarge",
            "r6id.24xlarge",
            "r6id.2xlarge",
            "r6id.32xlarge",
            "r6id.4xlarge",
            "r6id.8xlarge",
            "r6id.large",
            "r6id.metal",
            "r6id.xlarge",
            "r6idn.12xlarge",
            "r6idn.16xlarge",
            "r6idn.24xlarge",
            "r6idn.2xlarge",
            "r6idn.32xlarge",
            "r6idn.4xlarge",
            "r6idn.8xlarge",
            "r6idn.large",
            "r6idn.xlarge",
            "r6in.12xlarge",
            "r6in.16xlarge",
            "r6in.24xlarge",
            "r6in.2xlarge",
            "r6in.32xlarge",
            "r6in.4xlarge",
            "r6in.8xlarge",
            "r6in.large",
            "r6in.xlarge",
            "t1.micro",
            "t2.2xlarge",
            "t2.large",
            "t2.medium",
            "t2.micro",
            "t2.nano",
            "t2.small",
            "t2.xlarge",
            "t3.2xlarge",
            "t3.large",
            "t3.medium",
            "t3.micro",
            "t3.nano",
            "t3.small",
            "t3.xlarge",
            "t3a.2xlarge",
            "t3a.large",
            "t3a.medium",
            "t3a.micro",
            "t3a.nano",
            "t3a.small",
            "t3a.xlarge",
            "t4g.2xlarge",
            "t4g.large",
            "t4g.medium",
            "t4g.micro",
            "t4g.nano",
            "t4g.small",
            "t4g.xlarge",
            "trn1.2xlarge",
            "trn1.32xlarge",
            "u-12tb1.112xlarge",
            "u-12tb1.metal",
            "u-18tb1.112xlarge",
            "u-18tb1.metal",
            "u-24tb1.112xlarge",
            "u-24tb1.metal",
            "u-3tb1.56xlarge",
            "u-6tb1.112xlarge",
            "u-6tb1.56xlarge",
            "u-6tb1.metal",
            "u-9tb1.112xlarge",
            "u-9tb1.metal",
            "vt1.24xlarge",
            "vt1.3xlarge",
            "vt1.6xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.16xlarge",
            "x1e.2xlarge",
            "x1e.32xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.xlarge",
            "x2gd.12xlarge",
            "x2gd.16xlarge",
            "x2gd.2xlarge",
            "x2gd.4xlarge",
            "x2gd.8xlarge",
            "x2gd.large",
            "x2gd.medium",
            "x2gd.metal",
            "x2gd.xlarge",
            "x2idn.16xlarge",
            "x2idn.24xlarge",
            "x2idn.32xlarge",
            "x2idn.metal",
            "x2iedn.16xlarge",
            "x2iedn.24xlarge",
            "x2iedn.2xlarge",
            "x2iedn.32xlarge",
            "x2iedn.4xlarge",
            "x2iedn.8xlarge",
            "x2iedn.metal",
            "x2iedn.xlarge",
            "x2iezn.12xlarge",
            "x2iezn.2xlarge",
            "x2iezn.4xlarge",
            "x2iezn.6xlarge",
            "x2iezn.8xlarge",
            "x2iezn.metal",
            "z1d.12xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.large",
            "z1d.metal",
            "z1d.xlarge",
        ]
    ] = Field(default=None, alias="InstanceType")
    ipv6_address_count: Optional[int] = Field(default=None, alias="Ipv6AddressCount")
    ipv6_addresses: Optional[Sequence[InstanceIpv6AddressModel]] = Field(
        default=None, alias="Ipv6Addresses"
    )
    kernel_id: Optional[str] = Field(default=None, alias="KernelId")
    key_name: Optional[str] = Field(default=None, alias="KeyName")
    monitoring: Optional[RunInstancesMonitoringEnabledModel] = Field(
        default=None, alias="Monitoring"
    )
    placement: Optional[PlacementModel] = Field(default=None, alias="Placement")
    ramdisk_id: Optional[str] = Field(default=None, alias="RamdiskId")
    security_group_ids: Optional[Sequence[str]] = Field(
        default=None, alias="SecurityGroupIds"
    )
    security_groups: Optional[Sequence[str]] = Field(
        default=None, alias="SecurityGroups"
    )
    user_data: Optional[str] = Field(default=None, alias="UserData")
    additional_info: Optional[str] = Field(default=None, alias="AdditionalInfo")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    disable_api_termination: Optional[bool] = Field(
        default=None, alias="DisableApiTermination"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    ebs_optimized: Optional[bool] = Field(default=None, alias="EbsOptimized")
    iam_instance_profile: Optional[IamInstanceProfileSpecificationModel] = Field(
        default=None, alias="IamInstanceProfile"
    )
    instance_initiated_shutdown_behavior: Optional[
        Literal["stop", "terminate"]
    ] = Field(default=None, alias="InstanceInitiatedShutdownBehavior")
    network_interfaces: Optional[
        Sequence[InstanceNetworkInterfaceSpecificationModel]
    ] = Field(default=None, alias="NetworkInterfaces")
    private_ip_address: Optional[str] = Field(default=None, alias="PrivateIpAddress")
    elastic_gpu_specification: Optional[Sequence[ElasticGpuSpecificationModel]] = Field(
        default=None, alias="ElasticGpuSpecification"
    )
    elastic_inference_accelerators: Optional[
        Sequence[ElasticInferenceAcceleratorModel]
    ] = Field(default=None, alias="ElasticInferenceAccelerators")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    launch_template: Optional[LaunchTemplateSpecificationModel] = Field(
        default=None, alias="LaunchTemplate"
    )
    instance_market_options: Optional[InstanceMarketOptionsRequestModel] = Field(
        default=None, alias="InstanceMarketOptions"
    )
    credit_specification: Optional[CreditSpecificationRequestModel] = Field(
        default=None, alias="CreditSpecification"
    )
    cpu_options: Optional[CpuOptionsRequestModel] = Field(
        default=None, alias="CpuOptions"
    )
    capacity_reservation_specification: Optional[
        CapacityReservationSpecificationModel
    ] = Field(default=None, alias="CapacityReservationSpecification")
    hibernation_options: Optional[HibernationOptionsRequestModel] = Field(
        default=None, alias="HibernationOptions"
    )
    license_specifications: Optional[
        Sequence[LicenseConfigurationRequestModel]
    ] = Field(default=None, alias="LicenseSpecifications")
    metadata_options: Optional[InstanceMetadataOptionsRequestModel] = Field(
        default=None, alias="MetadataOptions"
    )
    enclave_options: Optional[EnclaveOptionsRequestModel] = Field(
        default=None, alias="EnclaveOptions"
    )
    private_dns_name_options: Optional[PrivateDnsNameOptionsRequestModel] = Field(
        default=None, alias="PrivateDnsNameOptions"
    )
    maintenance_options: Optional[InstanceMaintenanceOptionsRequestModel] = Field(
        default=None, alias="MaintenanceOptions"
    )
    disable_api_stop: Optional[bool] = Field(default=None, alias="DisableApiStop")


class MonitorInstancesResultModel(BaseModel):
    instance_monitorings: List[InstanceMonitoringModel] = Field(
        alias="InstanceMonitorings"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class UnmonitorInstancesResultModel(BaseModel):
    instance_monitorings: List[InstanceMonitoringModel] = Field(
        alias="InstanceMonitorings"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class InstanceNetworkInterfaceModel(BaseModel):
    association: Optional[InstanceNetworkInterfaceAssociationModel] = Field(
        default=None, alias="Association"
    )
    attachment: Optional[InstanceNetworkInterfaceAttachmentModel] = Field(
        default=None, alias="Attachment"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    groups: Optional[List[GroupIdentifierModel]] = Field(default=None, alias="Groups")
    ipv6_addresses: Optional[List[InstanceIpv6AddressModel]] = Field(
        default=None, alias="Ipv6Addresses"
    )
    mac_address: Optional[str] = Field(default=None, alias="MacAddress")
    network_interface_id: Optional[str] = Field(
        default=None, alias="NetworkInterfaceId"
    )
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    private_dns_name: Optional[str] = Field(default=None, alias="PrivateDnsName")
    private_ip_address: Optional[str] = Field(default=None, alias="PrivateIpAddress")
    private_ip_addresses: Optional[List[InstancePrivateIpAddressModel]] = Field(
        default=None, alias="PrivateIpAddresses"
    )
    source_dest_check: Optional[bool] = Field(default=None, alias="SourceDestCheck")
    status: Optional[
        Literal["associated", "attaching", "available", "detaching", "in-use"]
    ] = Field(default=None, alias="Status")
    subnet_id: Optional[str] = Field(default=None, alias="SubnetId")
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")
    interface_type: Optional[str] = Field(default=None, alias="InterfaceType")
    ipv4_prefixes: Optional[List[InstanceIpv4PrefixModel]] = Field(
        default=None, alias="Ipv4Prefixes"
    )
    ipv6_prefixes: Optional[List[InstanceIpv6PrefixModel]] = Field(
        default=None, alias="Ipv6Prefixes"
    )


class FleetLaunchTemplateOverridesRequestModel(BaseModel):
    instance_type: Optional[
        Literal[
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.large",
            "a1.medium",
            "a1.metal",
            "a1.xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c3.large",
            "c3.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.large",
            "c5.metal",
            "c5.xlarge",
            "c5a.12xlarge",
            "c5a.16xlarge",
            "c5a.24xlarge",
            "c5a.2xlarge",
            "c5a.4xlarge",
            "c5a.8xlarge",
            "c5a.large",
            "c5a.xlarge",
            "c5ad.12xlarge",
            "c5ad.16xlarge",
            "c5ad.24xlarge",
            "c5ad.2xlarge",
            "c5ad.4xlarge",
            "c5ad.8xlarge",
            "c5ad.large",
            "c5ad.xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.large",
            "c5d.metal",
            "c5d.xlarge",
            "c5n.18xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.large",
            "c5n.metal",
            "c5n.xlarge",
            "c6a.12xlarge",
            "c6a.16xlarge",
            "c6a.24xlarge",
            "c6a.2xlarge",
            "c6a.32xlarge",
            "c6a.48xlarge",
            "c6a.4xlarge",
            "c6a.8xlarge",
            "c6a.large",
            "c6a.metal",
            "c6a.xlarge",
            "c6g.12xlarge",
            "c6g.16xlarge",
            "c6g.2xlarge",
            "c6g.4xlarge",
            "c6g.8xlarge",
            "c6g.large",
            "c6g.medium",
            "c6g.metal",
            "c6g.xlarge",
            "c6gd.12xlarge",
            "c6gd.16xlarge",
            "c6gd.2xlarge",
            "c6gd.4xlarge",
            "c6gd.8xlarge",
            "c6gd.large",
            "c6gd.medium",
            "c6gd.metal",
            "c6gd.xlarge",
            "c6gn.12xlarge",
            "c6gn.16xlarge",
            "c6gn.2xlarge",
            "c6gn.4xlarge",
            "c6gn.8xlarge",
            "c6gn.large",
            "c6gn.medium",
            "c6gn.xlarge",
            "c6i.12xlarge",
            "c6i.16xlarge",
            "c6i.24xlarge",
            "c6i.2xlarge",
            "c6i.32xlarge",
            "c6i.4xlarge",
            "c6i.8xlarge",
            "c6i.large",
            "c6i.metal",
            "c6i.xlarge",
            "c6id.12xlarge",
            "c6id.16xlarge",
            "c6id.24xlarge",
            "c6id.2xlarge",
            "c6id.32xlarge",
            "c6id.4xlarge",
            "c6id.8xlarge",
            "c6id.large",
            "c6id.metal",
            "c6id.xlarge",
            "c6in.12xlarge",
            "c6in.16xlarge",
            "c6in.24xlarge",
            "c6in.2xlarge",
            "c6in.32xlarge",
            "c6in.4xlarge",
            "c6in.8xlarge",
            "c6in.large",
            "c6in.xlarge",
            "c7g.12xlarge",
            "c7g.16xlarge",
            "c7g.2xlarge",
            "c7g.4xlarge",
            "c7g.8xlarge",
            "c7g.large",
            "c7g.medium",
            "c7g.xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "cg1.4xlarge",
            "cr1.8xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "d2.xlarge",
            "d3.2xlarge",
            "d3.4xlarge",
            "d3.8xlarge",
            "d3.xlarge",
            "d3en.12xlarge",
            "d3en.2xlarge",
            "d3en.4xlarge",
            "d3en.6xlarge",
            "d3en.8xlarge",
            "d3en.xlarge",
            "dl1.24xlarge",
            "f1.16xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.16xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3s.xlarge",
            "g4ad.16xlarge",
            "g4ad.2xlarge",
            "g4ad.4xlarge",
            "g4ad.8xlarge",
            "g4ad.xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.metal",
            "g4dn.xlarge",
            "g5.12xlarge",
            "g5.16xlarge",
            "g5.24xlarge",
            "g5.2xlarge",
            "g5.48xlarge",
            "g5.4xlarge",
            "g5.8xlarge",
            "g5.xlarge",
            "g5g.16xlarge",
            "g5g.2xlarge",
            "g5g.4xlarge",
            "g5g.8xlarge",
            "g5g.metal",
            "g5g.xlarge",
            "h1.16xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "hi1.4xlarge",
            "hpc6a.48xlarge",
            "hpc6id.32xlarge",
            "hs1.8xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i2.xlarge",
            "i3.16xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.large",
            "i3.metal",
            "i3.xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.large",
            "i3en.metal",
            "i3en.xlarge",
            "i4i.16xlarge",
            "i4i.2xlarge",
            "i4i.32xlarge",
            "i4i.4xlarge",
            "i4i.8xlarge",
            "i4i.large",
            "i4i.metal",
            "i4i.xlarge",
            "im4gn.16xlarge",
            "im4gn.2xlarge",
            "im4gn.4xlarge",
            "im4gn.8xlarge",
            "im4gn.large",
            "im4gn.xlarge",
            "inf1.24xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.xlarge",
            "is4gen.2xlarge",
            "is4gen.4xlarge",
            "is4gen.8xlarge",
            "is4gen.large",
            "is4gen.medium",
            "is4gen.xlarge",
            "m1.large",
            "m1.medium",
            "m1.small",
            "m1.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "m2.xlarge",
            "m3.2xlarge",
            "m3.large",
            "m3.medium",
            "m3.xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.large",
            "m4.xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.large",
            "m5.metal",
            "m5.xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.large",
            "m5a.xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.large",
            "m5ad.xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.large",
            "m5d.metal",
            "m5d.xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.large",
            "m5dn.metal",
            "m5dn.xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.large",
            "m5n.metal",
            "m5n.xlarge",
            "m5zn.12xlarge",
            "m5zn.2xlarge",
            "m5zn.3xlarge",
            "m5zn.6xlarge",
            "m5zn.large",
            "m5zn.metal",
            "m5zn.xlarge",
            "m6a.12xlarge",
            "m6a.16xlarge",
            "m6a.24xlarge",
            "m6a.2xlarge",
            "m6a.32xlarge",
            "m6a.48xlarge",
            "m6a.4xlarge",
            "m6a.8xlarge",
            "m6a.large",
            "m6a.metal",
            "m6a.xlarge",
            "m6g.12xlarge",
            "m6g.16xlarge",
            "m6g.2xlarge",
            "m6g.4xlarge",
            "m6g.8xlarge",
            "m6g.large",
            "m6g.medium",
            "m6g.metal",
            "m6g.xlarge",
            "m6gd.12xlarge",
            "m6gd.16xlarge",
            "m6gd.2xlarge",
            "m6gd.4xlarge",
            "m6gd.8xlarge",
            "m6gd.large",
            "m6gd.medium",
            "m6gd.metal",
            "m6gd.xlarge",
            "m6i.12xlarge",
            "m6i.16xlarge",
            "m6i.24xlarge",
            "m6i.2xlarge",
            "m6i.32xlarge",
            "m6i.4xlarge",
            "m6i.8xlarge",
            "m6i.large",
            "m6i.metal",
            "m6i.xlarge",
            "m6id.12xlarge",
            "m6id.16xlarge",
            "m6id.24xlarge",
            "m6id.2xlarge",
            "m6id.32xlarge",
            "m6id.4xlarge",
            "m6id.8xlarge",
            "m6id.large",
            "m6id.metal",
            "m6id.xlarge",
            "m6idn.12xlarge",
            "m6idn.16xlarge",
            "m6idn.24xlarge",
            "m6idn.2xlarge",
            "m6idn.32xlarge",
            "m6idn.4xlarge",
            "m6idn.8xlarge",
            "m6idn.large",
            "m6idn.xlarge",
            "m6in.12xlarge",
            "m6in.16xlarge",
            "m6in.24xlarge",
            "m6in.2xlarge",
            "m6in.32xlarge",
            "m6in.4xlarge",
            "m6in.8xlarge",
            "m6in.large",
            "m6in.xlarge",
            "mac1.metal",
            "mac2.metal",
            "p2.16xlarge",
            "p2.8xlarge",
            "p2.xlarge",
            "p3.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3dn.24xlarge",
            "p4d.24xlarge",
            "p4de.24xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r4.16xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.large",
            "r5.metal",
            "r5.xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.large",
            "r5a.xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.large",
            "r5ad.xlarge",
            "r5b.12xlarge",
            "r5b.16xlarge",
            "r5b.24xlarge",
            "r5b.2xlarge",
            "r5b.4xlarge",
            "r5b.8xlarge",
            "r5b.large",
            "r5b.metal",
            "r5b.xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.large",
            "r5d.metal",
            "r5d.xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.large",
            "r5dn.metal",
            "r5dn.xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.large",
            "r5n.metal",
            "r5n.xlarge",
            "r6a.12xlarge",
            "r6a.16xlarge",
            "r6a.24xlarge",
            "r6a.2xlarge",
            "r6a.32xlarge",
            "r6a.48xlarge",
            "r6a.4xlarge",
            "r6a.8xlarge",
            "r6a.large",
            "r6a.metal",
            "r6a.xlarge",
            "r6g.12xlarge",
            "r6g.16xlarge",
            "r6g.2xlarge",
            "r6g.4xlarge",
            "r6g.8xlarge",
            "r6g.large",
            "r6g.medium",
            "r6g.metal",
            "r6g.xlarge",
            "r6gd.12xlarge",
            "r6gd.16xlarge",
            "r6gd.2xlarge",
            "r6gd.4xlarge",
            "r6gd.8xlarge",
            "r6gd.large",
            "r6gd.medium",
            "r6gd.metal",
            "r6gd.xlarge",
            "r6i.12xlarge",
            "r6i.16xlarge",
            "r6i.24xlarge",
            "r6i.2xlarge",
            "r6i.32xlarge",
            "r6i.4xlarge",
            "r6i.8xlarge",
            "r6i.large",
            "r6i.metal",
            "r6i.xlarge",
            "r6id.12xlarge",
            "r6id.16xlarge",
            "r6id.24xlarge",
            "r6id.2xlarge",
            "r6id.32xlarge",
            "r6id.4xlarge",
            "r6id.8xlarge",
            "r6id.large",
            "r6id.metal",
            "r6id.xlarge",
            "r6idn.12xlarge",
            "r6idn.16xlarge",
            "r6idn.24xlarge",
            "r6idn.2xlarge",
            "r6idn.32xlarge",
            "r6idn.4xlarge",
            "r6idn.8xlarge",
            "r6idn.large",
            "r6idn.xlarge",
            "r6in.12xlarge",
            "r6in.16xlarge",
            "r6in.24xlarge",
            "r6in.2xlarge",
            "r6in.32xlarge",
            "r6in.4xlarge",
            "r6in.8xlarge",
            "r6in.large",
            "r6in.xlarge",
            "t1.micro",
            "t2.2xlarge",
            "t2.large",
            "t2.medium",
            "t2.micro",
            "t2.nano",
            "t2.small",
            "t2.xlarge",
            "t3.2xlarge",
            "t3.large",
            "t3.medium",
            "t3.micro",
            "t3.nano",
            "t3.small",
            "t3.xlarge",
            "t3a.2xlarge",
            "t3a.large",
            "t3a.medium",
            "t3a.micro",
            "t3a.nano",
            "t3a.small",
            "t3a.xlarge",
            "t4g.2xlarge",
            "t4g.large",
            "t4g.medium",
            "t4g.micro",
            "t4g.nano",
            "t4g.small",
            "t4g.xlarge",
            "trn1.2xlarge",
            "trn1.32xlarge",
            "u-12tb1.112xlarge",
            "u-12tb1.metal",
            "u-18tb1.112xlarge",
            "u-18tb1.metal",
            "u-24tb1.112xlarge",
            "u-24tb1.metal",
            "u-3tb1.56xlarge",
            "u-6tb1.112xlarge",
            "u-6tb1.56xlarge",
            "u-6tb1.metal",
            "u-9tb1.112xlarge",
            "u-9tb1.metal",
            "vt1.24xlarge",
            "vt1.3xlarge",
            "vt1.6xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.16xlarge",
            "x1e.2xlarge",
            "x1e.32xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.xlarge",
            "x2gd.12xlarge",
            "x2gd.16xlarge",
            "x2gd.2xlarge",
            "x2gd.4xlarge",
            "x2gd.8xlarge",
            "x2gd.large",
            "x2gd.medium",
            "x2gd.metal",
            "x2gd.xlarge",
            "x2idn.16xlarge",
            "x2idn.24xlarge",
            "x2idn.32xlarge",
            "x2idn.metal",
            "x2iedn.16xlarge",
            "x2iedn.24xlarge",
            "x2iedn.2xlarge",
            "x2iedn.32xlarge",
            "x2iedn.4xlarge",
            "x2iedn.8xlarge",
            "x2iedn.metal",
            "x2iedn.xlarge",
            "x2iezn.12xlarge",
            "x2iezn.2xlarge",
            "x2iezn.4xlarge",
            "x2iezn.6xlarge",
            "x2iezn.8xlarge",
            "x2iezn.metal",
            "z1d.12xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.large",
            "z1d.metal",
            "z1d.xlarge",
        ]
    ] = Field(default=None, alias="InstanceType")
    max_price: Optional[str] = Field(default=None, alias="MaxPrice")
    subnet_id: Optional[str] = Field(default=None, alias="SubnetId")
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    weighted_capacity: Optional[float] = Field(default=None, alias="WeightedCapacity")
    priority: Optional[float] = Field(default=None, alias="Priority")
    placement: Optional[PlacementModel] = Field(default=None, alias="Placement")
    instance_requirements: Optional[InstanceRequirementsRequestModel] = Field(
        default=None, alias="InstanceRequirements"
    )
    image_id: Optional[str] = Field(default=None, alias="ImageId")


class GetInstanceTypesFromInstanceRequirementsRequestGetInstanceTypesFromInstanceRequirementsPaginateModel(
    BaseModel
):
    architecture_types: Sequence[
        Literal["arm64", "arm64_mac", "i386", "x86_64", "x86_64_mac"]
    ] = Field(alias="ArchitectureTypes")
    virtualization_types: Sequence[Literal["hvm", "paravirtual"]] = Field(
        alias="VirtualizationTypes"
    )
    instance_requirements: InstanceRequirementsRequestModel = Field(
        alias="InstanceRequirements"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class GetInstanceTypesFromInstanceRequirementsRequestModel(BaseModel):
    architecture_types: Sequence[
        Literal["arm64", "arm64_mac", "i386", "x86_64", "x86_64_mac"]
    ] = Field(alias="ArchitectureTypes")
    virtualization_types: Sequence[Literal["hvm", "paravirtual"]] = Field(
        alias="VirtualizationTypes"
    )
    instance_requirements: InstanceRequirementsRequestModel = Field(
        alias="InstanceRequirements"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class InstanceRequirementsWithMetadataRequestModel(BaseModel):
    architecture_types: Optional[
        Sequence[Literal["arm64", "arm64_mac", "i386", "x86_64", "x86_64_mac"]]
    ] = Field(default=None, alias="ArchitectureTypes")
    virtualization_types: Optional[Sequence[Literal["hvm", "paravirtual"]]] = Field(
        default=None, alias="VirtualizationTypes"
    )
    instance_requirements: Optional[InstanceRequirementsRequestModel] = Field(
        default=None, alias="InstanceRequirements"
    )


class FleetLaunchTemplateOverridesModel(BaseModel):
    instance_type: Optional[
        Literal[
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.large",
            "a1.medium",
            "a1.metal",
            "a1.xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c3.large",
            "c3.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.large",
            "c5.metal",
            "c5.xlarge",
            "c5a.12xlarge",
            "c5a.16xlarge",
            "c5a.24xlarge",
            "c5a.2xlarge",
            "c5a.4xlarge",
            "c5a.8xlarge",
            "c5a.large",
            "c5a.xlarge",
            "c5ad.12xlarge",
            "c5ad.16xlarge",
            "c5ad.24xlarge",
            "c5ad.2xlarge",
            "c5ad.4xlarge",
            "c5ad.8xlarge",
            "c5ad.large",
            "c5ad.xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.large",
            "c5d.metal",
            "c5d.xlarge",
            "c5n.18xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.large",
            "c5n.metal",
            "c5n.xlarge",
            "c6a.12xlarge",
            "c6a.16xlarge",
            "c6a.24xlarge",
            "c6a.2xlarge",
            "c6a.32xlarge",
            "c6a.48xlarge",
            "c6a.4xlarge",
            "c6a.8xlarge",
            "c6a.large",
            "c6a.metal",
            "c6a.xlarge",
            "c6g.12xlarge",
            "c6g.16xlarge",
            "c6g.2xlarge",
            "c6g.4xlarge",
            "c6g.8xlarge",
            "c6g.large",
            "c6g.medium",
            "c6g.metal",
            "c6g.xlarge",
            "c6gd.12xlarge",
            "c6gd.16xlarge",
            "c6gd.2xlarge",
            "c6gd.4xlarge",
            "c6gd.8xlarge",
            "c6gd.large",
            "c6gd.medium",
            "c6gd.metal",
            "c6gd.xlarge",
            "c6gn.12xlarge",
            "c6gn.16xlarge",
            "c6gn.2xlarge",
            "c6gn.4xlarge",
            "c6gn.8xlarge",
            "c6gn.large",
            "c6gn.medium",
            "c6gn.xlarge",
            "c6i.12xlarge",
            "c6i.16xlarge",
            "c6i.24xlarge",
            "c6i.2xlarge",
            "c6i.32xlarge",
            "c6i.4xlarge",
            "c6i.8xlarge",
            "c6i.large",
            "c6i.metal",
            "c6i.xlarge",
            "c6id.12xlarge",
            "c6id.16xlarge",
            "c6id.24xlarge",
            "c6id.2xlarge",
            "c6id.32xlarge",
            "c6id.4xlarge",
            "c6id.8xlarge",
            "c6id.large",
            "c6id.metal",
            "c6id.xlarge",
            "c6in.12xlarge",
            "c6in.16xlarge",
            "c6in.24xlarge",
            "c6in.2xlarge",
            "c6in.32xlarge",
            "c6in.4xlarge",
            "c6in.8xlarge",
            "c6in.large",
            "c6in.xlarge",
            "c7g.12xlarge",
            "c7g.16xlarge",
            "c7g.2xlarge",
            "c7g.4xlarge",
            "c7g.8xlarge",
            "c7g.large",
            "c7g.medium",
            "c7g.xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "cg1.4xlarge",
            "cr1.8xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "d2.xlarge",
            "d3.2xlarge",
            "d3.4xlarge",
            "d3.8xlarge",
            "d3.xlarge",
            "d3en.12xlarge",
            "d3en.2xlarge",
            "d3en.4xlarge",
            "d3en.6xlarge",
            "d3en.8xlarge",
            "d3en.xlarge",
            "dl1.24xlarge",
            "f1.16xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.16xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3s.xlarge",
            "g4ad.16xlarge",
            "g4ad.2xlarge",
            "g4ad.4xlarge",
            "g4ad.8xlarge",
            "g4ad.xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.metal",
            "g4dn.xlarge",
            "g5.12xlarge",
            "g5.16xlarge",
            "g5.24xlarge",
            "g5.2xlarge",
            "g5.48xlarge",
            "g5.4xlarge",
            "g5.8xlarge",
            "g5.xlarge",
            "g5g.16xlarge",
            "g5g.2xlarge",
            "g5g.4xlarge",
            "g5g.8xlarge",
            "g5g.metal",
            "g5g.xlarge",
            "h1.16xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "hi1.4xlarge",
            "hpc6a.48xlarge",
            "hpc6id.32xlarge",
            "hs1.8xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i2.xlarge",
            "i3.16xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.large",
            "i3.metal",
            "i3.xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.large",
            "i3en.metal",
            "i3en.xlarge",
            "i4i.16xlarge",
            "i4i.2xlarge",
            "i4i.32xlarge",
            "i4i.4xlarge",
            "i4i.8xlarge",
            "i4i.large",
            "i4i.metal",
            "i4i.xlarge",
            "im4gn.16xlarge",
            "im4gn.2xlarge",
            "im4gn.4xlarge",
            "im4gn.8xlarge",
            "im4gn.large",
            "im4gn.xlarge",
            "inf1.24xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.xlarge",
            "is4gen.2xlarge",
            "is4gen.4xlarge",
            "is4gen.8xlarge",
            "is4gen.large",
            "is4gen.medium",
            "is4gen.xlarge",
            "m1.large",
            "m1.medium",
            "m1.small",
            "m1.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "m2.xlarge",
            "m3.2xlarge",
            "m3.large",
            "m3.medium",
            "m3.xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.large",
            "m4.xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.large",
            "m5.metal",
            "m5.xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.large",
            "m5a.xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.large",
            "m5ad.xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.large",
            "m5d.metal",
            "m5d.xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.large",
            "m5dn.metal",
            "m5dn.xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.large",
            "m5n.metal",
            "m5n.xlarge",
            "m5zn.12xlarge",
            "m5zn.2xlarge",
            "m5zn.3xlarge",
            "m5zn.6xlarge",
            "m5zn.large",
            "m5zn.metal",
            "m5zn.xlarge",
            "m6a.12xlarge",
            "m6a.16xlarge",
            "m6a.24xlarge",
            "m6a.2xlarge",
            "m6a.32xlarge",
            "m6a.48xlarge",
            "m6a.4xlarge",
            "m6a.8xlarge",
            "m6a.large",
            "m6a.metal",
            "m6a.xlarge",
            "m6g.12xlarge",
            "m6g.16xlarge",
            "m6g.2xlarge",
            "m6g.4xlarge",
            "m6g.8xlarge",
            "m6g.large",
            "m6g.medium",
            "m6g.metal",
            "m6g.xlarge",
            "m6gd.12xlarge",
            "m6gd.16xlarge",
            "m6gd.2xlarge",
            "m6gd.4xlarge",
            "m6gd.8xlarge",
            "m6gd.large",
            "m6gd.medium",
            "m6gd.metal",
            "m6gd.xlarge",
            "m6i.12xlarge",
            "m6i.16xlarge",
            "m6i.24xlarge",
            "m6i.2xlarge",
            "m6i.32xlarge",
            "m6i.4xlarge",
            "m6i.8xlarge",
            "m6i.large",
            "m6i.metal",
            "m6i.xlarge",
            "m6id.12xlarge",
            "m6id.16xlarge",
            "m6id.24xlarge",
            "m6id.2xlarge",
            "m6id.32xlarge",
            "m6id.4xlarge",
            "m6id.8xlarge",
            "m6id.large",
            "m6id.metal",
            "m6id.xlarge",
            "m6idn.12xlarge",
            "m6idn.16xlarge",
            "m6idn.24xlarge",
            "m6idn.2xlarge",
            "m6idn.32xlarge",
            "m6idn.4xlarge",
            "m6idn.8xlarge",
            "m6idn.large",
            "m6idn.xlarge",
            "m6in.12xlarge",
            "m6in.16xlarge",
            "m6in.24xlarge",
            "m6in.2xlarge",
            "m6in.32xlarge",
            "m6in.4xlarge",
            "m6in.8xlarge",
            "m6in.large",
            "m6in.xlarge",
            "mac1.metal",
            "mac2.metal",
            "p2.16xlarge",
            "p2.8xlarge",
            "p2.xlarge",
            "p3.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3dn.24xlarge",
            "p4d.24xlarge",
            "p4de.24xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r4.16xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.large",
            "r5.metal",
            "r5.xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.large",
            "r5a.xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.large",
            "r5ad.xlarge",
            "r5b.12xlarge",
            "r5b.16xlarge",
            "r5b.24xlarge",
            "r5b.2xlarge",
            "r5b.4xlarge",
            "r5b.8xlarge",
            "r5b.large",
            "r5b.metal",
            "r5b.xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.large",
            "r5d.metal",
            "r5d.xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.large",
            "r5dn.metal",
            "r5dn.xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.large",
            "r5n.metal",
            "r5n.xlarge",
            "r6a.12xlarge",
            "r6a.16xlarge",
            "r6a.24xlarge",
            "r6a.2xlarge",
            "r6a.32xlarge",
            "r6a.48xlarge",
            "r6a.4xlarge",
            "r6a.8xlarge",
            "r6a.large",
            "r6a.metal",
            "r6a.xlarge",
            "r6g.12xlarge",
            "r6g.16xlarge",
            "r6g.2xlarge",
            "r6g.4xlarge",
            "r6g.8xlarge",
            "r6g.large",
            "r6g.medium",
            "r6g.metal",
            "r6g.xlarge",
            "r6gd.12xlarge",
            "r6gd.16xlarge",
            "r6gd.2xlarge",
            "r6gd.4xlarge",
            "r6gd.8xlarge",
            "r6gd.large",
            "r6gd.medium",
            "r6gd.metal",
            "r6gd.xlarge",
            "r6i.12xlarge",
            "r6i.16xlarge",
            "r6i.24xlarge",
            "r6i.2xlarge",
            "r6i.32xlarge",
            "r6i.4xlarge",
            "r6i.8xlarge",
            "r6i.large",
            "r6i.metal",
            "r6i.xlarge",
            "r6id.12xlarge",
            "r6id.16xlarge",
            "r6id.24xlarge",
            "r6id.2xlarge",
            "r6id.32xlarge",
            "r6id.4xlarge",
            "r6id.8xlarge",
            "r6id.large",
            "r6id.metal",
            "r6id.xlarge",
            "r6idn.12xlarge",
            "r6idn.16xlarge",
            "r6idn.24xlarge",
            "r6idn.2xlarge",
            "r6idn.32xlarge",
            "r6idn.4xlarge",
            "r6idn.8xlarge",
            "r6idn.large",
            "r6idn.xlarge",
            "r6in.12xlarge",
            "r6in.16xlarge",
            "r6in.24xlarge",
            "r6in.2xlarge",
            "r6in.32xlarge",
            "r6in.4xlarge",
            "r6in.8xlarge",
            "r6in.large",
            "r6in.xlarge",
            "t1.micro",
            "t2.2xlarge",
            "t2.large",
            "t2.medium",
            "t2.micro",
            "t2.nano",
            "t2.small",
            "t2.xlarge",
            "t3.2xlarge",
            "t3.large",
            "t3.medium",
            "t3.micro",
            "t3.nano",
            "t3.small",
            "t3.xlarge",
            "t3a.2xlarge",
            "t3a.large",
            "t3a.medium",
            "t3a.micro",
            "t3a.nano",
            "t3a.small",
            "t3a.xlarge",
            "t4g.2xlarge",
            "t4g.large",
            "t4g.medium",
            "t4g.micro",
            "t4g.nano",
            "t4g.small",
            "t4g.xlarge",
            "trn1.2xlarge",
            "trn1.32xlarge",
            "u-12tb1.112xlarge",
            "u-12tb1.metal",
            "u-18tb1.112xlarge",
            "u-18tb1.metal",
            "u-24tb1.112xlarge",
            "u-24tb1.metal",
            "u-3tb1.56xlarge",
            "u-6tb1.112xlarge",
            "u-6tb1.56xlarge",
            "u-6tb1.metal",
            "u-9tb1.112xlarge",
            "u-9tb1.metal",
            "vt1.24xlarge",
            "vt1.3xlarge",
            "vt1.6xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.16xlarge",
            "x1e.2xlarge",
            "x1e.32xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.xlarge",
            "x2gd.12xlarge",
            "x2gd.16xlarge",
            "x2gd.2xlarge",
            "x2gd.4xlarge",
            "x2gd.8xlarge",
            "x2gd.large",
            "x2gd.medium",
            "x2gd.metal",
            "x2gd.xlarge",
            "x2idn.16xlarge",
            "x2idn.24xlarge",
            "x2idn.32xlarge",
            "x2idn.metal",
            "x2iedn.16xlarge",
            "x2iedn.24xlarge",
            "x2iedn.2xlarge",
            "x2iedn.32xlarge",
            "x2iedn.4xlarge",
            "x2iedn.8xlarge",
            "x2iedn.metal",
            "x2iedn.xlarge",
            "x2iezn.12xlarge",
            "x2iezn.2xlarge",
            "x2iezn.4xlarge",
            "x2iezn.6xlarge",
            "x2iezn.8xlarge",
            "x2iezn.metal",
            "z1d.12xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.large",
            "z1d.metal",
            "z1d.xlarge",
        ]
    ] = Field(default=None, alias="InstanceType")
    max_price: Optional[str] = Field(default=None, alias="MaxPrice")
    subnet_id: Optional[str] = Field(default=None, alias="SubnetId")
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    weighted_capacity: Optional[float] = Field(default=None, alias="WeightedCapacity")
    priority: Optional[float] = Field(default=None, alias="Priority")
    placement: Optional[PlacementResponseModel] = Field(default=None, alias="Placement")
    instance_requirements: Optional[InstanceRequirementsModel] = Field(
        default=None, alias="InstanceRequirements"
    )
    image_id: Optional[str] = Field(default=None, alias="ImageId")


class LaunchTemplateOverridesModel(BaseModel):
    instance_type: Optional[
        Literal[
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.large",
            "a1.medium",
            "a1.metal",
            "a1.xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c3.large",
            "c3.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.large",
            "c5.metal",
            "c5.xlarge",
            "c5a.12xlarge",
            "c5a.16xlarge",
            "c5a.24xlarge",
            "c5a.2xlarge",
            "c5a.4xlarge",
            "c5a.8xlarge",
            "c5a.large",
            "c5a.xlarge",
            "c5ad.12xlarge",
            "c5ad.16xlarge",
            "c5ad.24xlarge",
            "c5ad.2xlarge",
            "c5ad.4xlarge",
            "c5ad.8xlarge",
            "c5ad.large",
            "c5ad.xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.large",
            "c5d.metal",
            "c5d.xlarge",
            "c5n.18xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.large",
            "c5n.metal",
            "c5n.xlarge",
            "c6a.12xlarge",
            "c6a.16xlarge",
            "c6a.24xlarge",
            "c6a.2xlarge",
            "c6a.32xlarge",
            "c6a.48xlarge",
            "c6a.4xlarge",
            "c6a.8xlarge",
            "c6a.large",
            "c6a.metal",
            "c6a.xlarge",
            "c6g.12xlarge",
            "c6g.16xlarge",
            "c6g.2xlarge",
            "c6g.4xlarge",
            "c6g.8xlarge",
            "c6g.large",
            "c6g.medium",
            "c6g.metal",
            "c6g.xlarge",
            "c6gd.12xlarge",
            "c6gd.16xlarge",
            "c6gd.2xlarge",
            "c6gd.4xlarge",
            "c6gd.8xlarge",
            "c6gd.large",
            "c6gd.medium",
            "c6gd.metal",
            "c6gd.xlarge",
            "c6gn.12xlarge",
            "c6gn.16xlarge",
            "c6gn.2xlarge",
            "c6gn.4xlarge",
            "c6gn.8xlarge",
            "c6gn.large",
            "c6gn.medium",
            "c6gn.xlarge",
            "c6i.12xlarge",
            "c6i.16xlarge",
            "c6i.24xlarge",
            "c6i.2xlarge",
            "c6i.32xlarge",
            "c6i.4xlarge",
            "c6i.8xlarge",
            "c6i.large",
            "c6i.metal",
            "c6i.xlarge",
            "c6id.12xlarge",
            "c6id.16xlarge",
            "c6id.24xlarge",
            "c6id.2xlarge",
            "c6id.32xlarge",
            "c6id.4xlarge",
            "c6id.8xlarge",
            "c6id.large",
            "c6id.metal",
            "c6id.xlarge",
            "c6in.12xlarge",
            "c6in.16xlarge",
            "c6in.24xlarge",
            "c6in.2xlarge",
            "c6in.32xlarge",
            "c6in.4xlarge",
            "c6in.8xlarge",
            "c6in.large",
            "c6in.xlarge",
            "c7g.12xlarge",
            "c7g.16xlarge",
            "c7g.2xlarge",
            "c7g.4xlarge",
            "c7g.8xlarge",
            "c7g.large",
            "c7g.medium",
            "c7g.xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "cg1.4xlarge",
            "cr1.8xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "d2.xlarge",
            "d3.2xlarge",
            "d3.4xlarge",
            "d3.8xlarge",
            "d3.xlarge",
            "d3en.12xlarge",
            "d3en.2xlarge",
            "d3en.4xlarge",
            "d3en.6xlarge",
            "d3en.8xlarge",
            "d3en.xlarge",
            "dl1.24xlarge",
            "f1.16xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.16xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3s.xlarge",
            "g4ad.16xlarge",
            "g4ad.2xlarge",
            "g4ad.4xlarge",
            "g4ad.8xlarge",
            "g4ad.xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.metal",
            "g4dn.xlarge",
            "g5.12xlarge",
            "g5.16xlarge",
            "g5.24xlarge",
            "g5.2xlarge",
            "g5.48xlarge",
            "g5.4xlarge",
            "g5.8xlarge",
            "g5.xlarge",
            "g5g.16xlarge",
            "g5g.2xlarge",
            "g5g.4xlarge",
            "g5g.8xlarge",
            "g5g.metal",
            "g5g.xlarge",
            "h1.16xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "hi1.4xlarge",
            "hpc6a.48xlarge",
            "hpc6id.32xlarge",
            "hs1.8xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i2.xlarge",
            "i3.16xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.large",
            "i3.metal",
            "i3.xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.large",
            "i3en.metal",
            "i3en.xlarge",
            "i4i.16xlarge",
            "i4i.2xlarge",
            "i4i.32xlarge",
            "i4i.4xlarge",
            "i4i.8xlarge",
            "i4i.large",
            "i4i.metal",
            "i4i.xlarge",
            "im4gn.16xlarge",
            "im4gn.2xlarge",
            "im4gn.4xlarge",
            "im4gn.8xlarge",
            "im4gn.large",
            "im4gn.xlarge",
            "inf1.24xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.xlarge",
            "is4gen.2xlarge",
            "is4gen.4xlarge",
            "is4gen.8xlarge",
            "is4gen.large",
            "is4gen.medium",
            "is4gen.xlarge",
            "m1.large",
            "m1.medium",
            "m1.small",
            "m1.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "m2.xlarge",
            "m3.2xlarge",
            "m3.large",
            "m3.medium",
            "m3.xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.large",
            "m4.xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.large",
            "m5.metal",
            "m5.xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.large",
            "m5a.xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.large",
            "m5ad.xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.large",
            "m5d.metal",
            "m5d.xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.large",
            "m5dn.metal",
            "m5dn.xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.large",
            "m5n.metal",
            "m5n.xlarge",
            "m5zn.12xlarge",
            "m5zn.2xlarge",
            "m5zn.3xlarge",
            "m5zn.6xlarge",
            "m5zn.large",
            "m5zn.metal",
            "m5zn.xlarge",
            "m6a.12xlarge",
            "m6a.16xlarge",
            "m6a.24xlarge",
            "m6a.2xlarge",
            "m6a.32xlarge",
            "m6a.48xlarge",
            "m6a.4xlarge",
            "m6a.8xlarge",
            "m6a.large",
            "m6a.metal",
            "m6a.xlarge",
            "m6g.12xlarge",
            "m6g.16xlarge",
            "m6g.2xlarge",
            "m6g.4xlarge",
            "m6g.8xlarge",
            "m6g.large",
            "m6g.medium",
            "m6g.metal",
            "m6g.xlarge",
            "m6gd.12xlarge",
            "m6gd.16xlarge",
            "m6gd.2xlarge",
            "m6gd.4xlarge",
            "m6gd.8xlarge",
            "m6gd.large",
            "m6gd.medium",
            "m6gd.metal",
            "m6gd.xlarge",
            "m6i.12xlarge",
            "m6i.16xlarge",
            "m6i.24xlarge",
            "m6i.2xlarge",
            "m6i.32xlarge",
            "m6i.4xlarge",
            "m6i.8xlarge",
            "m6i.large",
            "m6i.metal",
            "m6i.xlarge",
            "m6id.12xlarge",
            "m6id.16xlarge",
            "m6id.24xlarge",
            "m6id.2xlarge",
            "m6id.32xlarge",
            "m6id.4xlarge",
            "m6id.8xlarge",
            "m6id.large",
            "m6id.metal",
            "m6id.xlarge",
            "m6idn.12xlarge",
            "m6idn.16xlarge",
            "m6idn.24xlarge",
            "m6idn.2xlarge",
            "m6idn.32xlarge",
            "m6idn.4xlarge",
            "m6idn.8xlarge",
            "m6idn.large",
            "m6idn.xlarge",
            "m6in.12xlarge",
            "m6in.16xlarge",
            "m6in.24xlarge",
            "m6in.2xlarge",
            "m6in.32xlarge",
            "m6in.4xlarge",
            "m6in.8xlarge",
            "m6in.large",
            "m6in.xlarge",
            "mac1.metal",
            "mac2.metal",
            "p2.16xlarge",
            "p2.8xlarge",
            "p2.xlarge",
            "p3.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3dn.24xlarge",
            "p4d.24xlarge",
            "p4de.24xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r4.16xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.large",
            "r5.metal",
            "r5.xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.large",
            "r5a.xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.large",
            "r5ad.xlarge",
            "r5b.12xlarge",
            "r5b.16xlarge",
            "r5b.24xlarge",
            "r5b.2xlarge",
            "r5b.4xlarge",
            "r5b.8xlarge",
            "r5b.large",
            "r5b.metal",
            "r5b.xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.large",
            "r5d.metal",
            "r5d.xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.large",
            "r5dn.metal",
            "r5dn.xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.large",
            "r5n.metal",
            "r5n.xlarge",
            "r6a.12xlarge",
            "r6a.16xlarge",
            "r6a.24xlarge",
            "r6a.2xlarge",
            "r6a.32xlarge",
            "r6a.48xlarge",
            "r6a.4xlarge",
            "r6a.8xlarge",
            "r6a.large",
            "r6a.metal",
            "r6a.xlarge",
            "r6g.12xlarge",
            "r6g.16xlarge",
            "r6g.2xlarge",
            "r6g.4xlarge",
            "r6g.8xlarge",
            "r6g.large",
            "r6g.medium",
            "r6g.metal",
            "r6g.xlarge",
            "r6gd.12xlarge",
            "r6gd.16xlarge",
            "r6gd.2xlarge",
            "r6gd.4xlarge",
            "r6gd.8xlarge",
            "r6gd.large",
            "r6gd.medium",
            "r6gd.metal",
            "r6gd.xlarge",
            "r6i.12xlarge",
            "r6i.16xlarge",
            "r6i.24xlarge",
            "r6i.2xlarge",
            "r6i.32xlarge",
            "r6i.4xlarge",
            "r6i.8xlarge",
            "r6i.large",
            "r6i.metal",
            "r6i.xlarge",
            "r6id.12xlarge",
            "r6id.16xlarge",
            "r6id.24xlarge",
            "r6id.2xlarge",
            "r6id.32xlarge",
            "r6id.4xlarge",
            "r6id.8xlarge",
            "r6id.large",
            "r6id.metal",
            "r6id.xlarge",
            "r6idn.12xlarge",
            "r6idn.16xlarge",
            "r6idn.24xlarge",
            "r6idn.2xlarge",
            "r6idn.32xlarge",
            "r6idn.4xlarge",
            "r6idn.8xlarge",
            "r6idn.large",
            "r6idn.xlarge",
            "r6in.12xlarge",
            "r6in.16xlarge",
            "r6in.24xlarge",
            "r6in.2xlarge",
            "r6in.32xlarge",
            "r6in.4xlarge",
            "r6in.8xlarge",
            "r6in.large",
            "r6in.xlarge",
            "t1.micro",
            "t2.2xlarge",
            "t2.large",
            "t2.medium",
            "t2.micro",
            "t2.nano",
            "t2.small",
            "t2.xlarge",
            "t3.2xlarge",
            "t3.large",
            "t3.medium",
            "t3.micro",
            "t3.nano",
            "t3.small",
            "t3.xlarge",
            "t3a.2xlarge",
            "t3a.large",
            "t3a.medium",
            "t3a.micro",
            "t3a.nano",
            "t3a.small",
            "t3a.xlarge",
            "t4g.2xlarge",
            "t4g.large",
            "t4g.medium",
            "t4g.micro",
            "t4g.nano",
            "t4g.small",
            "t4g.xlarge",
            "trn1.2xlarge",
            "trn1.32xlarge",
            "u-12tb1.112xlarge",
            "u-12tb1.metal",
            "u-18tb1.112xlarge",
            "u-18tb1.metal",
            "u-24tb1.112xlarge",
            "u-24tb1.metal",
            "u-3tb1.56xlarge",
            "u-6tb1.112xlarge",
            "u-6tb1.56xlarge",
            "u-6tb1.metal",
            "u-9tb1.112xlarge",
            "u-9tb1.metal",
            "vt1.24xlarge",
            "vt1.3xlarge",
            "vt1.6xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.16xlarge",
            "x1e.2xlarge",
            "x1e.32xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.xlarge",
            "x2gd.12xlarge",
            "x2gd.16xlarge",
            "x2gd.2xlarge",
            "x2gd.4xlarge",
            "x2gd.8xlarge",
            "x2gd.large",
            "x2gd.medium",
            "x2gd.metal",
            "x2gd.xlarge",
            "x2idn.16xlarge",
            "x2idn.24xlarge",
            "x2idn.32xlarge",
            "x2idn.metal",
            "x2iedn.16xlarge",
            "x2iedn.24xlarge",
            "x2iedn.2xlarge",
            "x2iedn.32xlarge",
            "x2iedn.4xlarge",
            "x2iedn.8xlarge",
            "x2iedn.metal",
            "x2iedn.xlarge",
            "x2iezn.12xlarge",
            "x2iezn.2xlarge",
            "x2iezn.4xlarge",
            "x2iezn.6xlarge",
            "x2iezn.8xlarge",
            "x2iezn.metal",
            "z1d.12xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.large",
            "z1d.metal",
            "z1d.xlarge",
        ]
    ] = Field(default=None, alias="InstanceType")
    spot_price: Optional[str] = Field(default=None, alias="SpotPrice")
    subnet_id: Optional[str] = Field(default=None, alias="SubnetId")
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    weighted_capacity: Optional[float] = Field(default=None, alias="WeightedCapacity")
    priority: Optional[float] = Field(default=None, alias="Priority")
    instance_requirements: Optional[InstanceRequirementsModel] = Field(
        default=None, alias="InstanceRequirements"
    )


class SpotFleetLaunchSpecificationModel(BaseModel):
    security_groups: Optional[List[GroupIdentifierModel]] = Field(
        default=None, alias="SecurityGroups"
    )
    addressing_type: Optional[str] = Field(default=None, alias="AddressingType")
    block_device_mappings: Optional[List[BlockDeviceMappingModel]] = Field(
        default=None, alias="BlockDeviceMappings"
    )
    ebs_optimized: Optional[bool] = Field(default=None, alias="EbsOptimized")
    iam_instance_profile: Optional[IamInstanceProfileSpecificationModel] = Field(
        default=None, alias="IamInstanceProfile"
    )
    image_id: Optional[str] = Field(default=None, alias="ImageId")
    instance_type: Optional[
        Literal[
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.large",
            "a1.medium",
            "a1.metal",
            "a1.xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c3.large",
            "c3.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.large",
            "c5.metal",
            "c5.xlarge",
            "c5a.12xlarge",
            "c5a.16xlarge",
            "c5a.24xlarge",
            "c5a.2xlarge",
            "c5a.4xlarge",
            "c5a.8xlarge",
            "c5a.large",
            "c5a.xlarge",
            "c5ad.12xlarge",
            "c5ad.16xlarge",
            "c5ad.24xlarge",
            "c5ad.2xlarge",
            "c5ad.4xlarge",
            "c5ad.8xlarge",
            "c5ad.large",
            "c5ad.xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.large",
            "c5d.metal",
            "c5d.xlarge",
            "c5n.18xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.large",
            "c5n.metal",
            "c5n.xlarge",
            "c6a.12xlarge",
            "c6a.16xlarge",
            "c6a.24xlarge",
            "c6a.2xlarge",
            "c6a.32xlarge",
            "c6a.48xlarge",
            "c6a.4xlarge",
            "c6a.8xlarge",
            "c6a.large",
            "c6a.metal",
            "c6a.xlarge",
            "c6g.12xlarge",
            "c6g.16xlarge",
            "c6g.2xlarge",
            "c6g.4xlarge",
            "c6g.8xlarge",
            "c6g.large",
            "c6g.medium",
            "c6g.metal",
            "c6g.xlarge",
            "c6gd.12xlarge",
            "c6gd.16xlarge",
            "c6gd.2xlarge",
            "c6gd.4xlarge",
            "c6gd.8xlarge",
            "c6gd.large",
            "c6gd.medium",
            "c6gd.metal",
            "c6gd.xlarge",
            "c6gn.12xlarge",
            "c6gn.16xlarge",
            "c6gn.2xlarge",
            "c6gn.4xlarge",
            "c6gn.8xlarge",
            "c6gn.large",
            "c6gn.medium",
            "c6gn.xlarge",
            "c6i.12xlarge",
            "c6i.16xlarge",
            "c6i.24xlarge",
            "c6i.2xlarge",
            "c6i.32xlarge",
            "c6i.4xlarge",
            "c6i.8xlarge",
            "c6i.large",
            "c6i.metal",
            "c6i.xlarge",
            "c6id.12xlarge",
            "c6id.16xlarge",
            "c6id.24xlarge",
            "c6id.2xlarge",
            "c6id.32xlarge",
            "c6id.4xlarge",
            "c6id.8xlarge",
            "c6id.large",
            "c6id.metal",
            "c6id.xlarge",
            "c6in.12xlarge",
            "c6in.16xlarge",
            "c6in.24xlarge",
            "c6in.2xlarge",
            "c6in.32xlarge",
            "c6in.4xlarge",
            "c6in.8xlarge",
            "c6in.large",
            "c6in.xlarge",
            "c7g.12xlarge",
            "c7g.16xlarge",
            "c7g.2xlarge",
            "c7g.4xlarge",
            "c7g.8xlarge",
            "c7g.large",
            "c7g.medium",
            "c7g.xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "cg1.4xlarge",
            "cr1.8xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "d2.xlarge",
            "d3.2xlarge",
            "d3.4xlarge",
            "d3.8xlarge",
            "d3.xlarge",
            "d3en.12xlarge",
            "d3en.2xlarge",
            "d3en.4xlarge",
            "d3en.6xlarge",
            "d3en.8xlarge",
            "d3en.xlarge",
            "dl1.24xlarge",
            "f1.16xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.16xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3s.xlarge",
            "g4ad.16xlarge",
            "g4ad.2xlarge",
            "g4ad.4xlarge",
            "g4ad.8xlarge",
            "g4ad.xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.metal",
            "g4dn.xlarge",
            "g5.12xlarge",
            "g5.16xlarge",
            "g5.24xlarge",
            "g5.2xlarge",
            "g5.48xlarge",
            "g5.4xlarge",
            "g5.8xlarge",
            "g5.xlarge",
            "g5g.16xlarge",
            "g5g.2xlarge",
            "g5g.4xlarge",
            "g5g.8xlarge",
            "g5g.metal",
            "g5g.xlarge",
            "h1.16xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "hi1.4xlarge",
            "hpc6a.48xlarge",
            "hpc6id.32xlarge",
            "hs1.8xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i2.xlarge",
            "i3.16xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.large",
            "i3.metal",
            "i3.xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.large",
            "i3en.metal",
            "i3en.xlarge",
            "i4i.16xlarge",
            "i4i.2xlarge",
            "i4i.32xlarge",
            "i4i.4xlarge",
            "i4i.8xlarge",
            "i4i.large",
            "i4i.metal",
            "i4i.xlarge",
            "im4gn.16xlarge",
            "im4gn.2xlarge",
            "im4gn.4xlarge",
            "im4gn.8xlarge",
            "im4gn.large",
            "im4gn.xlarge",
            "inf1.24xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.xlarge",
            "is4gen.2xlarge",
            "is4gen.4xlarge",
            "is4gen.8xlarge",
            "is4gen.large",
            "is4gen.medium",
            "is4gen.xlarge",
            "m1.large",
            "m1.medium",
            "m1.small",
            "m1.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "m2.xlarge",
            "m3.2xlarge",
            "m3.large",
            "m3.medium",
            "m3.xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.large",
            "m4.xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.large",
            "m5.metal",
            "m5.xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.large",
            "m5a.xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.large",
            "m5ad.xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.large",
            "m5d.metal",
            "m5d.xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.large",
            "m5dn.metal",
            "m5dn.xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.large",
            "m5n.metal",
            "m5n.xlarge",
            "m5zn.12xlarge",
            "m5zn.2xlarge",
            "m5zn.3xlarge",
            "m5zn.6xlarge",
            "m5zn.large",
            "m5zn.metal",
            "m5zn.xlarge",
            "m6a.12xlarge",
            "m6a.16xlarge",
            "m6a.24xlarge",
            "m6a.2xlarge",
            "m6a.32xlarge",
            "m6a.48xlarge",
            "m6a.4xlarge",
            "m6a.8xlarge",
            "m6a.large",
            "m6a.metal",
            "m6a.xlarge",
            "m6g.12xlarge",
            "m6g.16xlarge",
            "m6g.2xlarge",
            "m6g.4xlarge",
            "m6g.8xlarge",
            "m6g.large",
            "m6g.medium",
            "m6g.metal",
            "m6g.xlarge",
            "m6gd.12xlarge",
            "m6gd.16xlarge",
            "m6gd.2xlarge",
            "m6gd.4xlarge",
            "m6gd.8xlarge",
            "m6gd.large",
            "m6gd.medium",
            "m6gd.metal",
            "m6gd.xlarge",
            "m6i.12xlarge",
            "m6i.16xlarge",
            "m6i.24xlarge",
            "m6i.2xlarge",
            "m6i.32xlarge",
            "m6i.4xlarge",
            "m6i.8xlarge",
            "m6i.large",
            "m6i.metal",
            "m6i.xlarge",
            "m6id.12xlarge",
            "m6id.16xlarge",
            "m6id.24xlarge",
            "m6id.2xlarge",
            "m6id.32xlarge",
            "m6id.4xlarge",
            "m6id.8xlarge",
            "m6id.large",
            "m6id.metal",
            "m6id.xlarge",
            "m6idn.12xlarge",
            "m6idn.16xlarge",
            "m6idn.24xlarge",
            "m6idn.2xlarge",
            "m6idn.32xlarge",
            "m6idn.4xlarge",
            "m6idn.8xlarge",
            "m6idn.large",
            "m6idn.xlarge",
            "m6in.12xlarge",
            "m6in.16xlarge",
            "m6in.24xlarge",
            "m6in.2xlarge",
            "m6in.32xlarge",
            "m6in.4xlarge",
            "m6in.8xlarge",
            "m6in.large",
            "m6in.xlarge",
            "mac1.metal",
            "mac2.metal",
            "p2.16xlarge",
            "p2.8xlarge",
            "p2.xlarge",
            "p3.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3dn.24xlarge",
            "p4d.24xlarge",
            "p4de.24xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r4.16xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.large",
            "r5.metal",
            "r5.xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.large",
            "r5a.xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.large",
            "r5ad.xlarge",
            "r5b.12xlarge",
            "r5b.16xlarge",
            "r5b.24xlarge",
            "r5b.2xlarge",
            "r5b.4xlarge",
            "r5b.8xlarge",
            "r5b.large",
            "r5b.metal",
            "r5b.xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.large",
            "r5d.metal",
            "r5d.xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.large",
            "r5dn.metal",
            "r5dn.xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.large",
            "r5n.metal",
            "r5n.xlarge",
            "r6a.12xlarge",
            "r6a.16xlarge",
            "r6a.24xlarge",
            "r6a.2xlarge",
            "r6a.32xlarge",
            "r6a.48xlarge",
            "r6a.4xlarge",
            "r6a.8xlarge",
            "r6a.large",
            "r6a.metal",
            "r6a.xlarge",
            "r6g.12xlarge",
            "r6g.16xlarge",
            "r6g.2xlarge",
            "r6g.4xlarge",
            "r6g.8xlarge",
            "r6g.large",
            "r6g.medium",
            "r6g.metal",
            "r6g.xlarge",
            "r6gd.12xlarge",
            "r6gd.16xlarge",
            "r6gd.2xlarge",
            "r6gd.4xlarge",
            "r6gd.8xlarge",
            "r6gd.large",
            "r6gd.medium",
            "r6gd.metal",
            "r6gd.xlarge",
            "r6i.12xlarge",
            "r6i.16xlarge",
            "r6i.24xlarge",
            "r6i.2xlarge",
            "r6i.32xlarge",
            "r6i.4xlarge",
            "r6i.8xlarge",
            "r6i.large",
            "r6i.metal",
            "r6i.xlarge",
            "r6id.12xlarge",
            "r6id.16xlarge",
            "r6id.24xlarge",
            "r6id.2xlarge",
            "r6id.32xlarge",
            "r6id.4xlarge",
            "r6id.8xlarge",
            "r6id.large",
            "r6id.metal",
            "r6id.xlarge",
            "r6idn.12xlarge",
            "r6idn.16xlarge",
            "r6idn.24xlarge",
            "r6idn.2xlarge",
            "r6idn.32xlarge",
            "r6idn.4xlarge",
            "r6idn.8xlarge",
            "r6idn.large",
            "r6idn.xlarge",
            "r6in.12xlarge",
            "r6in.16xlarge",
            "r6in.24xlarge",
            "r6in.2xlarge",
            "r6in.32xlarge",
            "r6in.4xlarge",
            "r6in.8xlarge",
            "r6in.large",
            "r6in.xlarge",
            "t1.micro",
            "t2.2xlarge",
            "t2.large",
            "t2.medium",
            "t2.micro",
            "t2.nano",
            "t2.small",
            "t2.xlarge",
            "t3.2xlarge",
            "t3.large",
            "t3.medium",
            "t3.micro",
            "t3.nano",
            "t3.small",
            "t3.xlarge",
            "t3a.2xlarge",
            "t3a.large",
            "t3a.medium",
            "t3a.micro",
            "t3a.nano",
            "t3a.small",
            "t3a.xlarge",
            "t4g.2xlarge",
            "t4g.large",
            "t4g.medium",
            "t4g.micro",
            "t4g.nano",
            "t4g.small",
            "t4g.xlarge",
            "trn1.2xlarge",
            "trn1.32xlarge",
            "u-12tb1.112xlarge",
            "u-12tb1.metal",
            "u-18tb1.112xlarge",
            "u-18tb1.metal",
            "u-24tb1.112xlarge",
            "u-24tb1.metal",
            "u-3tb1.56xlarge",
            "u-6tb1.112xlarge",
            "u-6tb1.56xlarge",
            "u-6tb1.metal",
            "u-9tb1.112xlarge",
            "u-9tb1.metal",
            "vt1.24xlarge",
            "vt1.3xlarge",
            "vt1.6xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.16xlarge",
            "x1e.2xlarge",
            "x1e.32xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.xlarge",
            "x2gd.12xlarge",
            "x2gd.16xlarge",
            "x2gd.2xlarge",
            "x2gd.4xlarge",
            "x2gd.8xlarge",
            "x2gd.large",
            "x2gd.medium",
            "x2gd.metal",
            "x2gd.xlarge",
            "x2idn.16xlarge",
            "x2idn.24xlarge",
            "x2idn.32xlarge",
            "x2idn.metal",
            "x2iedn.16xlarge",
            "x2iedn.24xlarge",
            "x2iedn.2xlarge",
            "x2iedn.32xlarge",
            "x2iedn.4xlarge",
            "x2iedn.8xlarge",
            "x2iedn.metal",
            "x2iedn.xlarge",
            "x2iezn.12xlarge",
            "x2iezn.2xlarge",
            "x2iezn.4xlarge",
            "x2iezn.6xlarge",
            "x2iezn.8xlarge",
            "x2iezn.metal",
            "z1d.12xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.large",
            "z1d.metal",
            "z1d.xlarge",
        ]
    ] = Field(default=None, alias="InstanceType")
    kernel_id: Optional[str] = Field(default=None, alias="KernelId")
    key_name: Optional[str] = Field(default=None, alias="KeyName")
    monitoring: Optional[SpotFleetMonitoringModel] = Field(
        default=None, alias="Monitoring"
    )
    network_interfaces: Optional[
        List[InstanceNetworkInterfaceSpecificationModel]
    ] = Field(default=None, alias="NetworkInterfaces")
    placement: Optional[SpotPlacementModel] = Field(default=None, alias="Placement")
    ramdisk_id: Optional[str] = Field(default=None, alias="RamdiskId")
    spot_price: Optional[str] = Field(default=None, alias="SpotPrice")
    subnet_id: Optional[str] = Field(default=None, alias="SubnetId")
    user_data: Optional[str] = Field(default=None, alias="UserData")
    weighted_capacity: Optional[float] = Field(default=None, alias="WeightedCapacity")
    tag_specifications: Optional[List[SpotFleetTagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    instance_requirements: Optional[InstanceRequirementsModel] = Field(
        default=None, alias="InstanceRequirements"
    )


class StartInstancesResultModel(BaseModel):
    starting_instances: List[InstanceStateChangeModel] = Field(
        alias="StartingInstances"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class StopInstancesResultModel(BaseModel):
    stopping_instances: List[InstanceStateChangeModel] = Field(
        alias="StoppingInstances"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class TerminateInstancesResultModel(BaseModel):
    terminating_instances: List[InstanceStateChangeModel] = Field(
        alias="TerminatingInstances"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class InstanceStatusModel(BaseModel):
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    outpost_arn: Optional[str] = Field(default=None, alias="OutpostArn")
    events: Optional[List[InstanceStatusEventModel]] = Field(
        default=None, alias="Events"
    )
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    instance_state: Optional[InstanceStateModel] = Field(
        default=None, alias="InstanceState"
    )
    instance_status: Optional[InstanceStatusSummaryModel] = Field(
        default=None, alias="InstanceStatus"
    )
    system_status: Optional[InstanceStatusSummaryModel] = Field(
        default=None, alias="SystemStatus"
    )


class AuthorizeSecurityGroupEgressRequestModel(BaseModel):
    group_id: str = Field(alias="GroupId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    ip_permissions: Optional[Sequence[IpPermissionModel]] = Field(
        default=None, alias="IpPermissions"
    )
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    cidr_ip: Optional[str] = Field(default=None, alias="CidrIp")
    from_port: Optional[int] = Field(default=None, alias="FromPort")
    ip_protocol: Optional[str] = Field(default=None, alias="IpProtocol")
    to_port: Optional[int] = Field(default=None, alias="ToPort")
    source_security_group_name: Optional[str] = Field(
        default=None, alias="SourceSecurityGroupName"
    )
    source_security_group_owner_id: Optional[str] = Field(
        default=None, alias="SourceSecurityGroupOwnerId"
    )


class AuthorizeSecurityGroupEgressRequestSecurityGroupAuthorizeEgressModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    ip_permissions: Optional[Sequence[IpPermissionModel]] = Field(
        default=None, alias="IpPermissions"
    )
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    cidr_ip: Optional[str] = Field(default=None, alias="CidrIp")
    from_port: Optional[int] = Field(default=None, alias="FromPort")
    ip_protocol: Optional[str] = Field(default=None, alias="IpProtocol")
    to_port: Optional[int] = Field(default=None, alias="ToPort")
    source_security_group_name: Optional[str] = Field(
        default=None, alias="SourceSecurityGroupName"
    )
    source_security_group_owner_id: Optional[str] = Field(
        default=None, alias="SourceSecurityGroupOwnerId"
    )


class AuthorizeSecurityGroupIngressRequestModel(BaseModel):
    cidr_ip: Optional[str] = Field(default=None, alias="CidrIp")
    from_port: Optional[int] = Field(default=None, alias="FromPort")
    group_id: Optional[str] = Field(default=None, alias="GroupId")
    group_name: Optional[str] = Field(default=None, alias="GroupName")
    ip_permissions: Optional[Sequence[IpPermissionModel]] = Field(
        default=None, alias="IpPermissions"
    )
    ip_protocol: Optional[str] = Field(default=None, alias="IpProtocol")
    source_security_group_name: Optional[str] = Field(
        default=None, alias="SourceSecurityGroupName"
    )
    source_security_group_owner_id: Optional[str] = Field(
        default=None, alias="SourceSecurityGroupOwnerId"
    )
    to_port: Optional[int] = Field(default=None, alias="ToPort")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class AuthorizeSecurityGroupIngressRequestSecurityGroupAuthorizeIngressModel(BaseModel):
    cidr_ip: Optional[str] = Field(default=None, alias="CidrIp")
    from_port: Optional[int] = Field(default=None, alias="FromPort")
    group_name: Optional[str] = Field(default=None, alias="GroupName")
    ip_permissions: Optional[Sequence[IpPermissionModel]] = Field(
        default=None, alias="IpPermissions"
    )
    ip_protocol: Optional[str] = Field(default=None, alias="IpProtocol")
    source_security_group_name: Optional[str] = Field(
        default=None, alias="SourceSecurityGroupName"
    )
    source_security_group_owner_id: Optional[str] = Field(
        default=None, alias="SourceSecurityGroupOwnerId"
    )
    to_port: Optional[int] = Field(default=None, alias="ToPort")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class RevokeSecurityGroupEgressRequestModel(BaseModel):
    group_id: str = Field(alias="GroupId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    ip_permissions: Optional[Sequence[IpPermissionModel]] = Field(
        default=None, alias="IpPermissions"
    )
    security_group_rule_ids: Optional[Sequence[str]] = Field(
        default=None, alias="SecurityGroupRuleIds"
    )
    cidr_ip: Optional[str] = Field(default=None, alias="CidrIp")
    from_port: Optional[int] = Field(default=None, alias="FromPort")
    ip_protocol: Optional[str] = Field(default=None, alias="IpProtocol")
    to_port: Optional[int] = Field(default=None, alias="ToPort")
    source_security_group_name: Optional[str] = Field(
        default=None, alias="SourceSecurityGroupName"
    )
    source_security_group_owner_id: Optional[str] = Field(
        default=None, alias="SourceSecurityGroupOwnerId"
    )


class RevokeSecurityGroupEgressRequestSecurityGroupRevokeEgressModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    ip_permissions: Optional[Sequence[IpPermissionModel]] = Field(
        default=None, alias="IpPermissions"
    )
    security_group_rule_ids: Optional[Sequence[str]] = Field(
        default=None, alias="SecurityGroupRuleIds"
    )
    cidr_ip: Optional[str] = Field(default=None, alias="CidrIp")
    from_port: Optional[int] = Field(default=None, alias="FromPort")
    ip_protocol: Optional[str] = Field(default=None, alias="IpProtocol")
    to_port: Optional[int] = Field(default=None, alias="ToPort")
    source_security_group_name: Optional[str] = Field(
        default=None, alias="SourceSecurityGroupName"
    )
    source_security_group_owner_id: Optional[str] = Field(
        default=None, alias="SourceSecurityGroupOwnerId"
    )


class RevokeSecurityGroupEgressResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    unknown_ip_permissions: List[IpPermissionModel] = Field(
        alias="UnknownIpPermissions"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class RevokeSecurityGroupIngressRequestModel(BaseModel):
    cidr_ip: Optional[str] = Field(default=None, alias="CidrIp")
    from_port: Optional[int] = Field(default=None, alias="FromPort")
    group_id: Optional[str] = Field(default=None, alias="GroupId")
    group_name: Optional[str] = Field(default=None, alias="GroupName")
    ip_permissions: Optional[Sequence[IpPermissionModel]] = Field(
        default=None, alias="IpPermissions"
    )
    ip_protocol: Optional[str] = Field(default=None, alias="IpProtocol")
    source_security_group_name: Optional[str] = Field(
        default=None, alias="SourceSecurityGroupName"
    )
    source_security_group_owner_id: Optional[str] = Field(
        default=None, alias="SourceSecurityGroupOwnerId"
    )
    to_port: Optional[int] = Field(default=None, alias="ToPort")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    security_group_rule_ids: Optional[Sequence[str]] = Field(
        default=None, alias="SecurityGroupRuleIds"
    )


class RevokeSecurityGroupIngressRequestSecurityGroupRevokeIngressModel(BaseModel):
    cidr_ip: Optional[str] = Field(default=None, alias="CidrIp")
    from_port: Optional[int] = Field(default=None, alias="FromPort")
    group_name: Optional[str] = Field(default=None, alias="GroupName")
    ip_permissions: Optional[Sequence[IpPermissionModel]] = Field(
        default=None, alias="IpPermissions"
    )
    ip_protocol: Optional[str] = Field(default=None, alias="IpProtocol")
    source_security_group_name: Optional[str] = Field(
        default=None, alias="SourceSecurityGroupName"
    )
    source_security_group_owner_id: Optional[str] = Field(
        default=None, alias="SourceSecurityGroupOwnerId"
    )
    to_port: Optional[int] = Field(default=None, alias="ToPort")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    security_group_rule_ids: Optional[Sequence[str]] = Field(
        default=None, alias="SecurityGroupRuleIds"
    )


class RevokeSecurityGroupIngressResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    unknown_ip_permissions: List[IpPermissionModel] = Field(
        alias="UnknownIpPermissions"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class SecurityGroupModel(BaseModel):
    description: Optional[str] = Field(default=None, alias="Description")
    group_name: Optional[str] = Field(default=None, alias="GroupName")
    ip_permissions: Optional[List[IpPermissionModel]] = Field(
        default=None, alias="IpPermissions"
    )
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    group_id: Optional[str] = Field(default=None, alias="GroupId")
    ip_permissions_egress: Optional[List[IpPermissionModel]] = Field(
        default=None, alias="IpPermissionsEgress"
    )
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")


class UpdateSecurityGroupRuleDescriptionsEgressRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    group_id: Optional[str] = Field(default=None, alias="GroupId")
    group_name: Optional[str] = Field(default=None, alias="GroupName")
    ip_permissions: Optional[Sequence[IpPermissionModel]] = Field(
        default=None, alias="IpPermissions"
    )
    security_group_rule_descriptions: Optional[
        Sequence[SecurityGroupRuleDescriptionModel]
    ] = Field(default=None, alias="SecurityGroupRuleDescriptions")


class UpdateSecurityGroupRuleDescriptionsIngressRequestModel(BaseModel):
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    group_id: Optional[str] = Field(default=None, alias="GroupId")
    group_name: Optional[str] = Field(default=None, alias="GroupName")
    ip_permissions: Optional[Sequence[IpPermissionModel]] = Field(
        default=None, alias="IpPermissions"
    )
    security_group_rule_descriptions: Optional[
        Sequence[SecurityGroupRuleDescriptionModel]
    ] = Field(default=None, alias="SecurityGroupRuleDescriptions")


class StaleSecurityGroupModel(BaseModel):
    description: Optional[str] = Field(default=None, alias="Description")
    group_id: Optional[str] = Field(default=None, alias="GroupId")
    group_name: Optional[str] = Field(default=None, alias="GroupName")
    stale_ip_permissions: Optional[List[StaleIpPermissionModel]] = Field(
        default=None, alias="StaleIpPermissions"
    )
    stale_ip_permissions_egress: Optional[List[StaleIpPermissionModel]] = Field(
        default=None, alias="StaleIpPermissionsEgress"
    )
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")


class GetIpamDiscoveredAccountsResultModel(BaseModel):
    ipam_discovered_accounts: List[IpamDiscoveredAccountModel] = Field(
        alias="IpamDiscoveredAccounts"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetIpamDiscoveredResourceCidrsResultModel(BaseModel):
    ipam_discovered_resource_cidrs: List[IpamDiscoveredResourceCidrModel] = Field(
        alias="IpamDiscoveredResourceCidrs"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateIpamPoolResultModel(BaseModel):
    ipam_pool: IpamPoolModel = Field(alias="IpamPool")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteIpamPoolResultModel(BaseModel):
    ipam_pool: IpamPoolModel = Field(alias="IpamPool")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeIpamPoolsResultModel(BaseModel):
    next_token: str = Field(alias="NextToken")
    ipam_pools: List[IpamPoolModel] = Field(alias="IpamPools")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyIpamPoolResultModel(BaseModel):
    ipam_pool: IpamPoolModel = Field(alias="IpamPool")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetIpamResourceCidrsResultModel(BaseModel):
    next_token: str = Field(alias="NextToken")
    ipam_resource_cidrs: List[IpamResourceCidrModel] = Field(alias="IpamResourceCidrs")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyIpamResourceCidrResultModel(BaseModel):
    ipam_resource_cidr: IpamResourceCidrModel = Field(alias="IpamResourceCidr")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateIpamResourceDiscoveryResultModel(BaseModel):
    ipam_resource_discovery: IpamResourceDiscoveryModel = Field(
        alias="IpamResourceDiscovery"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteIpamResourceDiscoveryResultModel(BaseModel):
    ipam_resource_discovery: IpamResourceDiscoveryModel = Field(
        alias="IpamResourceDiscovery"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeIpamResourceDiscoveriesResultModel(BaseModel):
    ipam_resource_discoveries: List[IpamResourceDiscoveryModel] = Field(
        alias="IpamResourceDiscoveries"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyIpamResourceDiscoveryResultModel(BaseModel):
    ipam_resource_discovery: IpamResourceDiscoveryModel = Field(
        alias="IpamResourceDiscovery"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateIpamResultModel(BaseModel):
    ipam: IpamModel = Field(alias="Ipam")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteIpamResultModel(BaseModel):
    ipam: IpamModel = Field(alias="Ipam")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeIpamsResultModel(BaseModel):
    next_token: str = Field(alias="NextToken")
    ipams: List[IpamModel] = Field(alias="Ipams")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyIpamResultModel(BaseModel):
    ipam: IpamModel = Field(alias="Ipam")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeprovisionIpamPoolCidrResultModel(BaseModel):
    ipam_pool_cidr: IpamPoolCidrModel = Field(alias="IpamPoolCidr")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetIpamPoolCidrsResultModel(BaseModel):
    ipam_pool_cidrs: List[IpamPoolCidrModel] = Field(alias="IpamPoolCidrs")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ProvisionIpamPoolCidrResultModel(BaseModel):
    ipam_pool_cidr: IpamPoolCidrModel = Field(alias="IpamPoolCidr")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeIpv6PoolsResultModel(BaseModel):
    ipv6_pools: List[Ipv6PoolModel] = Field(alias="Ipv6Pools")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class RequestLaunchTemplateDataModel(BaseModel):
    kernel_id: Optional[str] = Field(default=None, alias="KernelId")
    ebs_optimized: Optional[bool] = Field(default=None, alias="EbsOptimized")
    iam_instance_profile: Optional[
        LaunchTemplateIamInstanceProfileSpecificationRequestModel
    ] = Field(default=None, alias="IamInstanceProfile")
    block_device_mappings: Optional[
        Sequence[LaunchTemplateBlockDeviceMappingRequestModel]
    ] = Field(default=None, alias="BlockDeviceMappings")
    network_interfaces: Optional[
        Sequence[LaunchTemplateInstanceNetworkInterfaceSpecificationRequestModel]
    ] = Field(default=None, alias="NetworkInterfaces")
    image_id: Optional[str] = Field(default=None, alias="ImageId")
    instance_type: Optional[
        Literal[
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.large",
            "a1.medium",
            "a1.metal",
            "a1.xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c3.large",
            "c3.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.large",
            "c5.metal",
            "c5.xlarge",
            "c5a.12xlarge",
            "c5a.16xlarge",
            "c5a.24xlarge",
            "c5a.2xlarge",
            "c5a.4xlarge",
            "c5a.8xlarge",
            "c5a.large",
            "c5a.xlarge",
            "c5ad.12xlarge",
            "c5ad.16xlarge",
            "c5ad.24xlarge",
            "c5ad.2xlarge",
            "c5ad.4xlarge",
            "c5ad.8xlarge",
            "c5ad.large",
            "c5ad.xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.large",
            "c5d.metal",
            "c5d.xlarge",
            "c5n.18xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.large",
            "c5n.metal",
            "c5n.xlarge",
            "c6a.12xlarge",
            "c6a.16xlarge",
            "c6a.24xlarge",
            "c6a.2xlarge",
            "c6a.32xlarge",
            "c6a.48xlarge",
            "c6a.4xlarge",
            "c6a.8xlarge",
            "c6a.large",
            "c6a.metal",
            "c6a.xlarge",
            "c6g.12xlarge",
            "c6g.16xlarge",
            "c6g.2xlarge",
            "c6g.4xlarge",
            "c6g.8xlarge",
            "c6g.large",
            "c6g.medium",
            "c6g.metal",
            "c6g.xlarge",
            "c6gd.12xlarge",
            "c6gd.16xlarge",
            "c6gd.2xlarge",
            "c6gd.4xlarge",
            "c6gd.8xlarge",
            "c6gd.large",
            "c6gd.medium",
            "c6gd.metal",
            "c6gd.xlarge",
            "c6gn.12xlarge",
            "c6gn.16xlarge",
            "c6gn.2xlarge",
            "c6gn.4xlarge",
            "c6gn.8xlarge",
            "c6gn.large",
            "c6gn.medium",
            "c6gn.xlarge",
            "c6i.12xlarge",
            "c6i.16xlarge",
            "c6i.24xlarge",
            "c6i.2xlarge",
            "c6i.32xlarge",
            "c6i.4xlarge",
            "c6i.8xlarge",
            "c6i.large",
            "c6i.metal",
            "c6i.xlarge",
            "c6id.12xlarge",
            "c6id.16xlarge",
            "c6id.24xlarge",
            "c6id.2xlarge",
            "c6id.32xlarge",
            "c6id.4xlarge",
            "c6id.8xlarge",
            "c6id.large",
            "c6id.metal",
            "c6id.xlarge",
            "c6in.12xlarge",
            "c6in.16xlarge",
            "c6in.24xlarge",
            "c6in.2xlarge",
            "c6in.32xlarge",
            "c6in.4xlarge",
            "c6in.8xlarge",
            "c6in.large",
            "c6in.xlarge",
            "c7g.12xlarge",
            "c7g.16xlarge",
            "c7g.2xlarge",
            "c7g.4xlarge",
            "c7g.8xlarge",
            "c7g.large",
            "c7g.medium",
            "c7g.xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "cg1.4xlarge",
            "cr1.8xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "d2.xlarge",
            "d3.2xlarge",
            "d3.4xlarge",
            "d3.8xlarge",
            "d3.xlarge",
            "d3en.12xlarge",
            "d3en.2xlarge",
            "d3en.4xlarge",
            "d3en.6xlarge",
            "d3en.8xlarge",
            "d3en.xlarge",
            "dl1.24xlarge",
            "f1.16xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.16xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3s.xlarge",
            "g4ad.16xlarge",
            "g4ad.2xlarge",
            "g4ad.4xlarge",
            "g4ad.8xlarge",
            "g4ad.xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.metal",
            "g4dn.xlarge",
            "g5.12xlarge",
            "g5.16xlarge",
            "g5.24xlarge",
            "g5.2xlarge",
            "g5.48xlarge",
            "g5.4xlarge",
            "g5.8xlarge",
            "g5.xlarge",
            "g5g.16xlarge",
            "g5g.2xlarge",
            "g5g.4xlarge",
            "g5g.8xlarge",
            "g5g.metal",
            "g5g.xlarge",
            "h1.16xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "hi1.4xlarge",
            "hpc6a.48xlarge",
            "hpc6id.32xlarge",
            "hs1.8xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i2.xlarge",
            "i3.16xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.large",
            "i3.metal",
            "i3.xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.large",
            "i3en.metal",
            "i3en.xlarge",
            "i4i.16xlarge",
            "i4i.2xlarge",
            "i4i.32xlarge",
            "i4i.4xlarge",
            "i4i.8xlarge",
            "i4i.large",
            "i4i.metal",
            "i4i.xlarge",
            "im4gn.16xlarge",
            "im4gn.2xlarge",
            "im4gn.4xlarge",
            "im4gn.8xlarge",
            "im4gn.large",
            "im4gn.xlarge",
            "inf1.24xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.xlarge",
            "is4gen.2xlarge",
            "is4gen.4xlarge",
            "is4gen.8xlarge",
            "is4gen.large",
            "is4gen.medium",
            "is4gen.xlarge",
            "m1.large",
            "m1.medium",
            "m1.small",
            "m1.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "m2.xlarge",
            "m3.2xlarge",
            "m3.large",
            "m3.medium",
            "m3.xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.large",
            "m4.xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.large",
            "m5.metal",
            "m5.xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.large",
            "m5a.xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.large",
            "m5ad.xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.large",
            "m5d.metal",
            "m5d.xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.large",
            "m5dn.metal",
            "m5dn.xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.large",
            "m5n.metal",
            "m5n.xlarge",
            "m5zn.12xlarge",
            "m5zn.2xlarge",
            "m5zn.3xlarge",
            "m5zn.6xlarge",
            "m5zn.large",
            "m5zn.metal",
            "m5zn.xlarge",
            "m6a.12xlarge",
            "m6a.16xlarge",
            "m6a.24xlarge",
            "m6a.2xlarge",
            "m6a.32xlarge",
            "m6a.48xlarge",
            "m6a.4xlarge",
            "m6a.8xlarge",
            "m6a.large",
            "m6a.metal",
            "m6a.xlarge",
            "m6g.12xlarge",
            "m6g.16xlarge",
            "m6g.2xlarge",
            "m6g.4xlarge",
            "m6g.8xlarge",
            "m6g.large",
            "m6g.medium",
            "m6g.metal",
            "m6g.xlarge",
            "m6gd.12xlarge",
            "m6gd.16xlarge",
            "m6gd.2xlarge",
            "m6gd.4xlarge",
            "m6gd.8xlarge",
            "m6gd.large",
            "m6gd.medium",
            "m6gd.metal",
            "m6gd.xlarge",
            "m6i.12xlarge",
            "m6i.16xlarge",
            "m6i.24xlarge",
            "m6i.2xlarge",
            "m6i.32xlarge",
            "m6i.4xlarge",
            "m6i.8xlarge",
            "m6i.large",
            "m6i.metal",
            "m6i.xlarge",
            "m6id.12xlarge",
            "m6id.16xlarge",
            "m6id.24xlarge",
            "m6id.2xlarge",
            "m6id.32xlarge",
            "m6id.4xlarge",
            "m6id.8xlarge",
            "m6id.large",
            "m6id.metal",
            "m6id.xlarge",
            "m6idn.12xlarge",
            "m6idn.16xlarge",
            "m6idn.24xlarge",
            "m6idn.2xlarge",
            "m6idn.32xlarge",
            "m6idn.4xlarge",
            "m6idn.8xlarge",
            "m6idn.large",
            "m6idn.xlarge",
            "m6in.12xlarge",
            "m6in.16xlarge",
            "m6in.24xlarge",
            "m6in.2xlarge",
            "m6in.32xlarge",
            "m6in.4xlarge",
            "m6in.8xlarge",
            "m6in.large",
            "m6in.xlarge",
            "mac1.metal",
            "mac2.metal",
            "p2.16xlarge",
            "p2.8xlarge",
            "p2.xlarge",
            "p3.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3dn.24xlarge",
            "p4d.24xlarge",
            "p4de.24xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r4.16xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.large",
            "r5.metal",
            "r5.xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.large",
            "r5a.xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.large",
            "r5ad.xlarge",
            "r5b.12xlarge",
            "r5b.16xlarge",
            "r5b.24xlarge",
            "r5b.2xlarge",
            "r5b.4xlarge",
            "r5b.8xlarge",
            "r5b.large",
            "r5b.metal",
            "r5b.xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.large",
            "r5d.metal",
            "r5d.xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.large",
            "r5dn.metal",
            "r5dn.xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.large",
            "r5n.metal",
            "r5n.xlarge",
            "r6a.12xlarge",
            "r6a.16xlarge",
            "r6a.24xlarge",
            "r6a.2xlarge",
            "r6a.32xlarge",
            "r6a.48xlarge",
            "r6a.4xlarge",
            "r6a.8xlarge",
            "r6a.large",
            "r6a.metal",
            "r6a.xlarge",
            "r6g.12xlarge",
            "r6g.16xlarge",
            "r6g.2xlarge",
            "r6g.4xlarge",
            "r6g.8xlarge",
            "r6g.large",
            "r6g.medium",
            "r6g.metal",
            "r6g.xlarge",
            "r6gd.12xlarge",
            "r6gd.16xlarge",
            "r6gd.2xlarge",
            "r6gd.4xlarge",
            "r6gd.8xlarge",
            "r6gd.large",
            "r6gd.medium",
            "r6gd.metal",
            "r6gd.xlarge",
            "r6i.12xlarge",
            "r6i.16xlarge",
            "r6i.24xlarge",
            "r6i.2xlarge",
            "r6i.32xlarge",
            "r6i.4xlarge",
            "r6i.8xlarge",
            "r6i.large",
            "r6i.metal",
            "r6i.xlarge",
            "r6id.12xlarge",
            "r6id.16xlarge",
            "r6id.24xlarge",
            "r6id.2xlarge",
            "r6id.32xlarge",
            "r6id.4xlarge",
            "r6id.8xlarge",
            "r6id.large",
            "r6id.metal",
            "r6id.xlarge",
            "r6idn.12xlarge",
            "r6idn.16xlarge",
            "r6idn.24xlarge",
            "r6idn.2xlarge",
            "r6idn.32xlarge",
            "r6idn.4xlarge",
            "r6idn.8xlarge",
            "r6idn.large",
            "r6idn.xlarge",
            "r6in.12xlarge",
            "r6in.16xlarge",
            "r6in.24xlarge",
            "r6in.2xlarge",
            "r6in.32xlarge",
            "r6in.4xlarge",
            "r6in.8xlarge",
            "r6in.large",
            "r6in.xlarge",
            "t1.micro",
            "t2.2xlarge",
            "t2.large",
            "t2.medium",
            "t2.micro",
            "t2.nano",
            "t2.small",
            "t2.xlarge",
            "t3.2xlarge",
            "t3.large",
            "t3.medium",
            "t3.micro",
            "t3.nano",
            "t3.small",
            "t3.xlarge",
            "t3a.2xlarge",
            "t3a.large",
            "t3a.medium",
            "t3a.micro",
            "t3a.nano",
            "t3a.small",
            "t3a.xlarge",
            "t4g.2xlarge",
            "t4g.large",
            "t4g.medium",
            "t4g.micro",
            "t4g.nano",
            "t4g.small",
            "t4g.xlarge",
            "trn1.2xlarge",
            "trn1.32xlarge",
            "u-12tb1.112xlarge",
            "u-12tb1.metal",
            "u-18tb1.112xlarge",
            "u-18tb1.metal",
            "u-24tb1.112xlarge",
            "u-24tb1.metal",
            "u-3tb1.56xlarge",
            "u-6tb1.112xlarge",
            "u-6tb1.56xlarge",
            "u-6tb1.metal",
            "u-9tb1.112xlarge",
            "u-9tb1.metal",
            "vt1.24xlarge",
            "vt1.3xlarge",
            "vt1.6xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.16xlarge",
            "x1e.2xlarge",
            "x1e.32xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.xlarge",
            "x2gd.12xlarge",
            "x2gd.16xlarge",
            "x2gd.2xlarge",
            "x2gd.4xlarge",
            "x2gd.8xlarge",
            "x2gd.large",
            "x2gd.medium",
            "x2gd.metal",
            "x2gd.xlarge",
            "x2idn.16xlarge",
            "x2idn.24xlarge",
            "x2idn.32xlarge",
            "x2idn.metal",
            "x2iedn.16xlarge",
            "x2iedn.24xlarge",
            "x2iedn.2xlarge",
            "x2iedn.32xlarge",
            "x2iedn.4xlarge",
            "x2iedn.8xlarge",
            "x2iedn.metal",
            "x2iedn.xlarge",
            "x2iezn.12xlarge",
            "x2iezn.2xlarge",
            "x2iezn.4xlarge",
            "x2iezn.6xlarge",
            "x2iezn.8xlarge",
            "x2iezn.metal",
            "z1d.12xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.large",
            "z1d.metal",
            "z1d.xlarge",
        ]
    ] = Field(default=None, alias="InstanceType")
    key_name: Optional[str] = Field(default=None, alias="KeyName")
    monitoring: Optional[LaunchTemplatesMonitoringRequestModel] = Field(
        default=None, alias="Monitoring"
    )
    placement: Optional[LaunchTemplatePlacementRequestModel] = Field(
        default=None, alias="Placement"
    )
    ram_disk_id: Optional[str] = Field(default=None, alias="RamDiskId")
    disable_api_termination: Optional[bool] = Field(
        default=None, alias="DisableApiTermination"
    )
    instance_initiated_shutdown_behavior: Optional[
        Literal["stop", "terminate"]
    ] = Field(default=None, alias="InstanceInitiatedShutdownBehavior")
    user_data: Optional[str] = Field(default=None, alias="UserData")
    tag_specifications: Optional[
        Sequence[LaunchTemplateTagSpecificationRequestModel]
    ] = Field(default=None, alias="TagSpecifications")
    elastic_gpu_specifications: Optional[
        Sequence[ElasticGpuSpecificationModel]
    ] = Field(default=None, alias="ElasticGpuSpecifications")
    elastic_inference_accelerators: Optional[
        Sequence[LaunchTemplateElasticInferenceAcceleratorModel]
    ] = Field(default=None, alias="ElasticInferenceAccelerators")
    security_group_ids: Optional[Sequence[str]] = Field(
        default=None, alias="SecurityGroupIds"
    )
    security_groups: Optional[Sequence[str]] = Field(
        default=None, alias="SecurityGroups"
    )
    instance_market_options: Optional[
        LaunchTemplateInstanceMarketOptionsRequestModel
    ] = Field(default=None, alias="InstanceMarketOptions")
    credit_specification: Optional[CreditSpecificationRequestModel] = Field(
        default=None, alias="CreditSpecification"
    )
    cpu_options: Optional[LaunchTemplateCpuOptionsRequestModel] = Field(
        default=None, alias="CpuOptions"
    )
    capacity_reservation_specification: Optional[
        LaunchTemplateCapacityReservationSpecificationRequestModel
    ] = Field(default=None, alias="CapacityReservationSpecification")
    license_specifications: Optional[
        Sequence[LaunchTemplateLicenseConfigurationRequestModel]
    ] = Field(default=None, alias="LicenseSpecifications")
    hibernation_options: Optional[LaunchTemplateHibernationOptionsRequestModel] = Field(
        default=None, alias="HibernationOptions"
    )
    metadata_options: Optional[
        LaunchTemplateInstanceMetadataOptionsRequestModel
    ] = Field(default=None, alias="MetadataOptions")
    enclave_options: Optional[LaunchTemplateEnclaveOptionsRequestModel] = Field(
        default=None, alias="EnclaveOptions"
    )
    instance_requirements: Optional[InstanceRequirementsRequestModel] = Field(
        default=None, alias="InstanceRequirements"
    )
    private_dns_name_options: Optional[
        LaunchTemplatePrivateDnsNameOptionsRequestModel
    ] = Field(default=None, alias="PrivateDnsNameOptions")
    maintenance_options: Optional[
        LaunchTemplateInstanceMaintenanceOptionsRequestModel
    ] = Field(default=None, alias="MaintenanceOptions")
    disable_api_stop: Optional[bool] = Field(default=None, alias="DisableApiStop")


class ResponseLaunchTemplateDataModel(BaseModel):
    kernel_id: Optional[str] = Field(default=None, alias="KernelId")
    ebs_optimized: Optional[bool] = Field(default=None, alias="EbsOptimized")
    iam_instance_profile: Optional[
        LaunchTemplateIamInstanceProfileSpecificationModel
    ] = Field(default=None, alias="IamInstanceProfile")
    block_device_mappings: Optional[
        List[LaunchTemplateBlockDeviceMappingModel]
    ] = Field(default=None, alias="BlockDeviceMappings")
    network_interfaces: Optional[
        List[LaunchTemplateInstanceNetworkInterfaceSpecificationModel]
    ] = Field(default=None, alias="NetworkInterfaces")
    image_id: Optional[str] = Field(default=None, alias="ImageId")
    instance_type: Optional[
        Literal[
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.large",
            "a1.medium",
            "a1.metal",
            "a1.xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c3.large",
            "c3.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.large",
            "c5.metal",
            "c5.xlarge",
            "c5a.12xlarge",
            "c5a.16xlarge",
            "c5a.24xlarge",
            "c5a.2xlarge",
            "c5a.4xlarge",
            "c5a.8xlarge",
            "c5a.large",
            "c5a.xlarge",
            "c5ad.12xlarge",
            "c5ad.16xlarge",
            "c5ad.24xlarge",
            "c5ad.2xlarge",
            "c5ad.4xlarge",
            "c5ad.8xlarge",
            "c5ad.large",
            "c5ad.xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.large",
            "c5d.metal",
            "c5d.xlarge",
            "c5n.18xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.large",
            "c5n.metal",
            "c5n.xlarge",
            "c6a.12xlarge",
            "c6a.16xlarge",
            "c6a.24xlarge",
            "c6a.2xlarge",
            "c6a.32xlarge",
            "c6a.48xlarge",
            "c6a.4xlarge",
            "c6a.8xlarge",
            "c6a.large",
            "c6a.metal",
            "c6a.xlarge",
            "c6g.12xlarge",
            "c6g.16xlarge",
            "c6g.2xlarge",
            "c6g.4xlarge",
            "c6g.8xlarge",
            "c6g.large",
            "c6g.medium",
            "c6g.metal",
            "c6g.xlarge",
            "c6gd.12xlarge",
            "c6gd.16xlarge",
            "c6gd.2xlarge",
            "c6gd.4xlarge",
            "c6gd.8xlarge",
            "c6gd.large",
            "c6gd.medium",
            "c6gd.metal",
            "c6gd.xlarge",
            "c6gn.12xlarge",
            "c6gn.16xlarge",
            "c6gn.2xlarge",
            "c6gn.4xlarge",
            "c6gn.8xlarge",
            "c6gn.large",
            "c6gn.medium",
            "c6gn.xlarge",
            "c6i.12xlarge",
            "c6i.16xlarge",
            "c6i.24xlarge",
            "c6i.2xlarge",
            "c6i.32xlarge",
            "c6i.4xlarge",
            "c6i.8xlarge",
            "c6i.large",
            "c6i.metal",
            "c6i.xlarge",
            "c6id.12xlarge",
            "c6id.16xlarge",
            "c6id.24xlarge",
            "c6id.2xlarge",
            "c6id.32xlarge",
            "c6id.4xlarge",
            "c6id.8xlarge",
            "c6id.large",
            "c6id.metal",
            "c6id.xlarge",
            "c6in.12xlarge",
            "c6in.16xlarge",
            "c6in.24xlarge",
            "c6in.2xlarge",
            "c6in.32xlarge",
            "c6in.4xlarge",
            "c6in.8xlarge",
            "c6in.large",
            "c6in.xlarge",
            "c7g.12xlarge",
            "c7g.16xlarge",
            "c7g.2xlarge",
            "c7g.4xlarge",
            "c7g.8xlarge",
            "c7g.large",
            "c7g.medium",
            "c7g.xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "cg1.4xlarge",
            "cr1.8xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "d2.xlarge",
            "d3.2xlarge",
            "d3.4xlarge",
            "d3.8xlarge",
            "d3.xlarge",
            "d3en.12xlarge",
            "d3en.2xlarge",
            "d3en.4xlarge",
            "d3en.6xlarge",
            "d3en.8xlarge",
            "d3en.xlarge",
            "dl1.24xlarge",
            "f1.16xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.16xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3s.xlarge",
            "g4ad.16xlarge",
            "g4ad.2xlarge",
            "g4ad.4xlarge",
            "g4ad.8xlarge",
            "g4ad.xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.metal",
            "g4dn.xlarge",
            "g5.12xlarge",
            "g5.16xlarge",
            "g5.24xlarge",
            "g5.2xlarge",
            "g5.48xlarge",
            "g5.4xlarge",
            "g5.8xlarge",
            "g5.xlarge",
            "g5g.16xlarge",
            "g5g.2xlarge",
            "g5g.4xlarge",
            "g5g.8xlarge",
            "g5g.metal",
            "g5g.xlarge",
            "h1.16xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "hi1.4xlarge",
            "hpc6a.48xlarge",
            "hpc6id.32xlarge",
            "hs1.8xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i2.xlarge",
            "i3.16xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.large",
            "i3.metal",
            "i3.xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.large",
            "i3en.metal",
            "i3en.xlarge",
            "i4i.16xlarge",
            "i4i.2xlarge",
            "i4i.32xlarge",
            "i4i.4xlarge",
            "i4i.8xlarge",
            "i4i.large",
            "i4i.metal",
            "i4i.xlarge",
            "im4gn.16xlarge",
            "im4gn.2xlarge",
            "im4gn.4xlarge",
            "im4gn.8xlarge",
            "im4gn.large",
            "im4gn.xlarge",
            "inf1.24xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.xlarge",
            "is4gen.2xlarge",
            "is4gen.4xlarge",
            "is4gen.8xlarge",
            "is4gen.large",
            "is4gen.medium",
            "is4gen.xlarge",
            "m1.large",
            "m1.medium",
            "m1.small",
            "m1.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "m2.xlarge",
            "m3.2xlarge",
            "m3.large",
            "m3.medium",
            "m3.xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.large",
            "m4.xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.large",
            "m5.metal",
            "m5.xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.large",
            "m5a.xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.large",
            "m5ad.xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.large",
            "m5d.metal",
            "m5d.xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.large",
            "m5dn.metal",
            "m5dn.xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.large",
            "m5n.metal",
            "m5n.xlarge",
            "m5zn.12xlarge",
            "m5zn.2xlarge",
            "m5zn.3xlarge",
            "m5zn.6xlarge",
            "m5zn.large",
            "m5zn.metal",
            "m5zn.xlarge",
            "m6a.12xlarge",
            "m6a.16xlarge",
            "m6a.24xlarge",
            "m6a.2xlarge",
            "m6a.32xlarge",
            "m6a.48xlarge",
            "m6a.4xlarge",
            "m6a.8xlarge",
            "m6a.large",
            "m6a.metal",
            "m6a.xlarge",
            "m6g.12xlarge",
            "m6g.16xlarge",
            "m6g.2xlarge",
            "m6g.4xlarge",
            "m6g.8xlarge",
            "m6g.large",
            "m6g.medium",
            "m6g.metal",
            "m6g.xlarge",
            "m6gd.12xlarge",
            "m6gd.16xlarge",
            "m6gd.2xlarge",
            "m6gd.4xlarge",
            "m6gd.8xlarge",
            "m6gd.large",
            "m6gd.medium",
            "m6gd.metal",
            "m6gd.xlarge",
            "m6i.12xlarge",
            "m6i.16xlarge",
            "m6i.24xlarge",
            "m6i.2xlarge",
            "m6i.32xlarge",
            "m6i.4xlarge",
            "m6i.8xlarge",
            "m6i.large",
            "m6i.metal",
            "m6i.xlarge",
            "m6id.12xlarge",
            "m6id.16xlarge",
            "m6id.24xlarge",
            "m6id.2xlarge",
            "m6id.32xlarge",
            "m6id.4xlarge",
            "m6id.8xlarge",
            "m6id.large",
            "m6id.metal",
            "m6id.xlarge",
            "m6idn.12xlarge",
            "m6idn.16xlarge",
            "m6idn.24xlarge",
            "m6idn.2xlarge",
            "m6idn.32xlarge",
            "m6idn.4xlarge",
            "m6idn.8xlarge",
            "m6idn.large",
            "m6idn.xlarge",
            "m6in.12xlarge",
            "m6in.16xlarge",
            "m6in.24xlarge",
            "m6in.2xlarge",
            "m6in.32xlarge",
            "m6in.4xlarge",
            "m6in.8xlarge",
            "m6in.large",
            "m6in.xlarge",
            "mac1.metal",
            "mac2.metal",
            "p2.16xlarge",
            "p2.8xlarge",
            "p2.xlarge",
            "p3.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3dn.24xlarge",
            "p4d.24xlarge",
            "p4de.24xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r4.16xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.large",
            "r5.metal",
            "r5.xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.large",
            "r5a.xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.large",
            "r5ad.xlarge",
            "r5b.12xlarge",
            "r5b.16xlarge",
            "r5b.24xlarge",
            "r5b.2xlarge",
            "r5b.4xlarge",
            "r5b.8xlarge",
            "r5b.large",
            "r5b.metal",
            "r5b.xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.large",
            "r5d.metal",
            "r5d.xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.large",
            "r5dn.metal",
            "r5dn.xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.large",
            "r5n.metal",
            "r5n.xlarge",
            "r6a.12xlarge",
            "r6a.16xlarge",
            "r6a.24xlarge",
            "r6a.2xlarge",
            "r6a.32xlarge",
            "r6a.48xlarge",
            "r6a.4xlarge",
            "r6a.8xlarge",
            "r6a.large",
            "r6a.metal",
            "r6a.xlarge",
            "r6g.12xlarge",
            "r6g.16xlarge",
            "r6g.2xlarge",
            "r6g.4xlarge",
            "r6g.8xlarge",
            "r6g.large",
            "r6g.medium",
            "r6g.metal",
            "r6g.xlarge",
            "r6gd.12xlarge",
            "r6gd.16xlarge",
            "r6gd.2xlarge",
            "r6gd.4xlarge",
            "r6gd.8xlarge",
            "r6gd.large",
            "r6gd.medium",
            "r6gd.metal",
            "r6gd.xlarge",
            "r6i.12xlarge",
            "r6i.16xlarge",
            "r6i.24xlarge",
            "r6i.2xlarge",
            "r6i.32xlarge",
            "r6i.4xlarge",
            "r6i.8xlarge",
            "r6i.large",
            "r6i.metal",
            "r6i.xlarge",
            "r6id.12xlarge",
            "r6id.16xlarge",
            "r6id.24xlarge",
            "r6id.2xlarge",
            "r6id.32xlarge",
            "r6id.4xlarge",
            "r6id.8xlarge",
            "r6id.large",
            "r6id.metal",
            "r6id.xlarge",
            "r6idn.12xlarge",
            "r6idn.16xlarge",
            "r6idn.24xlarge",
            "r6idn.2xlarge",
            "r6idn.32xlarge",
            "r6idn.4xlarge",
            "r6idn.8xlarge",
            "r6idn.large",
            "r6idn.xlarge",
            "r6in.12xlarge",
            "r6in.16xlarge",
            "r6in.24xlarge",
            "r6in.2xlarge",
            "r6in.32xlarge",
            "r6in.4xlarge",
            "r6in.8xlarge",
            "r6in.large",
            "r6in.xlarge",
            "t1.micro",
            "t2.2xlarge",
            "t2.large",
            "t2.medium",
            "t2.micro",
            "t2.nano",
            "t2.small",
            "t2.xlarge",
            "t3.2xlarge",
            "t3.large",
            "t3.medium",
            "t3.micro",
            "t3.nano",
            "t3.small",
            "t3.xlarge",
            "t3a.2xlarge",
            "t3a.large",
            "t3a.medium",
            "t3a.micro",
            "t3a.nano",
            "t3a.small",
            "t3a.xlarge",
            "t4g.2xlarge",
            "t4g.large",
            "t4g.medium",
            "t4g.micro",
            "t4g.nano",
            "t4g.small",
            "t4g.xlarge",
            "trn1.2xlarge",
            "trn1.32xlarge",
            "u-12tb1.112xlarge",
            "u-12tb1.metal",
            "u-18tb1.112xlarge",
            "u-18tb1.metal",
            "u-24tb1.112xlarge",
            "u-24tb1.metal",
            "u-3tb1.56xlarge",
            "u-6tb1.112xlarge",
            "u-6tb1.56xlarge",
            "u-6tb1.metal",
            "u-9tb1.112xlarge",
            "u-9tb1.metal",
            "vt1.24xlarge",
            "vt1.3xlarge",
            "vt1.6xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.16xlarge",
            "x1e.2xlarge",
            "x1e.32xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.xlarge",
            "x2gd.12xlarge",
            "x2gd.16xlarge",
            "x2gd.2xlarge",
            "x2gd.4xlarge",
            "x2gd.8xlarge",
            "x2gd.large",
            "x2gd.medium",
            "x2gd.metal",
            "x2gd.xlarge",
            "x2idn.16xlarge",
            "x2idn.24xlarge",
            "x2idn.32xlarge",
            "x2idn.metal",
            "x2iedn.16xlarge",
            "x2iedn.24xlarge",
            "x2iedn.2xlarge",
            "x2iedn.32xlarge",
            "x2iedn.4xlarge",
            "x2iedn.8xlarge",
            "x2iedn.metal",
            "x2iedn.xlarge",
            "x2iezn.12xlarge",
            "x2iezn.2xlarge",
            "x2iezn.4xlarge",
            "x2iezn.6xlarge",
            "x2iezn.8xlarge",
            "x2iezn.metal",
            "z1d.12xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.large",
            "z1d.metal",
            "z1d.xlarge",
        ]
    ] = Field(default=None, alias="InstanceType")
    key_name: Optional[str] = Field(default=None, alias="KeyName")
    monitoring: Optional[LaunchTemplatesMonitoringModel] = Field(
        default=None, alias="Monitoring"
    )
    placement: Optional[LaunchTemplatePlacementModel] = Field(
        default=None, alias="Placement"
    )
    ram_disk_id: Optional[str] = Field(default=None, alias="RamDiskId")
    disable_api_termination: Optional[bool] = Field(
        default=None, alias="DisableApiTermination"
    )
    instance_initiated_shutdown_behavior: Optional[
        Literal["stop", "terminate"]
    ] = Field(default=None, alias="InstanceInitiatedShutdownBehavior")
    user_data: Optional[str] = Field(default=None, alias="UserData")
    tag_specifications: Optional[List[LaunchTemplateTagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    elastic_gpu_specifications: Optional[
        List[ElasticGpuSpecificationResponseModel]
    ] = Field(default=None, alias="ElasticGpuSpecifications")
    elastic_inference_accelerators: Optional[
        List[LaunchTemplateElasticInferenceAcceleratorResponseModel]
    ] = Field(default=None, alias="ElasticInferenceAccelerators")
    security_group_ids: Optional[List[str]] = Field(
        default=None, alias="SecurityGroupIds"
    )
    security_groups: Optional[List[str]] = Field(default=None, alias="SecurityGroups")
    instance_market_options: Optional[LaunchTemplateInstanceMarketOptionsModel] = Field(
        default=None, alias="InstanceMarketOptions"
    )
    credit_specification: Optional[CreditSpecificationModel] = Field(
        default=None, alias="CreditSpecification"
    )
    cpu_options: Optional[LaunchTemplateCpuOptionsModel] = Field(
        default=None, alias="CpuOptions"
    )
    capacity_reservation_specification: Optional[
        LaunchTemplateCapacityReservationSpecificationResponseModel
    ] = Field(default=None, alias="CapacityReservationSpecification")
    license_specifications: Optional[
        List[LaunchTemplateLicenseConfigurationModel]
    ] = Field(default=None, alias="LicenseSpecifications")
    hibernation_options: Optional[LaunchTemplateHibernationOptionsModel] = Field(
        default=None, alias="HibernationOptions"
    )
    metadata_options: Optional[LaunchTemplateInstanceMetadataOptionsModel] = Field(
        default=None, alias="MetadataOptions"
    )
    enclave_options: Optional[LaunchTemplateEnclaveOptionsModel] = Field(
        default=None, alias="EnclaveOptions"
    )
    instance_requirements: Optional[InstanceRequirementsModel] = Field(
        default=None, alias="InstanceRequirements"
    )
    private_dns_name_options: Optional[
        LaunchTemplatePrivateDnsNameOptionsModel
    ] = Field(default=None, alias="PrivateDnsNameOptions")
    maintenance_options: Optional[
        LaunchTemplateInstanceMaintenanceOptionsModel
    ] = Field(default=None, alias="MaintenanceOptions")
    disable_api_stop: Optional[bool] = Field(default=None, alias="DisableApiStop")


class ModifyFpgaImageAttributeRequestModel(BaseModel):
    fpga_image_id: str = Field(alias="FpgaImageId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    attribute: Optional[
        Literal["description", "loadPermission", "name", "productCodes"]
    ] = Field(default=None, alias="Attribute")
    operation_type: Optional[Literal["add", "remove"]] = Field(
        default=None, alias="OperationType"
    )
    user_ids: Optional[Sequence[str]] = Field(default=None, alias="UserIds")
    user_groups: Optional[Sequence[str]] = Field(default=None, alias="UserGroups")
    product_codes: Optional[Sequence[str]] = Field(default=None, alias="ProductCodes")
    load_permission: Optional[LoadPermissionModificationsModel] = Field(
        default=None, alias="LoadPermission"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    name: Optional[str] = Field(default=None, alias="Name")


class ReservedInstancesModificationModel(BaseModel):
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    create_date: Optional[datetime] = Field(default=None, alias="CreateDate")
    effective_date: Optional[datetime] = Field(default=None, alias="EffectiveDate")
    modification_results: Optional[
        List[ReservedInstancesModificationResultModel]
    ] = Field(default=None, alias="ModificationResults")
    reserved_instances_ids: Optional[List[ReservedInstancesIdModel]] = Field(
        default=None, alias="ReservedInstancesIds"
    )
    reserved_instances_modification_id: Optional[str] = Field(
        default=None, alias="ReservedInstancesModificationId"
    )
    status: Optional[str] = Field(default=None, alias="Status")
    status_message: Optional[str] = Field(default=None, alias="StatusMessage")
    update_date: Optional[datetime] = Field(default=None, alias="UpdateDate")


class CreateNatGatewayResultModel(BaseModel):
    client_token: str = Field(alias="ClientToken")
    nat_gateway: NatGatewayModel = Field(alias="NatGateway")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeNatGatewaysResultModel(BaseModel):
    nat_gateways: List[NatGatewayModel] = Field(alias="NatGateways")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateNetworkInterfacePermissionResultModel(BaseModel):
    interface_permission: NetworkInterfacePermissionModel = Field(
        alias="InterfacePermission"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeNetworkInterfacePermissionsResultModel(BaseModel):
    network_interface_permissions: List[NetworkInterfacePermissionModel] = Field(
        alias="NetworkInterfacePermissions"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateVerifiedAccessTrustProviderResultModel(BaseModel):
    verified_access_trust_provider: VerifiedAccessTrustProviderModel = Field(
        alias="VerifiedAccessTrustProvider"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteVerifiedAccessTrustProviderResultModel(BaseModel):
    verified_access_trust_provider: VerifiedAccessTrustProviderModel = Field(
        alias="VerifiedAccessTrustProvider"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeVerifiedAccessTrustProvidersResultModel(BaseModel):
    verified_access_trust_providers: List[VerifiedAccessTrustProviderModel] = Field(
        alias="VerifiedAccessTrustProviders"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyVerifiedAccessTrustProviderResultModel(BaseModel):
    verified_access_trust_provider: VerifiedAccessTrustProviderModel = Field(
        alias="VerifiedAccessTrustProvider"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AccessScopePathRequestModel(BaseModel):
    source: Optional[PathStatementRequestModel] = Field(default=None, alias="Source")
    destination: Optional[PathStatementRequestModel] = Field(
        default=None, alias="Destination"
    )
    through_resources: Optional[
        Sequence[ThroughResourcesStatementRequestModel]
    ] = Field(default=None, alias="ThroughResources")


class AccessScopePathModel(BaseModel):
    source: Optional[PathStatementModel] = Field(default=None, alias="Source")
    destination: Optional[PathStatementModel] = Field(default=None, alias="Destination")
    through_resources: Optional[List[ThroughResourcesStatementModel]] = Field(
        default=None, alias="ThroughResources"
    )


class CancelReservedInstancesListingResultModel(BaseModel):
    reserved_instances_listings: List[ReservedInstancesListingModel] = Field(
        alias="ReservedInstancesListings"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateReservedInstancesListingResultModel(BaseModel):
    reserved_instances_listings: List[ReservedInstancesListingModel] = Field(
        alias="ReservedInstancesListings"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeReservedInstancesListingsResultModel(BaseModel):
    reserved_instances_listings: List[ReservedInstancesListingModel] = Field(
        alias="ReservedInstancesListings"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribePublicIpv4PoolsResultModel(BaseModel):
    public_ipv4_pools: List[PublicIpv4PoolModel] = Field(alias="PublicIpv4Pools")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeReservedInstancesOfferingsResultModel(BaseModel):
    reserved_instances_offerings: List[ReservedInstancesOfferingModel] = Field(
        alias="ReservedInstancesOfferings"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeReservedInstancesResultModel(BaseModel):
    reserved_instances: List[ReservedInstancesModel] = Field(alias="ReservedInstances")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AuthorizeSecurityGroupEgressResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    security_group_rules: List[SecurityGroupRuleModel] = Field(
        alias="SecurityGroupRules"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AuthorizeSecurityGroupIngressResultModel(BaseModel):
    return_: bool = Field(alias="Return")
    security_group_rules: List[SecurityGroupRuleModel] = Field(
        alias="SecurityGroupRules"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeSecurityGroupRulesResultModel(BaseModel):
    security_group_rules: List[SecurityGroupRuleModel] = Field(
        alias="SecurityGroupRules"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class BundleInstanceRequestModel(BaseModel):
    instance_id: str = Field(alias="InstanceId")
    storage: StorageModel = Field(alias="Storage")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class BundleTaskModel(BaseModel):
    bundle_id: Optional[str] = Field(default=None, alias="BundleId")
    bundle_task_error: Optional[BundleTaskErrorModel] = Field(
        default=None, alias="BundleTaskError"
    )
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    progress: Optional[str] = Field(default=None, alias="Progress")
    start_time: Optional[datetime] = Field(default=None, alias="StartTime")
    state: Optional[
        Literal[
            "bundling",
            "cancelling",
            "complete",
            "failed",
            "pending",
            "storing",
            "waiting-for-shutdown",
        ]
    ] = Field(default=None, alias="State")
    storage: Optional[StorageModel] = Field(default=None, alias="Storage")
    update_time: Optional[datetime] = Field(default=None, alias="UpdateTime")


class DescribeScheduledInstanceAvailabilityResultModel(BaseModel):
    next_token: str = Field(alias="NextToken")
    scheduled_instance_availability_set: List[
        ScheduledInstanceAvailabilityModel
    ] = Field(alias="ScheduledInstanceAvailabilitySet")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeScheduledInstancesResultModel(BaseModel):
    next_token: str = Field(alias="NextToken")
    scheduled_instance_set: List[ScheduledInstanceModel] = Field(
        alias="ScheduledInstanceSet"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class PurchaseScheduledInstancesResultModel(BaseModel):
    scheduled_instance_set: List[ScheduledInstanceModel] = Field(
        alias="ScheduledInstanceSet"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ScheduledInstancesLaunchSpecificationModel(BaseModel):
    image_id: str = Field(alias="ImageId")
    block_device_mappings: Optional[
        Sequence[ScheduledInstancesBlockDeviceMappingModel]
    ] = Field(default=None, alias="BlockDeviceMappings")
    ebs_optimized: Optional[bool] = Field(default=None, alias="EbsOptimized")
    iam_instance_profile: Optional[ScheduledInstancesIamInstanceProfileModel] = Field(
        default=None, alias="IamInstanceProfile"
    )
    instance_type: Optional[str] = Field(default=None, alias="InstanceType")
    kernel_id: Optional[str] = Field(default=None, alias="KernelId")
    key_name: Optional[str] = Field(default=None, alias="KeyName")
    monitoring: Optional[ScheduledInstancesMonitoringModel] = Field(
        default=None, alias="Monitoring"
    )
    network_interfaces: Optional[
        Sequence[ScheduledInstancesNetworkInterfaceModel]
    ] = Field(default=None, alias="NetworkInterfaces")
    placement: Optional[ScheduledInstancesPlacementModel] = Field(
        default=None, alias="Placement"
    )
    ramdisk_id: Optional[str] = Field(default=None, alias="RamdiskId")
    security_group_ids: Optional[Sequence[str]] = Field(
        default=None, alias="SecurityGroupIds"
    )
    subnet_id: Optional[str] = Field(default=None, alias="SubnetId")
    user_data: Optional[str] = Field(default=None, alias="UserData")


class CreateVpcEndpointResultModel(BaseModel):
    vpc_endpoint: VpcEndpointModel = Field(alias="VpcEndpoint")
    client_token: str = Field(alias="ClientToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeVpcEndpointsResultModel(BaseModel):
    vpc_endpoints: List[VpcEndpointModel] = Field(alias="VpcEndpoints")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifySecurityGroupRulesRequestModel(BaseModel):
    group_id: str = Field(alias="GroupId")
    security_group_rules: Sequence[SecurityGroupRuleUpdateModel] = Field(
        alias="SecurityGroupRules"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class CreateVpcEndpointServiceConfigurationResultModel(BaseModel):
    service_configuration: ServiceConfigurationModel = Field(
        alias="ServiceConfiguration"
    )
    client_token: str = Field(alias="ClientToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeVpcEndpointServiceConfigurationsResultModel(BaseModel):
    service_configurations: List[ServiceConfigurationModel] = Field(
        alias="ServiceConfigurations"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeVpcEndpointServicesResultModel(BaseModel):
    service_names: List[str] = Field(alias="ServiceNames")
    service_details: List[ServiceDetailModel] = Field(alias="ServiceDetails")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ImportImageResultModel(BaseModel):
    architecture: str = Field(alias="Architecture")
    description: str = Field(alias="Description")
    encrypted: bool = Field(alias="Encrypted")
    hypervisor: str = Field(alias="Hypervisor")
    image_id: str = Field(alias="ImageId")
    import_task_id: str = Field(alias="ImportTaskId")
    kms_key_id: str = Field(alias="KmsKeyId")
    license_type: str = Field(alias="LicenseType")
    platform: str = Field(alias="Platform")
    progress: str = Field(alias="Progress")
    snapshot_details: List[SnapshotDetailModel] = Field(alias="SnapshotDetails")
    status: str = Field(alias="Status")
    status_message: str = Field(alias="StatusMessage")
    license_specifications: List[ImportImageLicenseConfigurationResponseModel] = Field(
        alias="LicenseSpecifications"
    )
    tags: List[TagModel] = Field(alias="Tags")
    usage_operation: str = Field(alias="UsageOperation")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ImportImageTaskModel(BaseModel):
    architecture: Optional[str] = Field(default=None, alias="Architecture")
    description: Optional[str] = Field(default=None, alias="Description")
    encrypted: Optional[bool] = Field(default=None, alias="Encrypted")
    hypervisor: Optional[str] = Field(default=None, alias="Hypervisor")
    image_id: Optional[str] = Field(default=None, alias="ImageId")
    import_task_id: Optional[str] = Field(default=None, alias="ImportTaskId")
    kms_key_id: Optional[str] = Field(default=None, alias="KmsKeyId")
    license_type: Optional[str] = Field(default=None, alias="LicenseType")
    platform: Optional[str] = Field(default=None, alias="Platform")
    progress: Optional[str] = Field(default=None, alias="Progress")
    snapshot_details: Optional[List[SnapshotDetailModel]] = Field(
        default=None, alias="SnapshotDetails"
    )
    status: Optional[str] = Field(default=None, alias="Status")
    status_message: Optional[str] = Field(default=None, alias="StatusMessage")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    license_specifications: Optional[
        List[ImportImageLicenseConfigurationResponseModel]
    ] = Field(default=None, alias="LicenseSpecifications")
    usage_operation: Optional[str] = Field(default=None, alias="UsageOperation")
    boot_mode: Optional[Literal["legacy-bios", "uefi"]] = Field(
        default=None, alias="BootMode"
    )


class ImportSnapshotResultModel(BaseModel):
    description: str = Field(alias="Description")
    import_task_id: str = Field(alias="ImportTaskId")
    snapshot_task_detail: SnapshotTaskDetailModel = Field(alias="SnapshotTaskDetail")
    tags: List[TagModel] = Field(alias="Tags")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ImportSnapshotTaskModel(BaseModel):
    description: Optional[str] = Field(default=None, alias="Description")
    import_task_id: Optional[str] = Field(default=None, alias="ImportTaskId")
    snapshot_task_detail: Optional[SnapshotTaskDetailModel] = Field(
        default=None, alias="SnapshotTaskDetail"
    )
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class CreateSpotDatafeedSubscriptionResultModel(BaseModel):
    spot_datafeed_subscription: SpotDatafeedSubscriptionModel = Field(
        alias="SpotDatafeedSubscription"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeSpotDatafeedSubscriptionResultModel(BaseModel):
    spot_datafeed_subscription: SpotDatafeedSubscriptionModel = Field(
        alias="SpotDatafeedSubscription"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetTransitGatewayMulticastDomainAssociationsResultModel(BaseModel):
    multicast_domain_associations: List[
        TransitGatewayMulticastDomainAssociationModel
    ] = Field(alias="MulticastDomainAssociations")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AcceptTransitGatewayMulticastDomainAssociationsResultModel(BaseModel):
    associations: TransitGatewayMulticastDomainAssociationsModel = Field(
        alias="Associations"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AssociateTransitGatewayMulticastDomainResultModel(BaseModel):
    associations: TransitGatewayMulticastDomainAssociationsModel = Field(
        alias="Associations"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DisassociateTransitGatewayMulticastDomainResultModel(BaseModel):
    associations: TransitGatewayMulticastDomainAssociationsModel = Field(
        alias="Associations"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class RejectTransitGatewayMulticastDomainAssociationsResultModel(BaseModel):
    associations: TransitGatewayMulticastDomainAssociationsModel = Field(
        alias="Associations"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AssociateSubnetCidrBlockResultModel(BaseModel):
    ipv6_cidr_block_association: SubnetIpv6CidrBlockAssociationModel = Field(
        alias="Ipv6CidrBlockAssociation"
    )
    subnet_id: str = Field(alias="SubnetId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DisassociateSubnetCidrBlockResultModel(BaseModel):
    ipv6_cidr_block_association: SubnetIpv6CidrBlockAssociationModel = Field(
        alias="Ipv6CidrBlockAssociation"
    )
    subnet_id: str = Field(alias="SubnetId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class SubnetModel(BaseModel):
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    availability_zone_id: Optional[str] = Field(
        default=None, alias="AvailabilityZoneId"
    )
    available_ip_address_count: Optional[int] = Field(
        default=None, alias="AvailableIpAddressCount"
    )
    cidr_block: Optional[str] = Field(default=None, alias="CidrBlock")
    default_for_az: Optional[bool] = Field(default=None, alias="DefaultForAz")
    enable_lni_at_device_index: Optional[int] = Field(
        default=None, alias="EnableLniAtDeviceIndex"
    )
    map_public_ip_on_launch: Optional[bool] = Field(
        default=None, alias="MapPublicIpOnLaunch"
    )
    map_customer_owned_ip_on_launch: Optional[bool] = Field(
        default=None, alias="MapCustomerOwnedIpOnLaunch"
    )
    customer_owned_ipv4_pool: Optional[str] = Field(
        default=None, alias="CustomerOwnedIpv4Pool"
    )
    state: Optional[Literal["available", "pending"]] = Field(
        default=None, alias="State"
    )
    subnet_id: Optional[str] = Field(default=None, alias="SubnetId")
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    assign_ipv6_address_on_creation: Optional[bool] = Field(
        default=None, alias="AssignIpv6AddressOnCreation"
    )
    ipv6_cidr_block_association_set: Optional[
        List[SubnetIpv6CidrBlockAssociationModel]
    ] = Field(default=None, alias="Ipv6CidrBlockAssociationSet")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    subnet_arn: Optional[str] = Field(default=None, alias="SubnetArn")
    outpost_arn: Optional[str] = Field(default=None, alias="OutpostArn")
    enable_dns64: Optional[bool] = Field(default=None, alias="EnableDns64")
    ipv6_native: Optional[bool] = Field(default=None, alias="Ipv6Native")
    private_dns_name_options_on_launch: Optional[
        PrivateDnsNameOptionsOnLaunchModel
    ] = Field(default=None, alias="PrivateDnsNameOptionsOnLaunch")


class GetReservedInstancesExchangeQuoteResultModel(BaseModel):
    currency_code: str = Field(alias="CurrencyCode")
    is_valid_exchange: bool = Field(alias="IsValidExchange")
    output_reserved_instances_will_expire_at: datetime = Field(
        alias="OutputReservedInstancesWillExpireAt"
    )
    payment_due: str = Field(alias="PaymentDue")
    reserved_instance_value_rollup: ReservationValueModel = Field(
        alias="ReservedInstanceValueRollup"
    )
    reserved_instance_value_set: List[ReservedInstanceReservationValueModel] = Field(
        alias="ReservedInstanceValueSet"
    )
    target_configuration_value_rollup: ReservationValueModel = Field(
        alias="TargetConfigurationValueRollup"
    )
    target_configuration_value_set: List[TargetReservationValueModel] = Field(
        alias="TargetConfigurationValueSet"
    )
    validation_failure_reason: str = Field(alias="ValidationFailureReason")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class LoadBalancersConfigModel(BaseModel):
    classic_load_balancers_config: Optional[ClassicLoadBalancersConfigModel] = Field(
        default=None, alias="ClassicLoadBalancersConfig"
    )
    target_groups_config: Optional[TargetGroupsConfigModel] = Field(
        default=None, alias="TargetGroupsConfig"
    )


class CreateTrafficMirrorFilterRuleResultModel(BaseModel):
    traffic_mirror_filter_rule: TrafficMirrorFilterRuleModel = Field(
        alias="TrafficMirrorFilterRule"
    )
    client_token: str = Field(alias="ClientToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyTrafficMirrorFilterRuleResultModel(BaseModel):
    traffic_mirror_filter_rule: TrafficMirrorFilterRuleModel = Field(
        alias="TrafficMirrorFilterRule"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class TrafficMirrorFilterModel(BaseModel):
    traffic_mirror_filter_id: Optional[str] = Field(
        default=None, alias="TrafficMirrorFilterId"
    )
    ingress_filter_rules: Optional[List[TrafficMirrorFilterRuleModel]] = Field(
        default=None, alias="IngressFilterRules"
    )
    egress_filter_rules: Optional[List[TrafficMirrorFilterRuleModel]] = Field(
        default=None, alias="EgressFilterRules"
    )
    network_services: Optional[List[Literal["amazon-dns"]]] = Field(
        default=None, alias="NetworkServices"
    )
    description: Optional[str] = Field(default=None, alias="Description")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class DescribeTransitGatewayAttachmentsResultModel(BaseModel):
    transit_gateway_attachments: List[TransitGatewayAttachmentModel] = Field(
        alias="TransitGatewayAttachments"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class TransitGatewayConnectPeerModel(BaseModel):
    transit_gateway_attachment_id: Optional[str] = Field(
        default=None, alias="TransitGatewayAttachmentId"
    )
    transit_gateway_connect_peer_id: Optional[str] = Field(
        default=None, alias="TransitGatewayConnectPeerId"
    )
    state: Optional[Literal["available", "deleted", "deleting", "pending"]] = Field(
        default=None, alias="State"
    )
    creation_time: Optional[datetime] = Field(default=None, alias="CreationTime")
    connect_peer_configuration: Optional[
        TransitGatewayConnectPeerConfigurationModel
    ] = Field(default=None, alias="ConnectPeerConfiguration")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class CreateTransitGatewayConnectResultModel(BaseModel):
    transit_gateway_connect: TransitGatewayConnectModel = Field(
        alias="TransitGatewayConnect"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteTransitGatewayConnectResultModel(BaseModel):
    transit_gateway_connect: TransitGatewayConnectModel = Field(
        alias="TransitGatewayConnect"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeTransitGatewayConnectsResultModel(BaseModel):
    transit_gateway_connects: List[TransitGatewayConnectModel] = Field(
        alias="TransitGatewayConnects"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateTransitGatewayMulticastDomainResultModel(BaseModel):
    transit_gateway_multicast_domain: TransitGatewayMulticastDomainModel = Field(
        alias="TransitGatewayMulticastDomain"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteTransitGatewayMulticastDomainResultModel(BaseModel):
    transit_gateway_multicast_domain: TransitGatewayMulticastDomainModel = Field(
        alias="TransitGatewayMulticastDomain"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeTransitGatewayMulticastDomainsResultModel(BaseModel):
    transit_gateway_multicast_domains: List[TransitGatewayMulticastDomainModel] = Field(
        alias="TransitGatewayMulticastDomains"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateTransitGatewayResultModel(BaseModel):
    transit_gateway: TransitGatewayModel = Field(alias="TransitGateway")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteTransitGatewayResultModel(BaseModel):
    transit_gateway: TransitGatewayModel = Field(alias="TransitGateway")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeTransitGatewaysResultModel(BaseModel):
    transit_gateways: List[TransitGatewayModel] = Field(alias="TransitGateways")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyTransitGatewayResultModel(BaseModel):
    transit_gateway: TransitGatewayModel = Field(alias="TransitGateway")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AcceptTransitGatewayPeeringAttachmentResultModel(BaseModel):
    transit_gateway_peering_attachment: TransitGatewayPeeringAttachmentModel = Field(
        alias="TransitGatewayPeeringAttachment"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateTransitGatewayPeeringAttachmentResultModel(BaseModel):
    transit_gateway_peering_attachment: TransitGatewayPeeringAttachmentModel = Field(
        alias="TransitGatewayPeeringAttachment"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteTransitGatewayPeeringAttachmentResultModel(BaseModel):
    transit_gateway_peering_attachment: TransitGatewayPeeringAttachmentModel = Field(
        alias="TransitGatewayPeeringAttachment"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeTransitGatewayPeeringAttachmentsResultModel(BaseModel):
    transit_gateway_peering_attachments: List[
        TransitGatewayPeeringAttachmentModel
    ] = Field(alias="TransitGatewayPeeringAttachments")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class RejectTransitGatewayPeeringAttachmentResultModel(BaseModel):
    transit_gateway_peering_attachment: TransitGatewayPeeringAttachmentModel = Field(
        alias="TransitGatewayPeeringAttachment"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class TransitGatewayPolicyTableEntryModel(BaseModel):
    policy_rule_number: Optional[str] = Field(default=None, alias="PolicyRuleNumber")
    policy_rule: Optional[TransitGatewayPolicyRuleModel] = Field(
        default=None, alias="PolicyRule"
    )
    target_route_table_id: Optional[str] = Field(
        default=None, alias="TargetRouteTableId"
    )


class CreateTransitGatewayPrefixListReferenceResultModel(BaseModel):
    transit_gateway_prefix_list_reference: TransitGatewayPrefixListReferenceModel = (
        Field(alias="TransitGatewayPrefixListReference")
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteTransitGatewayPrefixListReferenceResultModel(BaseModel):
    transit_gateway_prefix_list_reference: TransitGatewayPrefixListReferenceModel = (
        Field(alias="TransitGatewayPrefixListReference")
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetTransitGatewayPrefixListReferencesResultModel(BaseModel):
    transit_gateway_prefix_list_references: List[
        TransitGatewayPrefixListReferenceModel
    ] = Field(alias="TransitGatewayPrefixListReferences")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyTransitGatewayPrefixListReferenceResultModel(BaseModel):
    transit_gateway_prefix_list_reference: TransitGatewayPrefixListReferenceModel = (
        Field(alias="TransitGatewayPrefixListReference")
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateTransitGatewayRouteResultModel(BaseModel):
    route: TransitGatewayRouteModel = Field(alias="Route")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteTransitGatewayRouteResultModel(BaseModel):
    route: TransitGatewayRouteModel = Field(alias="Route")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ReplaceTransitGatewayRouteResultModel(BaseModel):
    route: TransitGatewayRouteModel = Field(alias="Route")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class SearchTransitGatewayRoutesResultModel(BaseModel):
    routes: List[TransitGatewayRouteModel] = Field(alias="Routes")
    additional_routes_available: bool = Field(alias="AdditionalRoutesAvailable")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AcceptTransitGatewayVpcAttachmentResultModel(BaseModel):
    transit_gateway_vpc_attachment: TransitGatewayVpcAttachmentModel = Field(
        alias="TransitGatewayVpcAttachment"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateTransitGatewayVpcAttachmentResultModel(BaseModel):
    transit_gateway_vpc_attachment: TransitGatewayVpcAttachmentModel = Field(
        alias="TransitGatewayVpcAttachment"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteTransitGatewayVpcAttachmentResultModel(BaseModel):
    transit_gateway_vpc_attachment: TransitGatewayVpcAttachmentModel = Field(
        alias="TransitGatewayVpcAttachment"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeTransitGatewayVpcAttachmentsResultModel(BaseModel):
    transit_gateway_vpc_attachments: List[TransitGatewayVpcAttachmentModel] = Field(
        alias="TransitGatewayVpcAttachments"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyTransitGatewayVpcAttachmentResultModel(BaseModel):
    transit_gateway_vpc_attachment: TransitGatewayVpcAttachmentModel = Field(
        alias="TransitGatewayVpcAttachment"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class RejectTransitGatewayVpcAttachmentResultModel(BaseModel):
    transit_gateway_vpc_attachment: TransitGatewayVpcAttachmentModel = Field(
        alias="TransitGatewayVpcAttachment"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyInstanceCreditSpecificationResultModel(BaseModel):
    successful_instance_credit_specifications: List[
        SuccessfulInstanceCreditSpecificationItemModel
    ] = Field(alias="SuccessfulInstanceCreditSpecifications")
    unsuccessful_instance_credit_specifications: List[
        UnsuccessfulInstanceCreditSpecificationItemModel
    ] = Field(alias="UnsuccessfulInstanceCreditSpecifications")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AcceptVpcEndpointConnectionsResultModel(BaseModel):
    unsuccessful: List[UnsuccessfulItemModel] = Field(alias="Unsuccessful")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateFlowLogsResultModel(BaseModel):
    client_token: str = Field(alias="ClientToken")
    flow_log_ids: List[str] = Field(alias="FlowLogIds")
    unsuccessful: List[UnsuccessfulItemModel] = Field(alias="Unsuccessful")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteFlowLogsResultModel(BaseModel):
    unsuccessful: List[UnsuccessfulItemModel] = Field(alias="Unsuccessful")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteVpcEndpointConnectionNotificationsResultModel(BaseModel):
    unsuccessful: List[UnsuccessfulItemModel] = Field(alias="Unsuccessful")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteVpcEndpointServiceConfigurationsResultModel(BaseModel):
    unsuccessful: List[UnsuccessfulItemModel] = Field(alias="Unsuccessful")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteVpcEndpointsResultModel(BaseModel):
    unsuccessful: List[UnsuccessfulItemModel] = Field(alias="Unsuccessful")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyHostsResultModel(BaseModel):
    successful: List[str] = Field(alias="Successful")
    unsuccessful: List[UnsuccessfulItemModel] = Field(alias="Unsuccessful")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class RejectVpcEndpointConnectionsResultModel(BaseModel):
    unsuccessful: List[UnsuccessfulItemModel] = Field(alias="Unsuccessful")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ReleaseHostsResultModel(BaseModel):
    successful: List[str] = Field(alias="Successful")
    unsuccessful: List[UnsuccessfulItemModel] = Field(alias="Unsuccessful")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateLaunchTemplateResultModel(BaseModel):
    launch_template: LaunchTemplateModel = Field(alias="LaunchTemplate")
    warning: ValidationWarningModel = Field(alias="Warning")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateVerifiedAccessEndpointResultModel(BaseModel):
    verified_access_endpoint: VerifiedAccessEndpointModel = Field(
        alias="VerifiedAccessEndpoint"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteVerifiedAccessEndpointResultModel(BaseModel):
    verified_access_endpoint: VerifiedAccessEndpointModel = Field(
        alias="VerifiedAccessEndpoint"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeVerifiedAccessEndpointsResultModel(BaseModel):
    verified_access_endpoints: List[VerifiedAccessEndpointModel] = Field(
        alias="VerifiedAccessEndpoints"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyVerifiedAccessEndpointResultModel(BaseModel):
    verified_access_endpoint: VerifiedAccessEndpointModel = Field(
        alias="VerifiedAccessEndpoint"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AttachVerifiedAccessTrustProviderResultModel(BaseModel):
    verified_access_trust_provider: VerifiedAccessTrustProviderModel = Field(
        alias="VerifiedAccessTrustProvider"
    )
    verified_access_instance: VerifiedAccessInstanceModel = Field(
        alias="VerifiedAccessInstance"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateVerifiedAccessInstanceResultModel(BaseModel):
    verified_access_instance: VerifiedAccessInstanceModel = Field(
        alias="VerifiedAccessInstance"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteVerifiedAccessInstanceResultModel(BaseModel):
    verified_access_instance: VerifiedAccessInstanceModel = Field(
        alias="VerifiedAccessInstance"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeVerifiedAccessInstancesResultModel(BaseModel):
    verified_access_instances: List[VerifiedAccessInstanceModel] = Field(
        alias="VerifiedAccessInstances"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DetachVerifiedAccessTrustProviderResultModel(BaseModel):
    verified_access_trust_provider: VerifiedAccessTrustProviderModel = Field(
        alias="VerifiedAccessTrustProvider"
    )
    verified_access_instance: VerifiedAccessInstanceModel = Field(
        alias="VerifiedAccessInstance"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyVerifiedAccessInstanceResultModel(BaseModel):
    verified_access_instance: VerifiedAccessInstanceModel = Field(
        alias="VerifiedAccessInstance"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class VerifiedAccessLogsModel(BaseModel):
    s3: Optional[VerifiedAccessLogS3DestinationModel] = Field(default=None, alias="S3")
    cloud_watch_logs: Optional[VerifiedAccessLogCloudWatchLogsDestinationModel] = Field(
        default=None, alias="CloudWatchLogs"
    )
    kinesis_data_firehose: Optional[
        VerifiedAccessLogKinesisDataFirehoseDestinationModel
    ] = Field(default=None, alias="KinesisDataFirehose")


class ModifyVerifiedAccessInstanceLoggingConfigurationRequestModel(BaseModel):
    verified_access_instance_id: str = Field(alias="VerifiedAccessInstanceId")
    access_logs: VerifiedAccessLogOptionsModel = Field(alias="AccessLogs")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")


class DescribeVolumesResultModel(BaseModel):
    volumes: List[VolumeModel] = Field(alias="Volumes")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class VolumeStatusItemModel(BaseModel):
    actions: Optional[List[VolumeStatusActionModel]] = Field(
        default=None, alias="Actions"
    )
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    outpost_arn: Optional[str] = Field(default=None, alias="OutpostArn")
    events: Optional[List[VolumeStatusEventModel]] = Field(default=None, alias="Events")
    volume_id: Optional[str] = Field(default=None, alias="VolumeId")
    volume_status: Optional[VolumeStatusInfoModel] = Field(
        default=None, alias="VolumeStatus"
    )
    attachment_statuses: Optional[List[VolumeStatusAttachmentStatusModel]] = Field(
        default=None, alias="AttachmentStatuses"
    )


class AssociateVpcCidrBlockResultModel(BaseModel):
    ipv6_cidr_block_association: VpcIpv6CidrBlockAssociationModel = Field(
        alias="Ipv6CidrBlockAssociation"
    )
    cidr_block_association: VpcCidrBlockAssociationModel = Field(
        alias="CidrBlockAssociation"
    )
    vpc_id: str = Field(alias="VpcId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DisassociateVpcCidrBlockResultModel(BaseModel):
    ipv6_cidr_block_association: VpcIpv6CidrBlockAssociationModel = Field(
        alias="Ipv6CidrBlockAssociation"
    )
    cidr_block_association: VpcCidrBlockAssociationModel = Field(
        alias="CidrBlockAssociation"
    )
    vpc_id: str = Field(alias="VpcId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class VpcModel(BaseModel):
    cidr_block: Optional[str] = Field(default=None, alias="CidrBlock")
    dhcp_options_id: Optional[str] = Field(default=None, alias="DhcpOptionsId")
    state: Optional[Literal["available", "pending"]] = Field(
        default=None, alias="State"
    )
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    instance_tenancy: Optional[Literal["dedicated", "default", "host"]] = Field(
        default=None, alias="InstanceTenancy"
    )
    ipv6_cidr_block_association_set: Optional[
        List[VpcIpv6CidrBlockAssociationModel]
    ] = Field(default=None, alias="Ipv6CidrBlockAssociationSet")
    cidr_block_association_set: Optional[List[VpcCidrBlockAssociationModel]] = Field(
        default=None, alias="CidrBlockAssociationSet"
    )
    is_default: Optional[bool] = Field(default=None, alias="IsDefault")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class VpcPeeringConnectionModel(BaseModel):
    accepter_vpc_info: Optional[VpcPeeringConnectionVpcInfoModel] = Field(
        default=None, alias="AccepterVpcInfo"
    )
    expiration_time: Optional[datetime] = Field(default=None, alias="ExpirationTime")
    requester_vpc_info: Optional[VpcPeeringConnectionVpcInfoModel] = Field(
        default=None, alias="RequesterVpcInfo"
    )
    status: Optional[VpcPeeringConnectionStateReasonModel] = Field(
        default=None, alias="Status"
    )
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    vpc_peering_connection_id: Optional[str] = Field(
        default=None, alias="VpcPeeringConnectionId"
    )


class AssociateInstanceEventWindowResultModel(BaseModel):
    instance_event_window: InstanceEventWindowModel = Field(alias="InstanceEventWindow")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateInstanceEventWindowResultModel(BaseModel):
    instance_event_window: InstanceEventWindowModel = Field(alias="InstanceEventWindow")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeInstanceEventWindowsResultModel(BaseModel):
    instance_event_windows: List[InstanceEventWindowModel] = Field(
        alias="InstanceEventWindows"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DisassociateInstanceEventWindowResultModel(BaseModel):
    instance_event_window: InstanceEventWindowModel = Field(alias="InstanceEventWindow")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyInstanceEventWindowResultModel(BaseModel):
    instance_event_window: InstanceEventWindowModel = Field(alias="InstanceEventWindow")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class PathComponentModel(BaseModel):
    sequence_number: Optional[int] = Field(default=None, alias="SequenceNumber")
    acl_rule: Optional[AnalysisAclRuleModel] = Field(default=None, alias="AclRule")
    attached_to: Optional[AnalysisComponentModel] = Field(
        default=None, alias="AttachedTo"
    )
    component: Optional[AnalysisComponentModel] = Field(default=None, alias="Component")
    destination_vpc: Optional[AnalysisComponentModel] = Field(
        default=None, alias="DestinationVpc"
    )
    outbound_header: Optional[AnalysisPacketHeaderModel] = Field(
        default=None, alias="OutboundHeader"
    )
    inbound_header: Optional[AnalysisPacketHeaderModel] = Field(
        default=None, alias="InboundHeader"
    )
    route_table_route: Optional[AnalysisRouteTableRouteModel] = Field(
        default=None, alias="RouteTableRoute"
    )
    security_group_rule: Optional[AnalysisSecurityGroupRuleModel] = Field(
        default=None, alias="SecurityGroupRule"
    )
    source_vpc: Optional[AnalysisComponentModel] = Field(
        default=None, alias="SourceVpc"
    )
    subnet: Optional[AnalysisComponentModel] = Field(default=None, alias="Subnet")
    vpc: Optional[AnalysisComponentModel] = Field(default=None, alias="Vpc")
    additional_details: Optional[List[AdditionalDetailModel]] = Field(
        default=None, alias="AdditionalDetails"
    )
    transit_gateway: Optional[AnalysisComponentModel] = Field(
        default=None, alias="TransitGateway"
    )
    transit_gateway_route_table_route: Optional[
        TransitGatewayRouteTableRouteModel
    ] = Field(default=None, alias="TransitGatewayRouteTableRoute")
    explanations: Optional[List[ExplanationModel]] = Field(
        default=None, alias="Explanations"
    )
    elastic_load_balancer_listener: Optional[AnalysisComponentModel] = Field(
        default=None, alias="ElasticLoadBalancerListener"
    )


class CreateRouteTableResultModel(BaseModel):
    route_table: RouteTableModel = Field(alias="RouteTable")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeRouteTablesResultModel(BaseModel):
    route_tables: List[RouteTableModel] = Field(alias="RouteTables")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeNetworkInterfaceAttributeResultModel(BaseModel):
    attachment: NetworkInterfaceAttachmentModel = Field(alias="Attachment")
    description: AttributeValueModel = Field(alias="Description")
    groups: List[GroupIdentifierModel] = Field(alias="Groups")
    network_interface_id: str = Field(alias="NetworkInterfaceId")
    source_dest_check: AttributeBooleanValueModel = Field(alias="SourceDestCheck")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class NetworkInterfaceModel(BaseModel):
    association: Optional[NetworkInterfaceAssociationModel] = Field(
        default=None, alias="Association"
    )
    attachment: Optional[NetworkInterfaceAttachmentModel] = Field(
        default=None, alias="Attachment"
    )
    availability_zone: Optional[str] = Field(default=None, alias="AvailabilityZone")
    description: Optional[str] = Field(default=None, alias="Description")
    groups: Optional[List[GroupIdentifierModel]] = Field(default=None, alias="Groups")
    interface_type: Optional[
        Literal[
            "api_gateway_managed",
            "aws_codestar_connections_managed",
            "branch",
            "efa",
            "gateway_load_balancer",
            "gateway_load_balancer_endpoint",
            "global_accelerator_managed",
            "interface",
            "iot_rules_managed",
            "lambda",
            "load_balancer",
            "natGateway",
            "network_load_balancer",
            "quicksight",
            "transit_gateway",
            "trunk",
            "vpc_endpoint",
        ]
    ] = Field(default=None, alias="InterfaceType")
    ipv6_addresses: Optional[List[NetworkInterfaceIpv6AddressModel]] = Field(
        default=None, alias="Ipv6Addresses"
    )
    mac_address: Optional[str] = Field(default=None, alias="MacAddress")
    network_interface_id: Optional[str] = Field(
        default=None, alias="NetworkInterfaceId"
    )
    outpost_arn: Optional[str] = Field(default=None, alias="OutpostArn")
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    private_dns_name: Optional[str] = Field(default=None, alias="PrivateDnsName")
    private_ip_address: Optional[str] = Field(default=None, alias="PrivateIpAddress")
    private_ip_addresses: Optional[List[NetworkInterfacePrivateIpAddressModel]] = Field(
        default=None, alias="PrivateIpAddresses"
    )
    ipv4_prefixes: Optional[List[Ipv4PrefixSpecificationModel]] = Field(
        default=None, alias="Ipv4Prefixes"
    )
    ipv6_prefixes: Optional[List[Ipv6PrefixSpecificationModel]] = Field(
        default=None, alias="Ipv6Prefixes"
    )
    requester_id: Optional[str] = Field(default=None, alias="RequesterId")
    requester_managed: Optional[bool] = Field(default=None, alias="RequesterManaged")
    source_dest_check: Optional[bool] = Field(default=None, alias="SourceDestCheck")
    status: Optional[
        Literal["associated", "attaching", "available", "detaching", "in-use"]
    ] = Field(default=None, alias="Status")
    subnet_id: Optional[str] = Field(default=None, alias="SubnetId")
    tag_set: Optional[List[TagModel]] = Field(default=None, alias="TagSet")
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")
    deny_all_igw_traffic: Optional[bool] = Field(
        default=None, alias="DenyAllIgwTraffic"
    )
    ipv6_native: Optional[bool] = Field(default=None, alias="Ipv6Native")
    ipv6_address: Optional[str] = Field(default=None, alias="Ipv6Address")


class CreateDhcpOptionsResultModel(BaseModel):
    dhcp_options: DhcpOptionsModel = Field(alias="DhcpOptions")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeDhcpOptionsResultModel(BaseModel):
    dhcp_options: List[DhcpOptionsModel] = Field(alias="DhcpOptions")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeHostsResultModel(BaseModel):
    hosts: List[HostModel] = Field(alias="Hosts")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeImagesResultModel(BaseModel):
    images: List[ImageModel] = Field(alias="Images")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeClientVpnEndpointsResultModel(BaseModel):
    client_vpn_endpoints: List[ClientVpnEndpointModel] = Field(
        alias="ClientVpnEndpoints"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyVpnTunnelOptionsRequestModel(BaseModel):
    vpn_connection_id: str = Field(alias="VpnConnectionId")
    vpn_tunnel_outside_ip_address: str = Field(alias="VpnTunnelOutsideIpAddress")
    tunnel_options: ModifyVpnTunnelOptionsSpecificationModel = Field(
        alias="TunnelOptions"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class VpnConnectionOptionsSpecificationModel(BaseModel):
    enable_acceleration: Optional[bool] = Field(
        default=None, alias="EnableAcceleration"
    )
    static_routes_only: Optional[bool] = Field(default=None, alias="StaticRoutesOnly")
    tunnel_inside_ip_version: Optional[Literal["ipv4", "ipv6"]] = Field(
        default=None, alias="TunnelInsideIpVersion"
    )
    tunnel_options: Optional[Sequence[VpnTunnelOptionsSpecificationModel]] = Field(
        default=None, alias="TunnelOptions"
    )
    local_ipv4_network_cidr: Optional[str] = Field(
        default=None, alias="LocalIpv4NetworkCidr"
    )
    remote_ipv4_network_cidr: Optional[str] = Field(
        default=None, alias="RemoteIpv4NetworkCidr"
    )
    local_ipv6_network_cidr: Optional[str] = Field(
        default=None, alias="LocalIpv6NetworkCidr"
    )
    remote_ipv6_network_cidr: Optional[str] = Field(
        default=None, alias="RemoteIpv6NetworkCidr"
    )
    outside_ip_address_type: Optional[str] = Field(
        default=None, alias="OutsideIpAddressType"
    )
    transport_transit_gateway_attachment_id: Optional[str] = Field(
        default=None, alias="TransportTransitGatewayAttachmentId"
    )


class VpnConnectionOptionsModel(BaseModel):
    enable_acceleration: Optional[bool] = Field(
        default=None, alias="EnableAcceleration"
    )
    static_routes_only: Optional[bool] = Field(default=None, alias="StaticRoutesOnly")
    local_ipv4_network_cidr: Optional[str] = Field(
        default=None, alias="LocalIpv4NetworkCidr"
    )
    remote_ipv4_network_cidr: Optional[str] = Field(
        default=None, alias="RemoteIpv4NetworkCidr"
    )
    local_ipv6_network_cidr: Optional[str] = Field(
        default=None, alias="LocalIpv6NetworkCidr"
    )
    remote_ipv6_network_cidr: Optional[str] = Field(
        default=None, alias="RemoteIpv6NetworkCidr"
    )
    outside_ip_address_type: Optional[str] = Field(
        default=None, alias="OutsideIpAddressType"
    )
    transport_transit_gateway_attachment_id: Optional[str] = Field(
        default=None, alias="TransportTransitGatewayAttachmentId"
    )
    tunnel_inside_ip_version: Optional[Literal["ipv4", "ipv6"]] = Field(
        default=None, alias="TunnelInsideIpVersion"
    )
    tunnel_options: Optional[List[TunnelOptionModel]] = Field(
        default=None, alias="TunnelOptions"
    )


class CreateNetworkAclResultModel(BaseModel):
    network_acl: NetworkAclModel = Field(alias="NetworkAcl")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeNetworkAclsResultModel(BaseModel):
    network_acls: List[NetworkAclModel] = Field(alias="NetworkAcls")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class SpotInstanceRequestModel(BaseModel):
    actual_block_hourly_price: Optional[str] = Field(
        default=None, alias="ActualBlockHourlyPrice"
    )
    availability_zone_group: Optional[str] = Field(
        default=None, alias="AvailabilityZoneGroup"
    )
    block_duration_minutes: Optional[int] = Field(
        default=None, alias="BlockDurationMinutes"
    )
    create_time: Optional[datetime] = Field(default=None, alias="CreateTime")
    fault: Optional[SpotInstanceStateFaultModel] = Field(default=None, alias="Fault")
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    launch_group: Optional[str] = Field(default=None, alias="LaunchGroup")
    launch_specification: Optional[LaunchSpecificationModel] = Field(
        default=None, alias="LaunchSpecification"
    )
    launched_availability_zone: Optional[str] = Field(
        default=None, alias="LaunchedAvailabilityZone"
    )
    product_description: Optional[
        Literal[
            "Linux/UNIX", "Linux/UNIX (Amazon VPC)", "Windows", "Windows (Amazon VPC)"
        ]
    ] = Field(default=None, alias="ProductDescription")
    spot_instance_request_id: Optional[str] = Field(
        default=None, alias="SpotInstanceRequestId"
    )
    spot_price: Optional[str] = Field(default=None, alias="SpotPrice")
    state: Optional[Literal["active", "cancelled", "closed", "failed", "open"]] = Field(
        default=None, alias="State"
    )
    status: Optional[SpotInstanceStatusModel] = Field(default=None, alias="Status")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    type: Optional[Literal["one-time", "persistent"]] = Field(
        default=None, alias="Type"
    )
    valid_from: Optional[datetime] = Field(default=None, alias="ValidFrom")
    valid_until: Optional[datetime] = Field(default=None, alias="ValidUntil")
    instance_interruption_behavior: Optional[
        Literal["hibernate", "stop", "terminate"]
    ] = Field(default=None, alias="InstanceInterruptionBehavior")


class RequestSpotInstancesRequestModel(BaseModel):
    availability_zone_group: Optional[str] = Field(
        default=None, alias="AvailabilityZoneGroup"
    )
    block_duration_minutes: Optional[int] = Field(
        default=None, alias="BlockDurationMinutes"
    )
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    instance_count: Optional[int] = Field(default=None, alias="InstanceCount")
    launch_group: Optional[str] = Field(default=None, alias="LaunchGroup")
    launch_specification: Optional[RequestSpotLaunchSpecificationModel] = Field(
        default=None, alias="LaunchSpecification"
    )
    spot_price: Optional[str] = Field(default=None, alias="SpotPrice")
    type: Optional[Literal["one-time", "persistent"]] = Field(
        default=None, alias="Type"
    )
    valid_from: Optional[Union[datetime, str]] = Field(default=None, alias="ValidFrom")
    valid_until: Optional[Union[datetime, str]] = Field(
        default=None, alias="ValidUntil"
    )
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    instance_interruption_behavior: Optional[
        Literal["hibernate", "stop", "terminate"]
    ] = Field(default=None, alias="InstanceInterruptionBehavior")


class DisableFastSnapshotRestoresResultModel(BaseModel):
    successful: List[DisableFastSnapshotRestoreSuccessItemModel] = Field(
        alias="Successful"
    )
    unsuccessful: List[DisableFastSnapshotRestoreErrorItemModel] = Field(
        alias="Unsuccessful"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ConversionTaskModel(BaseModel):
    conversion_task_id: Optional[str] = Field(default=None, alias="ConversionTaskId")
    expiration_time: Optional[str] = Field(default=None, alias="ExpirationTime")
    import_instance: Optional[ImportInstanceTaskDetailsModel] = Field(
        default=None, alias="ImportInstance"
    )
    import_volume: Optional[ImportVolumeTaskDetailsModel] = Field(
        default=None, alias="ImportVolume"
    )
    state: Optional[Literal["active", "cancelled", "cancelling", "completed"]] = Field(
        default=None, alias="State"
    )
    status_message: Optional[str] = Field(default=None, alias="StatusMessage")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class EnableFastSnapshotRestoresResultModel(BaseModel):
    successful: List[EnableFastSnapshotRestoreSuccessItemModel] = Field(
        alias="Successful"
    )
    unsuccessful: List[EnableFastSnapshotRestoreErrorItemModel] = Field(
        alias="Unsuccessful"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class InstanceTypeInfoModel(BaseModel):
    instance_type: Optional[
        Literal[
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.large",
            "a1.medium",
            "a1.metal",
            "a1.xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c3.large",
            "c3.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.large",
            "c5.metal",
            "c5.xlarge",
            "c5a.12xlarge",
            "c5a.16xlarge",
            "c5a.24xlarge",
            "c5a.2xlarge",
            "c5a.4xlarge",
            "c5a.8xlarge",
            "c5a.large",
            "c5a.xlarge",
            "c5ad.12xlarge",
            "c5ad.16xlarge",
            "c5ad.24xlarge",
            "c5ad.2xlarge",
            "c5ad.4xlarge",
            "c5ad.8xlarge",
            "c5ad.large",
            "c5ad.xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.large",
            "c5d.metal",
            "c5d.xlarge",
            "c5n.18xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.large",
            "c5n.metal",
            "c5n.xlarge",
            "c6a.12xlarge",
            "c6a.16xlarge",
            "c6a.24xlarge",
            "c6a.2xlarge",
            "c6a.32xlarge",
            "c6a.48xlarge",
            "c6a.4xlarge",
            "c6a.8xlarge",
            "c6a.large",
            "c6a.metal",
            "c6a.xlarge",
            "c6g.12xlarge",
            "c6g.16xlarge",
            "c6g.2xlarge",
            "c6g.4xlarge",
            "c6g.8xlarge",
            "c6g.large",
            "c6g.medium",
            "c6g.metal",
            "c6g.xlarge",
            "c6gd.12xlarge",
            "c6gd.16xlarge",
            "c6gd.2xlarge",
            "c6gd.4xlarge",
            "c6gd.8xlarge",
            "c6gd.large",
            "c6gd.medium",
            "c6gd.metal",
            "c6gd.xlarge",
            "c6gn.12xlarge",
            "c6gn.16xlarge",
            "c6gn.2xlarge",
            "c6gn.4xlarge",
            "c6gn.8xlarge",
            "c6gn.large",
            "c6gn.medium",
            "c6gn.xlarge",
            "c6i.12xlarge",
            "c6i.16xlarge",
            "c6i.24xlarge",
            "c6i.2xlarge",
            "c6i.32xlarge",
            "c6i.4xlarge",
            "c6i.8xlarge",
            "c6i.large",
            "c6i.metal",
            "c6i.xlarge",
            "c6id.12xlarge",
            "c6id.16xlarge",
            "c6id.24xlarge",
            "c6id.2xlarge",
            "c6id.32xlarge",
            "c6id.4xlarge",
            "c6id.8xlarge",
            "c6id.large",
            "c6id.metal",
            "c6id.xlarge",
            "c6in.12xlarge",
            "c6in.16xlarge",
            "c6in.24xlarge",
            "c6in.2xlarge",
            "c6in.32xlarge",
            "c6in.4xlarge",
            "c6in.8xlarge",
            "c6in.large",
            "c6in.xlarge",
            "c7g.12xlarge",
            "c7g.16xlarge",
            "c7g.2xlarge",
            "c7g.4xlarge",
            "c7g.8xlarge",
            "c7g.large",
            "c7g.medium",
            "c7g.xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "cg1.4xlarge",
            "cr1.8xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "d2.xlarge",
            "d3.2xlarge",
            "d3.4xlarge",
            "d3.8xlarge",
            "d3.xlarge",
            "d3en.12xlarge",
            "d3en.2xlarge",
            "d3en.4xlarge",
            "d3en.6xlarge",
            "d3en.8xlarge",
            "d3en.xlarge",
            "dl1.24xlarge",
            "f1.16xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.16xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3s.xlarge",
            "g4ad.16xlarge",
            "g4ad.2xlarge",
            "g4ad.4xlarge",
            "g4ad.8xlarge",
            "g4ad.xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.metal",
            "g4dn.xlarge",
            "g5.12xlarge",
            "g5.16xlarge",
            "g5.24xlarge",
            "g5.2xlarge",
            "g5.48xlarge",
            "g5.4xlarge",
            "g5.8xlarge",
            "g5.xlarge",
            "g5g.16xlarge",
            "g5g.2xlarge",
            "g5g.4xlarge",
            "g5g.8xlarge",
            "g5g.metal",
            "g5g.xlarge",
            "h1.16xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "hi1.4xlarge",
            "hpc6a.48xlarge",
            "hpc6id.32xlarge",
            "hs1.8xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i2.xlarge",
            "i3.16xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.large",
            "i3.metal",
            "i3.xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.large",
            "i3en.metal",
            "i3en.xlarge",
            "i4i.16xlarge",
            "i4i.2xlarge",
            "i4i.32xlarge",
            "i4i.4xlarge",
            "i4i.8xlarge",
            "i4i.large",
            "i4i.metal",
            "i4i.xlarge",
            "im4gn.16xlarge",
            "im4gn.2xlarge",
            "im4gn.4xlarge",
            "im4gn.8xlarge",
            "im4gn.large",
            "im4gn.xlarge",
            "inf1.24xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.xlarge",
            "is4gen.2xlarge",
            "is4gen.4xlarge",
            "is4gen.8xlarge",
            "is4gen.large",
            "is4gen.medium",
            "is4gen.xlarge",
            "m1.large",
            "m1.medium",
            "m1.small",
            "m1.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "m2.xlarge",
            "m3.2xlarge",
            "m3.large",
            "m3.medium",
            "m3.xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.large",
            "m4.xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.large",
            "m5.metal",
            "m5.xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.large",
            "m5a.xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.large",
            "m5ad.xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.large",
            "m5d.metal",
            "m5d.xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.large",
            "m5dn.metal",
            "m5dn.xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.large",
            "m5n.metal",
            "m5n.xlarge",
            "m5zn.12xlarge",
            "m5zn.2xlarge",
            "m5zn.3xlarge",
            "m5zn.6xlarge",
            "m5zn.large",
            "m5zn.metal",
            "m5zn.xlarge",
            "m6a.12xlarge",
            "m6a.16xlarge",
            "m6a.24xlarge",
            "m6a.2xlarge",
            "m6a.32xlarge",
            "m6a.48xlarge",
            "m6a.4xlarge",
            "m6a.8xlarge",
            "m6a.large",
            "m6a.metal",
            "m6a.xlarge",
            "m6g.12xlarge",
            "m6g.16xlarge",
            "m6g.2xlarge",
            "m6g.4xlarge",
            "m6g.8xlarge",
            "m6g.large",
            "m6g.medium",
            "m6g.metal",
            "m6g.xlarge",
            "m6gd.12xlarge",
            "m6gd.16xlarge",
            "m6gd.2xlarge",
            "m6gd.4xlarge",
            "m6gd.8xlarge",
            "m6gd.large",
            "m6gd.medium",
            "m6gd.metal",
            "m6gd.xlarge",
            "m6i.12xlarge",
            "m6i.16xlarge",
            "m6i.24xlarge",
            "m6i.2xlarge",
            "m6i.32xlarge",
            "m6i.4xlarge",
            "m6i.8xlarge",
            "m6i.large",
            "m6i.metal",
            "m6i.xlarge",
            "m6id.12xlarge",
            "m6id.16xlarge",
            "m6id.24xlarge",
            "m6id.2xlarge",
            "m6id.32xlarge",
            "m6id.4xlarge",
            "m6id.8xlarge",
            "m6id.large",
            "m6id.metal",
            "m6id.xlarge",
            "m6idn.12xlarge",
            "m6idn.16xlarge",
            "m6idn.24xlarge",
            "m6idn.2xlarge",
            "m6idn.32xlarge",
            "m6idn.4xlarge",
            "m6idn.8xlarge",
            "m6idn.large",
            "m6idn.xlarge",
            "m6in.12xlarge",
            "m6in.16xlarge",
            "m6in.24xlarge",
            "m6in.2xlarge",
            "m6in.32xlarge",
            "m6in.4xlarge",
            "m6in.8xlarge",
            "m6in.large",
            "m6in.xlarge",
            "mac1.metal",
            "mac2.metal",
            "p2.16xlarge",
            "p2.8xlarge",
            "p2.xlarge",
            "p3.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3dn.24xlarge",
            "p4d.24xlarge",
            "p4de.24xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r4.16xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.large",
            "r5.metal",
            "r5.xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.large",
            "r5a.xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.large",
            "r5ad.xlarge",
            "r5b.12xlarge",
            "r5b.16xlarge",
            "r5b.24xlarge",
            "r5b.2xlarge",
            "r5b.4xlarge",
            "r5b.8xlarge",
            "r5b.large",
            "r5b.metal",
            "r5b.xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.large",
            "r5d.metal",
            "r5d.xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.large",
            "r5dn.metal",
            "r5dn.xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.large",
            "r5n.metal",
            "r5n.xlarge",
            "r6a.12xlarge",
            "r6a.16xlarge",
            "r6a.24xlarge",
            "r6a.2xlarge",
            "r6a.32xlarge",
            "r6a.48xlarge",
            "r6a.4xlarge",
            "r6a.8xlarge",
            "r6a.large",
            "r6a.metal",
            "r6a.xlarge",
            "r6g.12xlarge",
            "r6g.16xlarge",
            "r6g.2xlarge",
            "r6g.4xlarge",
            "r6g.8xlarge",
            "r6g.large",
            "r6g.medium",
            "r6g.metal",
            "r6g.xlarge",
            "r6gd.12xlarge",
            "r6gd.16xlarge",
            "r6gd.2xlarge",
            "r6gd.4xlarge",
            "r6gd.8xlarge",
            "r6gd.large",
            "r6gd.medium",
            "r6gd.metal",
            "r6gd.xlarge",
            "r6i.12xlarge",
            "r6i.16xlarge",
            "r6i.24xlarge",
            "r6i.2xlarge",
            "r6i.32xlarge",
            "r6i.4xlarge",
            "r6i.8xlarge",
            "r6i.large",
            "r6i.metal",
            "r6i.xlarge",
            "r6id.12xlarge",
            "r6id.16xlarge",
            "r6id.24xlarge",
            "r6id.2xlarge",
            "r6id.32xlarge",
            "r6id.4xlarge",
            "r6id.8xlarge",
            "r6id.large",
            "r6id.metal",
            "r6id.xlarge",
            "r6idn.12xlarge",
            "r6idn.16xlarge",
            "r6idn.24xlarge",
            "r6idn.2xlarge",
            "r6idn.32xlarge",
            "r6idn.4xlarge",
            "r6idn.8xlarge",
            "r6idn.large",
            "r6idn.xlarge",
            "r6in.12xlarge",
            "r6in.16xlarge",
            "r6in.24xlarge",
            "r6in.2xlarge",
            "r6in.32xlarge",
            "r6in.4xlarge",
            "r6in.8xlarge",
            "r6in.large",
            "r6in.xlarge",
            "t1.micro",
            "t2.2xlarge",
            "t2.large",
            "t2.medium",
            "t2.micro",
            "t2.nano",
            "t2.small",
            "t2.xlarge",
            "t3.2xlarge",
            "t3.large",
            "t3.medium",
            "t3.micro",
            "t3.nano",
            "t3.small",
            "t3.xlarge",
            "t3a.2xlarge",
            "t3a.large",
            "t3a.medium",
            "t3a.micro",
            "t3a.nano",
            "t3a.small",
            "t3a.xlarge",
            "t4g.2xlarge",
            "t4g.large",
            "t4g.medium",
            "t4g.micro",
            "t4g.nano",
            "t4g.small",
            "t4g.xlarge",
            "trn1.2xlarge",
            "trn1.32xlarge",
            "u-12tb1.112xlarge",
            "u-12tb1.metal",
            "u-18tb1.112xlarge",
            "u-18tb1.metal",
            "u-24tb1.112xlarge",
            "u-24tb1.metal",
            "u-3tb1.56xlarge",
            "u-6tb1.112xlarge",
            "u-6tb1.56xlarge",
            "u-6tb1.metal",
            "u-9tb1.112xlarge",
            "u-9tb1.metal",
            "vt1.24xlarge",
            "vt1.3xlarge",
            "vt1.6xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.16xlarge",
            "x1e.2xlarge",
            "x1e.32xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.xlarge",
            "x2gd.12xlarge",
            "x2gd.16xlarge",
            "x2gd.2xlarge",
            "x2gd.4xlarge",
            "x2gd.8xlarge",
            "x2gd.large",
            "x2gd.medium",
            "x2gd.metal",
            "x2gd.xlarge",
            "x2idn.16xlarge",
            "x2idn.24xlarge",
            "x2idn.32xlarge",
            "x2idn.metal",
            "x2iedn.16xlarge",
            "x2iedn.24xlarge",
            "x2iedn.2xlarge",
            "x2iedn.32xlarge",
            "x2iedn.4xlarge",
            "x2iedn.8xlarge",
            "x2iedn.metal",
            "x2iedn.xlarge",
            "x2iezn.12xlarge",
            "x2iezn.2xlarge",
            "x2iezn.4xlarge",
            "x2iezn.6xlarge",
            "x2iezn.8xlarge",
            "x2iezn.metal",
            "z1d.12xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.large",
            "z1d.metal",
            "z1d.xlarge",
        ]
    ] = Field(default=None, alias="InstanceType")
    current_generation: Optional[bool] = Field(default=None, alias="CurrentGeneration")
    free_tier_eligible: Optional[bool] = Field(default=None, alias="FreeTierEligible")
    supported_usage_classes: Optional[List[Literal["on-demand", "spot"]]] = Field(
        default=None, alias="SupportedUsageClasses"
    )
    supported_root_device_types: Optional[
        List[Literal["ebs", "instance-store"]]
    ] = Field(default=None, alias="SupportedRootDeviceTypes")
    supported_virtualization_types: Optional[
        List[Literal["hvm", "paravirtual"]]
    ] = Field(default=None, alias="SupportedVirtualizationTypes")
    bare_metal: Optional[bool] = Field(default=None, alias="BareMetal")
    hypervisor: Optional[Literal["nitro", "xen"]] = Field(
        default=None, alias="Hypervisor"
    )
    processor_info: Optional[ProcessorInfoModel] = Field(
        default=None, alias="ProcessorInfo"
    )
    vcpu_info: Optional[VCpuInfoModel] = Field(default=None, alias="VCpuInfo")
    memory_info: Optional[MemoryInfoModel] = Field(default=None, alias="MemoryInfo")
    instance_storage_supported: Optional[bool] = Field(
        default=None, alias="InstanceStorageSupported"
    )
    instance_storage_info: Optional[InstanceStorageInfoModel] = Field(
        default=None, alias="InstanceStorageInfo"
    )
    ebs_info: Optional[EbsInfoModel] = Field(default=None, alias="EbsInfo")
    network_info: Optional[NetworkInfoModel] = Field(default=None, alias="NetworkInfo")
    gpu_info: Optional[GpuInfoModel] = Field(default=None, alias="GpuInfo")
    fpga_info: Optional[FpgaInfoModel] = Field(default=None, alias="FpgaInfo")
    placement_group_info: Optional[PlacementGroupInfoModel] = Field(
        default=None, alias="PlacementGroupInfo"
    )
    inference_accelerator_info: Optional[InferenceAcceleratorInfoModel] = Field(
        default=None, alias="InferenceAcceleratorInfo"
    )
    hibernation_supported: Optional[bool] = Field(
        default=None, alias="HibernationSupported"
    )
    burstable_performance_supported: Optional[bool] = Field(
        default=None, alias="BurstablePerformanceSupported"
    )
    dedicated_hosts_supported: Optional[bool] = Field(
        default=None, alias="DedicatedHostsSupported"
    )
    auto_recovery_supported: Optional[bool] = Field(
        default=None, alias="AutoRecoverySupported"
    )
    supported_boot_modes: Optional[List[Literal["legacy-bios", "uefi"]]] = Field(
        default=None, alias="SupportedBootModes"
    )


class InstanceModel(BaseModel):
    ami_launch_index: Optional[int] = Field(default=None, alias="AmiLaunchIndex")
    image_id: Optional[str] = Field(default=None, alias="ImageId")
    instance_id: Optional[str] = Field(default=None, alias="InstanceId")
    instance_type: Optional[
        Literal[
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.large",
            "a1.medium",
            "a1.metal",
            "a1.xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c3.large",
            "c3.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.large",
            "c5.metal",
            "c5.xlarge",
            "c5a.12xlarge",
            "c5a.16xlarge",
            "c5a.24xlarge",
            "c5a.2xlarge",
            "c5a.4xlarge",
            "c5a.8xlarge",
            "c5a.large",
            "c5a.xlarge",
            "c5ad.12xlarge",
            "c5ad.16xlarge",
            "c5ad.24xlarge",
            "c5ad.2xlarge",
            "c5ad.4xlarge",
            "c5ad.8xlarge",
            "c5ad.large",
            "c5ad.xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.large",
            "c5d.metal",
            "c5d.xlarge",
            "c5n.18xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.large",
            "c5n.metal",
            "c5n.xlarge",
            "c6a.12xlarge",
            "c6a.16xlarge",
            "c6a.24xlarge",
            "c6a.2xlarge",
            "c6a.32xlarge",
            "c6a.48xlarge",
            "c6a.4xlarge",
            "c6a.8xlarge",
            "c6a.large",
            "c6a.metal",
            "c6a.xlarge",
            "c6g.12xlarge",
            "c6g.16xlarge",
            "c6g.2xlarge",
            "c6g.4xlarge",
            "c6g.8xlarge",
            "c6g.large",
            "c6g.medium",
            "c6g.metal",
            "c6g.xlarge",
            "c6gd.12xlarge",
            "c6gd.16xlarge",
            "c6gd.2xlarge",
            "c6gd.4xlarge",
            "c6gd.8xlarge",
            "c6gd.large",
            "c6gd.medium",
            "c6gd.metal",
            "c6gd.xlarge",
            "c6gn.12xlarge",
            "c6gn.16xlarge",
            "c6gn.2xlarge",
            "c6gn.4xlarge",
            "c6gn.8xlarge",
            "c6gn.large",
            "c6gn.medium",
            "c6gn.xlarge",
            "c6i.12xlarge",
            "c6i.16xlarge",
            "c6i.24xlarge",
            "c6i.2xlarge",
            "c6i.32xlarge",
            "c6i.4xlarge",
            "c6i.8xlarge",
            "c6i.large",
            "c6i.metal",
            "c6i.xlarge",
            "c6id.12xlarge",
            "c6id.16xlarge",
            "c6id.24xlarge",
            "c6id.2xlarge",
            "c6id.32xlarge",
            "c6id.4xlarge",
            "c6id.8xlarge",
            "c6id.large",
            "c6id.metal",
            "c6id.xlarge",
            "c6in.12xlarge",
            "c6in.16xlarge",
            "c6in.24xlarge",
            "c6in.2xlarge",
            "c6in.32xlarge",
            "c6in.4xlarge",
            "c6in.8xlarge",
            "c6in.large",
            "c6in.xlarge",
            "c7g.12xlarge",
            "c7g.16xlarge",
            "c7g.2xlarge",
            "c7g.4xlarge",
            "c7g.8xlarge",
            "c7g.large",
            "c7g.medium",
            "c7g.xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "cg1.4xlarge",
            "cr1.8xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "d2.xlarge",
            "d3.2xlarge",
            "d3.4xlarge",
            "d3.8xlarge",
            "d3.xlarge",
            "d3en.12xlarge",
            "d3en.2xlarge",
            "d3en.4xlarge",
            "d3en.6xlarge",
            "d3en.8xlarge",
            "d3en.xlarge",
            "dl1.24xlarge",
            "f1.16xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.16xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3s.xlarge",
            "g4ad.16xlarge",
            "g4ad.2xlarge",
            "g4ad.4xlarge",
            "g4ad.8xlarge",
            "g4ad.xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.metal",
            "g4dn.xlarge",
            "g5.12xlarge",
            "g5.16xlarge",
            "g5.24xlarge",
            "g5.2xlarge",
            "g5.48xlarge",
            "g5.4xlarge",
            "g5.8xlarge",
            "g5.xlarge",
            "g5g.16xlarge",
            "g5g.2xlarge",
            "g5g.4xlarge",
            "g5g.8xlarge",
            "g5g.metal",
            "g5g.xlarge",
            "h1.16xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "hi1.4xlarge",
            "hpc6a.48xlarge",
            "hpc6id.32xlarge",
            "hs1.8xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i2.xlarge",
            "i3.16xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.large",
            "i3.metal",
            "i3.xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.large",
            "i3en.metal",
            "i3en.xlarge",
            "i4i.16xlarge",
            "i4i.2xlarge",
            "i4i.32xlarge",
            "i4i.4xlarge",
            "i4i.8xlarge",
            "i4i.large",
            "i4i.metal",
            "i4i.xlarge",
            "im4gn.16xlarge",
            "im4gn.2xlarge",
            "im4gn.4xlarge",
            "im4gn.8xlarge",
            "im4gn.large",
            "im4gn.xlarge",
            "inf1.24xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.xlarge",
            "is4gen.2xlarge",
            "is4gen.4xlarge",
            "is4gen.8xlarge",
            "is4gen.large",
            "is4gen.medium",
            "is4gen.xlarge",
            "m1.large",
            "m1.medium",
            "m1.small",
            "m1.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "m2.xlarge",
            "m3.2xlarge",
            "m3.large",
            "m3.medium",
            "m3.xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.large",
            "m4.xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.large",
            "m5.metal",
            "m5.xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.large",
            "m5a.xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.large",
            "m5ad.xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.large",
            "m5d.metal",
            "m5d.xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.large",
            "m5dn.metal",
            "m5dn.xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.large",
            "m5n.metal",
            "m5n.xlarge",
            "m5zn.12xlarge",
            "m5zn.2xlarge",
            "m5zn.3xlarge",
            "m5zn.6xlarge",
            "m5zn.large",
            "m5zn.metal",
            "m5zn.xlarge",
            "m6a.12xlarge",
            "m6a.16xlarge",
            "m6a.24xlarge",
            "m6a.2xlarge",
            "m6a.32xlarge",
            "m6a.48xlarge",
            "m6a.4xlarge",
            "m6a.8xlarge",
            "m6a.large",
            "m6a.metal",
            "m6a.xlarge",
            "m6g.12xlarge",
            "m6g.16xlarge",
            "m6g.2xlarge",
            "m6g.4xlarge",
            "m6g.8xlarge",
            "m6g.large",
            "m6g.medium",
            "m6g.metal",
            "m6g.xlarge",
            "m6gd.12xlarge",
            "m6gd.16xlarge",
            "m6gd.2xlarge",
            "m6gd.4xlarge",
            "m6gd.8xlarge",
            "m6gd.large",
            "m6gd.medium",
            "m6gd.metal",
            "m6gd.xlarge",
            "m6i.12xlarge",
            "m6i.16xlarge",
            "m6i.24xlarge",
            "m6i.2xlarge",
            "m6i.32xlarge",
            "m6i.4xlarge",
            "m6i.8xlarge",
            "m6i.large",
            "m6i.metal",
            "m6i.xlarge",
            "m6id.12xlarge",
            "m6id.16xlarge",
            "m6id.24xlarge",
            "m6id.2xlarge",
            "m6id.32xlarge",
            "m6id.4xlarge",
            "m6id.8xlarge",
            "m6id.large",
            "m6id.metal",
            "m6id.xlarge",
            "m6idn.12xlarge",
            "m6idn.16xlarge",
            "m6idn.24xlarge",
            "m6idn.2xlarge",
            "m6idn.32xlarge",
            "m6idn.4xlarge",
            "m6idn.8xlarge",
            "m6idn.large",
            "m6idn.xlarge",
            "m6in.12xlarge",
            "m6in.16xlarge",
            "m6in.24xlarge",
            "m6in.2xlarge",
            "m6in.32xlarge",
            "m6in.4xlarge",
            "m6in.8xlarge",
            "m6in.large",
            "m6in.xlarge",
            "mac1.metal",
            "mac2.metal",
            "p2.16xlarge",
            "p2.8xlarge",
            "p2.xlarge",
            "p3.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3dn.24xlarge",
            "p4d.24xlarge",
            "p4de.24xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r4.16xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.large",
            "r5.metal",
            "r5.xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.large",
            "r5a.xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.large",
            "r5ad.xlarge",
            "r5b.12xlarge",
            "r5b.16xlarge",
            "r5b.24xlarge",
            "r5b.2xlarge",
            "r5b.4xlarge",
            "r5b.8xlarge",
            "r5b.large",
            "r5b.metal",
            "r5b.xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.large",
            "r5d.metal",
            "r5d.xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.large",
            "r5dn.metal",
            "r5dn.xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.large",
            "r5n.metal",
            "r5n.xlarge",
            "r6a.12xlarge",
            "r6a.16xlarge",
            "r6a.24xlarge",
            "r6a.2xlarge",
            "r6a.32xlarge",
            "r6a.48xlarge",
            "r6a.4xlarge",
            "r6a.8xlarge",
            "r6a.large",
            "r6a.metal",
            "r6a.xlarge",
            "r6g.12xlarge",
            "r6g.16xlarge",
            "r6g.2xlarge",
            "r6g.4xlarge",
            "r6g.8xlarge",
            "r6g.large",
            "r6g.medium",
            "r6g.metal",
            "r6g.xlarge",
            "r6gd.12xlarge",
            "r6gd.16xlarge",
            "r6gd.2xlarge",
            "r6gd.4xlarge",
            "r6gd.8xlarge",
            "r6gd.large",
            "r6gd.medium",
            "r6gd.metal",
            "r6gd.xlarge",
            "r6i.12xlarge",
            "r6i.16xlarge",
            "r6i.24xlarge",
            "r6i.2xlarge",
            "r6i.32xlarge",
            "r6i.4xlarge",
            "r6i.8xlarge",
            "r6i.large",
            "r6i.metal",
            "r6i.xlarge",
            "r6id.12xlarge",
            "r6id.16xlarge",
            "r6id.24xlarge",
            "r6id.2xlarge",
            "r6id.32xlarge",
            "r6id.4xlarge",
            "r6id.8xlarge",
            "r6id.large",
            "r6id.metal",
            "r6id.xlarge",
            "r6idn.12xlarge",
            "r6idn.16xlarge",
            "r6idn.24xlarge",
            "r6idn.2xlarge",
            "r6idn.32xlarge",
            "r6idn.4xlarge",
            "r6idn.8xlarge",
            "r6idn.large",
            "r6idn.xlarge",
            "r6in.12xlarge",
            "r6in.16xlarge",
            "r6in.24xlarge",
            "r6in.2xlarge",
            "r6in.32xlarge",
            "r6in.4xlarge",
            "r6in.8xlarge",
            "r6in.large",
            "r6in.xlarge",
            "t1.micro",
            "t2.2xlarge",
            "t2.large",
            "t2.medium",
            "t2.micro",
            "t2.nano",
            "t2.small",
            "t2.xlarge",
            "t3.2xlarge",
            "t3.large",
            "t3.medium",
            "t3.micro",
            "t3.nano",
            "t3.small",
            "t3.xlarge",
            "t3a.2xlarge",
            "t3a.large",
            "t3a.medium",
            "t3a.micro",
            "t3a.nano",
            "t3a.small",
            "t3a.xlarge",
            "t4g.2xlarge",
            "t4g.large",
            "t4g.medium",
            "t4g.micro",
            "t4g.nano",
            "t4g.small",
            "t4g.xlarge",
            "trn1.2xlarge",
            "trn1.32xlarge",
            "u-12tb1.112xlarge",
            "u-12tb1.metal",
            "u-18tb1.112xlarge",
            "u-18tb1.metal",
            "u-24tb1.112xlarge",
            "u-24tb1.metal",
            "u-3tb1.56xlarge",
            "u-6tb1.112xlarge",
            "u-6tb1.56xlarge",
            "u-6tb1.metal",
            "u-9tb1.112xlarge",
            "u-9tb1.metal",
            "vt1.24xlarge",
            "vt1.3xlarge",
            "vt1.6xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.16xlarge",
            "x1e.2xlarge",
            "x1e.32xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.xlarge",
            "x2gd.12xlarge",
            "x2gd.16xlarge",
            "x2gd.2xlarge",
            "x2gd.4xlarge",
            "x2gd.8xlarge",
            "x2gd.large",
            "x2gd.medium",
            "x2gd.metal",
            "x2gd.xlarge",
            "x2idn.16xlarge",
            "x2idn.24xlarge",
            "x2idn.32xlarge",
            "x2idn.metal",
            "x2iedn.16xlarge",
            "x2iedn.24xlarge",
            "x2iedn.2xlarge",
            "x2iedn.32xlarge",
            "x2iedn.4xlarge",
            "x2iedn.8xlarge",
            "x2iedn.metal",
            "x2iedn.xlarge",
            "x2iezn.12xlarge",
            "x2iezn.2xlarge",
            "x2iezn.4xlarge",
            "x2iezn.6xlarge",
            "x2iezn.8xlarge",
            "x2iezn.metal",
            "z1d.12xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.large",
            "z1d.metal",
            "z1d.xlarge",
        ]
    ] = Field(default=None, alias="InstanceType")
    kernel_id: Optional[str] = Field(default=None, alias="KernelId")
    key_name: Optional[str] = Field(default=None, alias="KeyName")
    launch_time: Optional[datetime] = Field(default=None, alias="LaunchTime")
    monitoring: Optional[MonitoringModel] = Field(default=None, alias="Monitoring")
    placement: Optional[PlacementModel] = Field(default=None, alias="Placement")
    platform: Optional[Literal["Windows"]] = Field(default=None, alias="Platform")
    private_dns_name: Optional[str] = Field(default=None, alias="PrivateDnsName")
    private_ip_address: Optional[str] = Field(default=None, alias="PrivateIpAddress")
    product_codes: Optional[List[ProductCodeModel]] = Field(
        default=None, alias="ProductCodes"
    )
    public_dns_name: Optional[str] = Field(default=None, alias="PublicDnsName")
    public_ip_address: Optional[str] = Field(default=None, alias="PublicIpAddress")
    ramdisk_id: Optional[str] = Field(default=None, alias="RamdiskId")
    state: Optional[InstanceStateModel] = Field(default=None, alias="State")
    state_transition_reason: Optional[str] = Field(
        default=None, alias="StateTransitionReason"
    )
    subnet_id: Optional[str] = Field(default=None, alias="SubnetId")
    vpc_id: Optional[str] = Field(default=None, alias="VpcId")
    architecture: Optional[
        Literal["arm64", "arm64_mac", "i386", "x86_64", "x86_64_mac"]
    ] = Field(default=None, alias="Architecture")
    block_device_mappings: Optional[List[InstanceBlockDeviceMappingModel]] = Field(
        default=None, alias="BlockDeviceMappings"
    )
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    ebs_optimized: Optional[bool] = Field(default=None, alias="EbsOptimized")
    ena_support: Optional[bool] = Field(default=None, alias="EnaSupport")
    hypervisor: Optional[Literal["ovm", "xen"]] = Field(
        default=None, alias="Hypervisor"
    )
    iam_instance_profile: Optional[IamInstanceProfileModel] = Field(
        default=None, alias="IamInstanceProfile"
    )
    instance_lifecycle: Optional[Literal["scheduled", "spot"]] = Field(
        default=None, alias="InstanceLifecycle"
    )
    elastic_gpu_associations: Optional[List[ElasticGpuAssociationModel]] = Field(
        default=None, alias="ElasticGpuAssociations"
    )
    elastic_inference_accelerator_associations: Optional[
        List[ElasticInferenceAcceleratorAssociationModel]
    ] = Field(default=None, alias="ElasticInferenceAcceleratorAssociations")
    network_interfaces: Optional[List[InstanceNetworkInterfaceModel]] = Field(
        default=None, alias="NetworkInterfaces"
    )
    outpost_arn: Optional[str] = Field(default=None, alias="OutpostArn")
    root_device_name: Optional[str] = Field(default=None, alias="RootDeviceName")
    root_device_type: Optional[Literal["ebs", "instance-store"]] = Field(
        default=None, alias="RootDeviceType"
    )
    security_groups: Optional[List[GroupIdentifierModel]] = Field(
        default=None, alias="SecurityGroups"
    )
    source_dest_check: Optional[bool] = Field(default=None, alias="SourceDestCheck")
    spot_instance_request_id: Optional[str] = Field(
        default=None, alias="SpotInstanceRequestId"
    )
    sriov_net_support: Optional[str] = Field(default=None, alias="SriovNetSupport")
    state_reason: Optional[StateReasonModel] = Field(default=None, alias="StateReason")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    virtualization_type: Optional[Literal["hvm", "paravirtual"]] = Field(
        default=None, alias="VirtualizationType"
    )
    cpu_options: Optional[CpuOptionsModel] = Field(default=None, alias="CpuOptions")
    capacity_reservation_id: Optional[str] = Field(
        default=None, alias="CapacityReservationId"
    )
    capacity_reservation_specification: Optional[
        CapacityReservationSpecificationResponseModel
    ] = Field(default=None, alias="CapacityReservationSpecification")
    hibernation_options: Optional[HibernationOptionsModel] = Field(
        default=None, alias="HibernationOptions"
    )
    licenses: Optional[List[LicenseConfigurationModel]] = Field(
        default=None, alias="Licenses"
    )
    metadata_options: Optional[InstanceMetadataOptionsResponseModel] = Field(
        default=None, alias="MetadataOptions"
    )
    enclave_options: Optional[EnclaveOptionsModel] = Field(
        default=None, alias="EnclaveOptions"
    )
    boot_mode: Optional[Literal["legacy-bios", "uefi"]] = Field(
        default=None, alias="BootMode"
    )
    platform_details: Optional[str] = Field(default=None, alias="PlatformDetails")
    usage_operation: Optional[str] = Field(default=None, alias="UsageOperation")
    usage_operation_update_time: Optional[datetime] = Field(
        default=None, alias="UsageOperationUpdateTime"
    )
    private_dns_name_options: Optional[PrivateDnsNameOptionsResponseModel] = Field(
        default=None, alias="PrivateDnsNameOptions"
    )
    ipv6_address: Optional[str] = Field(default=None, alias="Ipv6Address")
    tpm_support: Optional[str] = Field(default=None, alias="TpmSupport")
    maintenance_options: Optional[InstanceMaintenanceOptionsModel] = Field(
        default=None, alias="MaintenanceOptions"
    )


class FleetLaunchTemplateConfigRequestModel(BaseModel):
    launch_template_specification: Optional[
        FleetLaunchTemplateSpecificationRequestModel
    ] = Field(default=None, alias="LaunchTemplateSpecification")
    overrides: Optional[Sequence[FleetLaunchTemplateOverridesRequestModel]] = Field(
        default=None, alias="Overrides"
    )


class GetSpotPlacementScoresRequestGetSpotPlacementScoresPaginateModel(BaseModel):
    target_capacity: int = Field(alias="TargetCapacity")
    instance_types: Optional[Sequence[str]] = Field(default=None, alias="InstanceTypes")
    target_capacity_unit_type: Optional[Literal["memory-mib", "units", "vcpu"]] = Field(
        default=None, alias="TargetCapacityUnitType"
    )
    single_availability_zone: Optional[bool] = Field(
        default=None, alias="SingleAvailabilityZone"
    )
    region_names: Optional[Sequence[str]] = Field(default=None, alias="RegionNames")
    instance_requirements_with_metadata: Optional[
        InstanceRequirementsWithMetadataRequestModel
    ] = Field(default=None, alias="InstanceRequirementsWithMetadata")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    pagination_config: Optional[PaginatorConfigModel] = Field(
        default=None, alias="PaginationConfig"
    )


class GetSpotPlacementScoresRequestModel(BaseModel):
    target_capacity: int = Field(alias="TargetCapacity")
    instance_types: Optional[Sequence[str]] = Field(default=None, alias="InstanceTypes")
    target_capacity_unit_type: Optional[Literal["memory-mib", "units", "vcpu"]] = Field(
        default=None, alias="TargetCapacityUnitType"
    )
    single_availability_zone: Optional[bool] = Field(
        default=None, alias="SingleAvailabilityZone"
    )
    region_names: Optional[Sequence[str]] = Field(default=None, alias="RegionNames")
    instance_requirements_with_metadata: Optional[
        InstanceRequirementsWithMetadataRequestModel
    ] = Field(default=None, alias="InstanceRequirementsWithMetadata")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    max_results: Optional[int] = Field(default=None, alias="MaxResults")
    next_token: Optional[str] = Field(default=None, alias="NextToken")


class FleetLaunchTemplateConfigModel(BaseModel):
    launch_template_specification: Optional[
        FleetLaunchTemplateSpecificationModel
    ] = Field(default=None, alias="LaunchTemplateSpecification")
    overrides: Optional[List[FleetLaunchTemplateOverridesModel]] = Field(
        default=None, alias="Overrides"
    )


class LaunchTemplateAndOverridesResponseModel(BaseModel):
    launch_template_specification: Optional[
        FleetLaunchTemplateSpecificationModel
    ] = Field(default=None, alias="LaunchTemplateSpecification")
    overrides: Optional[FleetLaunchTemplateOverridesModel] = Field(
        default=None, alias="Overrides"
    )


class LaunchTemplateConfigModel(BaseModel):
    launch_template_specification: Optional[
        FleetLaunchTemplateSpecificationModel
    ] = Field(default=None, alias="LaunchTemplateSpecification")
    overrides: Optional[List[LaunchTemplateOverridesModel]] = Field(
        default=None, alias="Overrides"
    )


class DescribeInstanceStatusResultModel(BaseModel):
    instance_statuses: List[InstanceStatusModel] = Field(alias="InstanceStatuses")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeSecurityGroupsResultModel(BaseModel):
    security_groups: List[SecurityGroupModel] = Field(alias="SecurityGroups")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeStaleSecurityGroupsResultModel(BaseModel):
    next_token: str = Field(alias="NextToken")
    stale_security_group_set: List[StaleSecurityGroupModel] = Field(
        alias="StaleSecurityGroupSet"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateLaunchTemplateRequestModel(BaseModel):
    launch_template_name: str = Field(alias="LaunchTemplateName")
    launch_template_data: RequestLaunchTemplateDataModel = Field(
        alias="LaunchTemplateData"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    version_description: Optional[str] = Field(default=None, alias="VersionDescription")
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class CreateLaunchTemplateVersionRequestModel(BaseModel):
    launch_template_data: RequestLaunchTemplateDataModel = Field(
        alias="LaunchTemplateData"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    launch_template_id: Optional[str] = Field(default=None, alias="LaunchTemplateId")
    launch_template_name: Optional[str] = Field(
        default=None, alias="LaunchTemplateName"
    )
    source_version: Optional[str] = Field(default=None, alias="SourceVersion")
    version_description: Optional[str] = Field(default=None, alias="VersionDescription")
    resolve_alias: Optional[bool] = Field(default=None, alias="ResolveAlias")


class GetLaunchTemplateDataResultModel(BaseModel):
    launch_template_data: ResponseLaunchTemplateDataModel = Field(
        alias="LaunchTemplateData"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class LaunchTemplateVersionModel(BaseModel):
    launch_template_id: Optional[str] = Field(default=None, alias="LaunchTemplateId")
    launch_template_name: Optional[str] = Field(
        default=None, alias="LaunchTemplateName"
    )
    version_number: Optional[int] = Field(default=None, alias="VersionNumber")
    version_description: Optional[str] = Field(default=None, alias="VersionDescription")
    create_time: Optional[datetime] = Field(default=None, alias="CreateTime")
    created_by: Optional[str] = Field(default=None, alias="CreatedBy")
    default_version: Optional[bool] = Field(default=None, alias="DefaultVersion")
    launch_template_data: Optional[ResponseLaunchTemplateDataModel] = Field(
        default=None, alias="LaunchTemplateData"
    )


class DescribeReservedInstancesModificationsResultModel(BaseModel):
    next_token: str = Field(alias="NextToken")
    reserved_instances_modifications: List[ReservedInstancesModificationModel] = Field(
        alias="ReservedInstancesModifications"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateNetworkInsightsAccessScopeRequestModel(BaseModel):
    client_token: str = Field(alias="ClientToken")
    match_paths: Optional[Sequence[AccessScopePathRequestModel]] = Field(
        default=None, alias="MatchPaths"
    )
    exclude_paths: Optional[Sequence[AccessScopePathRequestModel]] = Field(
        default=None, alias="ExcludePaths"
    )
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class NetworkInsightsAccessScopeContentModel(BaseModel):
    network_insights_access_scope_id: Optional[str] = Field(
        default=None, alias="NetworkInsightsAccessScopeId"
    )
    match_paths: Optional[List[AccessScopePathModel]] = Field(
        default=None, alias="MatchPaths"
    )
    exclude_paths: Optional[List[AccessScopePathModel]] = Field(
        default=None, alias="ExcludePaths"
    )


class BundleInstanceResultModel(BaseModel):
    bundle_task: BundleTaskModel = Field(alias="BundleTask")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CancelBundleTaskResultModel(BaseModel):
    bundle_task: BundleTaskModel = Field(alias="BundleTask")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeBundleTasksResultModel(BaseModel):
    bundle_tasks: List[BundleTaskModel] = Field(alias="BundleTasks")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class RunScheduledInstancesRequestModel(BaseModel):
    launch_specification: ScheduledInstancesLaunchSpecificationModel = Field(
        alias="LaunchSpecification"
    )
    scheduled_instance_id: str = Field(alias="ScheduledInstanceId")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    instance_count: Optional[int] = Field(default=None, alias="InstanceCount")


class DescribeImportImageTasksResultModel(BaseModel):
    import_image_tasks: List[ImportImageTaskModel] = Field(alias="ImportImageTasks")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeImportSnapshotTasksResultModel(BaseModel):
    import_snapshot_tasks: List[ImportSnapshotTaskModel] = Field(
        alias="ImportSnapshotTasks"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateDefaultSubnetResultModel(BaseModel):
    subnet: SubnetModel = Field(alias="Subnet")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateSubnetResultModel(BaseModel):
    subnet: SubnetModel = Field(alias="Subnet")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeSubnetsResultModel(BaseModel):
    subnets: List[SubnetModel] = Field(alias="Subnets")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateTrafficMirrorFilterResultModel(BaseModel):
    traffic_mirror_filter: TrafficMirrorFilterModel = Field(alias="TrafficMirrorFilter")
    client_token: str = Field(alias="ClientToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeTrafficMirrorFiltersResultModel(BaseModel):
    traffic_mirror_filters: List[TrafficMirrorFilterModel] = Field(
        alias="TrafficMirrorFilters"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyTrafficMirrorFilterNetworkServicesResultModel(BaseModel):
    traffic_mirror_filter: TrafficMirrorFilterModel = Field(alias="TrafficMirrorFilter")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateTransitGatewayConnectPeerResultModel(BaseModel):
    transit_gateway_connect_peer: TransitGatewayConnectPeerModel = Field(
        alias="TransitGatewayConnectPeer"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DeleteTransitGatewayConnectPeerResultModel(BaseModel):
    transit_gateway_connect_peer: TransitGatewayConnectPeerModel = Field(
        alias="TransitGatewayConnectPeer"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeTransitGatewayConnectPeersResultModel(BaseModel):
    transit_gateway_connect_peers: List[TransitGatewayConnectPeerModel] = Field(
        alias="TransitGatewayConnectPeers"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetTransitGatewayPolicyTableEntriesResultModel(BaseModel):
    transit_gateway_policy_table_entries: List[
        TransitGatewayPolicyTableEntryModel
    ] = Field(alias="TransitGatewayPolicyTableEntries")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class VerifiedAccessInstanceLoggingConfigurationModel(BaseModel):
    verified_access_instance_id: Optional[str] = Field(
        default=None, alias="VerifiedAccessInstanceId"
    )
    access_logs: Optional[VerifiedAccessLogsModel] = Field(
        default=None, alias="AccessLogs"
    )


class DescribeVolumeStatusResultModel(BaseModel):
    next_token: str = Field(alias="NextToken")
    volume_statuses: List[VolumeStatusItemModel] = Field(alias="VolumeStatuses")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateDefaultVpcResultModel(BaseModel):
    vpc: VpcModel = Field(alias="Vpc")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateVpcResultModel(BaseModel):
    vpc: VpcModel = Field(alias="Vpc")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeVpcsResultModel(BaseModel):
    vpcs: List[VpcModel] = Field(alias="Vpcs")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AcceptVpcPeeringConnectionResultModel(BaseModel):
    vpc_peering_connection: VpcPeeringConnectionModel = Field(
        alias="VpcPeeringConnection"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateVpcPeeringConnectionResultModel(BaseModel):
    vpc_peering_connection: VpcPeeringConnectionModel = Field(
        alias="VpcPeeringConnection"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeVpcPeeringConnectionsResultModel(BaseModel):
    vpc_peering_connections: List[VpcPeeringConnectionModel] = Field(
        alias="VpcPeeringConnections"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class AccessScopeAnalysisFindingModel(BaseModel):
    network_insights_access_scope_analysis_id: Optional[str] = Field(
        default=None, alias="NetworkInsightsAccessScopeAnalysisId"
    )
    network_insights_access_scope_id: Optional[str] = Field(
        default=None, alias="NetworkInsightsAccessScopeId"
    )
    finding_id: Optional[str] = Field(default=None, alias="FindingId")
    finding_components: Optional[List[PathComponentModel]] = Field(
        default=None, alias="FindingComponents"
    )


class NetworkInsightsAnalysisModel(BaseModel):
    network_insights_analysis_id: Optional[str] = Field(
        default=None, alias="NetworkInsightsAnalysisId"
    )
    network_insights_analysis_arn: Optional[str] = Field(
        default=None, alias="NetworkInsightsAnalysisArn"
    )
    network_insights_path_id: Optional[str] = Field(
        default=None, alias="NetworkInsightsPathId"
    )
    additional_accounts: Optional[List[str]] = Field(
        default=None, alias="AdditionalAccounts"
    )
    filter_in_arns: Optional[List[str]] = Field(default=None, alias="FilterInArns")
    start_date: Optional[datetime] = Field(default=None, alias="StartDate")
    status: Optional[Literal["failed", "running", "succeeded"]] = Field(
        default=None, alias="Status"
    )
    status_message: Optional[str] = Field(default=None, alias="StatusMessage")
    warning_message: Optional[str] = Field(default=None, alias="WarningMessage")
    network_path_found: Optional[bool] = Field(default=None, alias="NetworkPathFound")
    forward_path_components: Optional[List[PathComponentModel]] = Field(
        default=None, alias="ForwardPathComponents"
    )
    return_path_components: Optional[List[PathComponentModel]] = Field(
        default=None, alias="ReturnPathComponents"
    )
    explanations: Optional[List[ExplanationModel]] = Field(
        default=None, alias="Explanations"
    )
    alternate_path_hints: Optional[List[AlternatePathHintModel]] = Field(
        default=None, alias="AlternatePathHints"
    )
    suggested_accounts: Optional[List[str]] = Field(
        default=None, alias="SuggestedAccounts"
    )
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class CreateNetworkInterfaceResultModel(BaseModel):
    network_interface: NetworkInterfaceModel = Field(alias="NetworkInterface")
    client_token: str = Field(alias="ClientToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeNetworkInterfacesResultModel(BaseModel):
    network_interfaces: List[NetworkInterfaceModel] = Field(alias="NetworkInterfaces")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateVpnConnectionRequestModel(BaseModel):
    customer_gateway_id: str = Field(alias="CustomerGatewayId")
    type: str = Field(alias="Type")
    vpn_gateway_id: Optional[str] = Field(default=None, alias="VpnGatewayId")
    transit_gateway_id: Optional[str] = Field(default=None, alias="TransitGatewayId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    options: Optional[VpnConnectionOptionsSpecificationModel] = Field(
        default=None, alias="Options"
    )
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class VpnConnectionModel(BaseModel):
    customer_gateway_configuration: Optional[str] = Field(
        default=None, alias="CustomerGatewayConfiguration"
    )
    customer_gateway_id: Optional[str] = Field(default=None, alias="CustomerGatewayId")
    category: Optional[str] = Field(default=None, alias="Category")
    state: Optional[Literal["available", "deleted", "deleting", "pending"]] = Field(
        default=None, alias="State"
    )
    type: Optional[Literal["ipsec.1"]] = Field(default=None, alias="Type")
    vpn_connection_id: Optional[str] = Field(default=None, alias="VpnConnectionId")
    vpn_gateway_id: Optional[str] = Field(default=None, alias="VpnGatewayId")
    transit_gateway_id: Optional[str] = Field(default=None, alias="TransitGatewayId")
    core_network_arn: Optional[str] = Field(default=None, alias="CoreNetworkArn")
    core_network_attachment_arn: Optional[str] = Field(
        default=None, alias="CoreNetworkAttachmentArn"
    )
    gateway_association_state: Optional[
        Literal["associated", "associating", "disassociating", "not-associated"]
    ] = Field(default=None, alias="GatewayAssociationState")
    options: Optional[VpnConnectionOptionsModel] = Field(default=None, alias="Options")
    routes: Optional[List[VpnStaticRouteModel]] = Field(default=None, alias="Routes")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    vgw_telemetry: Optional[List[VgwTelemetryModel]] = Field(
        default=None, alias="VgwTelemetry"
    )


class DescribeSpotInstanceRequestsResultModel(BaseModel):
    spot_instance_requests: List[SpotInstanceRequestModel] = Field(
        alias="SpotInstanceRequests"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class RequestSpotInstancesResultModel(BaseModel):
    spot_instance_requests: List[SpotInstanceRequestModel] = Field(
        alias="SpotInstanceRequests"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeConversionTasksResultModel(BaseModel):
    conversion_tasks: List[ConversionTaskModel] = Field(alias="ConversionTasks")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ImportInstanceResultModel(BaseModel):
    conversion_task: ConversionTaskModel = Field(alias="ConversionTask")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ImportVolumeResultModel(BaseModel):
    conversion_task: ConversionTaskModel = Field(alias="ConversionTask")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeInstanceTypesResultModel(BaseModel):
    instance_types: List[InstanceTypeInfoModel] = Field(alias="InstanceTypes")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ReservationResponseMetadataModel(BaseModel):
    groups: List[GroupIdentifierModel] = Field(alias="Groups")
    instances: List[InstanceModel] = Field(alias="Instances")
    owner_id: str = Field(alias="OwnerId")
    requester_id: str = Field(alias="RequesterId")
    reservation_id: str = Field(alias="ReservationId")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ReservationModel(BaseModel):
    groups: Optional[List[GroupIdentifierModel]] = Field(default=None, alias="Groups")
    instances: Optional[List[InstanceModel]] = Field(default=None, alias="Instances")
    owner_id: Optional[str] = Field(default=None, alias="OwnerId")
    requester_id: Optional[str] = Field(default=None, alias="RequesterId")
    reservation_id: Optional[str] = Field(default=None, alias="ReservationId")


class CreateFleetRequestModel(BaseModel):
    launch_template_configs: Sequence[FleetLaunchTemplateConfigRequestModel] = Field(
        alias="LaunchTemplateConfigs"
    )
    target_capacity_specification: TargetCapacitySpecificationRequestModel = Field(
        alias="TargetCapacitySpecification"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    spot_options: Optional[SpotOptionsRequestModel] = Field(
        default=None, alias="SpotOptions"
    )
    on_demand_options: Optional[OnDemandOptionsRequestModel] = Field(
        default=None, alias="OnDemandOptions"
    )
    excess_capacity_termination_policy: Optional[
        Literal["no-termination", "termination"]
    ] = Field(default=None, alias="ExcessCapacityTerminationPolicy")
    terminate_instances_with_expiration: Optional[bool] = Field(
        default=None, alias="TerminateInstancesWithExpiration"
    )
    type: Optional[Literal["instant", "maintain", "request"]] = Field(
        default=None, alias="Type"
    )
    valid_from: Optional[Union[datetime, str]] = Field(default=None, alias="ValidFrom")
    valid_until: Optional[Union[datetime, str]] = Field(
        default=None, alias="ValidUntil"
    )
    replace_unhealthy_instances: Optional[bool] = Field(
        default=None, alias="ReplaceUnhealthyInstances"
    )
    tag_specifications: Optional[Sequence[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )
    context: Optional[str] = Field(default=None, alias="Context")


class ModifyFleetRequestModel(BaseModel):
    fleet_id: str = Field(alias="FleetId")
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")
    excess_capacity_termination_policy: Optional[
        Literal["no-termination", "termination"]
    ] = Field(default=None, alias="ExcessCapacityTerminationPolicy")
    launch_template_configs: Optional[
        Sequence[FleetLaunchTemplateConfigRequestModel]
    ] = Field(default=None, alias="LaunchTemplateConfigs")
    target_capacity_specification: Optional[
        TargetCapacitySpecificationRequestModel
    ] = Field(default=None, alias="TargetCapacitySpecification")
    context: Optional[str] = Field(default=None, alias="Context")


class CreateFleetErrorModel(BaseModel):
    launch_template_and_overrides: Optional[
        LaunchTemplateAndOverridesResponseModel
    ] = Field(default=None, alias="LaunchTemplateAndOverrides")
    lifecycle: Optional[Literal["on-demand", "spot"]] = Field(
        default=None, alias="Lifecycle"
    )
    error_code: Optional[str] = Field(default=None, alias="ErrorCode")
    error_message: Optional[str] = Field(default=None, alias="ErrorMessage")


class CreateFleetInstanceModel(BaseModel):
    launch_template_and_overrides: Optional[
        LaunchTemplateAndOverridesResponseModel
    ] = Field(default=None, alias="LaunchTemplateAndOverrides")
    lifecycle: Optional[Literal["on-demand", "spot"]] = Field(
        default=None, alias="Lifecycle"
    )
    instance_ids: Optional[List[str]] = Field(default=None, alias="InstanceIds")
    instance_type: Optional[
        Literal[
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.large",
            "a1.medium",
            "a1.metal",
            "a1.xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c3.large",
            "c3.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.large",
            "c5.metal",
            "c5.xlarge",
            "c5a.12xlarge",
            "c5a.16xlarge",
            "c5a.24xlarge",
            "c5a.2xlarge",
            "c5a.4xlarge",
            "c5a.8xlarge",
            "c5a.large",
            "c5a.xlarge",
            "c5ad.12xlarge",
            "c5ad.16xlarge",
            "c5ad.24xlarge",
            "c5ad.2xlarge",
            "c5ad.4xlarge",
            "c5ad.8xlarge",
            "c5ad.large",
            "c5ad.xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.large",
            "c5d.metal",
            "c5d.xlarge",
            "c5n.18xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.large",
            "c5n.metal",
            "c5n.xlarge",
            "c6a.12xlarge",
            "c6a.16xlarge",
            "c6a.24xlarge",
            "c6a.2xlarge",
            "c6a.32xlarge",
            "c6a.48xlarge",
            "c6a.4xlarge",
            "c6a.8xlarge",
            "c6a.large",
            "c6a.metal",
            "c6a.xlarge",
            "c6g.12xlarge",
            "c6g.16xlarge",
            "c6g.2xlarge",
            "c6g.4xlarge",
            "c6g.8xlarge",
            "c6g.large",
            "c6g.medium",
            "c6g.metal",
            "c6g.xlarge",
            "c6gd.12xlarge",
            "c6gd.16xlarge",
            "c6gd.2xlarge",
            "c6gd.4xlarge",
            "c6gd.8xlarge",
            "c6gd.large",
            "c6gd.medium",
            "c6gd.metal",
            "c6gd.xlarge",
            "c6gn.12xlarge",
            "c6gn.16xlarge",
            "c6gn.2xlarge",
            "c6gn.4xlarge",
            "c6gn.8xlarge",
            "c6gn.large",
            "c6gn.medium",
            "c6gn.xlarge",
            "c6i.12xlarge",
            "c6i.16xlarge",
            "c6i.24xlarge",
            "c6i.2xlarge",
            "c6i.32xlarge",
            "c6i.4xlarge",
            "c6i.8xlarge",
            "c6i.large",
            "c6i.metal",
            "c6i.xlarge",
            "c6id.12xlarge",
            "c6id.16xlarge",
            "c6id.24xlarge",
            "c6id.2xlarge",
            "c6id.32xlarge",
            "c6id.4xlarge",
            "c6id.8xlarge",
            "c6id.large",
            "c6id.metal",
            "c6id.xlarge",
            "c6in.12xlarge",
            "c6in.16xlarge",
            "c6in.24xlarge",
            "c6in.2xlarge",
            "c6in.32xlarge",
            "c6in.4xlarge",
            "c6in.8xlarge",
            "c6in.large",
            "c6in.xlarge",
            "c7g.12xlarge",
            "c7g.16xlarge",
            "c7g.2xlarge",
            "c7g.4xlarge",
            "c7g.8xlarge",
            "c7g.large",
            "c7g.medium",
            "c7g.xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "cg1.4xlarge",
            "cr1.8xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "d2.xlarge",
            "d3.2xlarge",
            "d3.4xlarge",
            "d3.8xlarge",
            "d3.xlarge",
            "d3en.12xlarge",
            "d3en.2xlarge",
            "d3en.4xlarge",
            "d3en.6xlarge",
            "d3en.8xlarge",
            "d3en.xlarge",
            "dl1.24xlarge",
            "f1.16xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.16xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3s.xlarge",
            "g4ad.16xlarge",
            "g4ad.2xlarge",
            "g4ad.4xlarge",
            "g4ad.8xlarge",
            "g4ad.xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.metal",
            "g4dn.xlarge",
            "g5.12xlarge",
            "g5.16xlarge",
            "g5.24xlarge",
            "g5.2xlarge",
            "g5.48xlarge",
            "g5.4xlarge",
            "g5.8xlarge",
            "g5.xlarge",
            "g5g.16xlarge",
            "g5g.2xlarge",
            "g5g.4xlarge",
            "g5g.8xlarge",
            "g5g.metal",
            "g5g.xlarge",
            "h1.16xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "hi1.4xlarge",
            "hpc6a.48xlarge",
            "hpc6id.32xlarge",
            "hs1.8xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i2.xlarge",
            "i3.16xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.large",
            "i3.metal",
            "i3.xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.large",
            "i3en.metal",
            "i3en.xlarge",
            "i4i.16xlarge",
            "i4i.2xlarge",
            "i4i.32xlarge",
            "i4i.4xlarge",
            "i4i.8xlarge",
            "i4i.large",
            "i4i.metal",
            "i4i.xlarge",
            "im4gn.16xlarge",
            "im4gn.2xlarge",
            "im4gn.4xlarge",
            "im4gn.8xlarge",
            "im4gn.large",
            "im4gn.xlarge",
            "inf1.24xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.xlarge",
            "is4gen.2xlarge",
            "is4gen.4xlarge",
            "is4gen.8xlarge",
            "is4gen.large",
            "is4gen.medium",
            "is4gen.xlarge",
            "m1.large",
            "m1.medium",
            "m1.small",
            "m1.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "m2.xlarge",
            "m3.2xlarge",
            "m3.large",
            "m3.medium",
            "m3.xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.large",
            "m4.xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.large",
            "m5.metal",
            "m5.xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.large",
            "m5a.xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.large",
            "m5ad.xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.large",
            "m5d.metal",
            "m5d.xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.large",
            "m5dn.metal",
            "m5dn.xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.large",
            "m5n.metal",
            "m5n.xlarge",
            "m5zn.12xlarge",
            "m5zn.2xlarge",
            "m5zn.3xlarge",
            "m5zn.6xlarge",
            "m5zn.large",
            "m5zn.metal",
            "m5zn.xlarge",
            "m6a.12xlarge",
            "m6a.16xlarge",
            "m6a.24xlarge",
            "m6a.2xlarge",
            "m6a.32xlarge",
            "m6a.48xlarge",
            "m6a.4xlarge",
            "m6a.8xlarge",
            "m6a.large",
            "m6a.metal",
            "m6a.xlarge",
            "m6g.12xlarge",
            "m6g.16xlarge",
            "m6g.2xlarge",
            "m6g.4xlarge",
            "m6g.8xlarge",
            "m6g.large",
            "m6g.medium",
            "m6g.metal",
            "m6g.xlarge",
            "m6gd.12xlarge",
            "m6gd.16xlarge",
            "m6gd.2xlarge",
            "m6gd.4xlarge",
            "m6gd.8xlarge",
            "m6gd.large",
            "m6gd.medium",
            "m6gd.metal",
            "m6gd.xlarge",
            "m6i.12xlarge",
            "m6i.16xlarge",
            "m6i.24xlarge",
            "m6i.2xlarge",
            "m6i.32xlarge",
            "m6i.4xlarge",
            "m6i.8xlarge",
            "m6i.large",
            "m6i.metal",
            "m6i.xlarge",
            "m6id.12xlarge",
            "m6id.16xlarge",
            "m6id.24xlarge",
            "m6id.2xlarge",
            "m6id.32xlarge",
            "m6id.4xlarge",
            "m6id.8xlarge",
            "m6id.large",
            "m6id.metal",
            "m6id.xlarge",
            "m6idn.12xlarge",
            "m6idn.16xlarge",
            "m6idn.24xlarge",
            "m6idn.2xlarge",
            "m6idn.32xlarge",
            "m6idn.4xlarge",
            "m6idn.8xlarge",
            "m6idn.large",
            "m6idn.xlarge",
            "m6in.12xlarge",
            "m6in.16xlarge",
            "m6in.24xlarge",
            "m6in.2xlarge",
            "m6in.32xlarge",
            "m6in.4xlarge",
            "m6in.8xlarge",
            "m6in.large",
            "m6in.xlarge",
            "mac1.metal",
            "mac2.metal",
            "p2.16xlarge",
            "p2.8xlarge",
            "p2.xlarge",
            "p3.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3dn.24xlarge",
            "p4d.24xlarge",
            "p4de.24xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r4.16xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.large",
            "r5.metal",
            "r5.xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.large",
            "r5a.xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.large",
            "r5ad.xlarge",
            "r5b.12xlarge",
            "r5b.16xlarge",
            "r5b.24xlarge",
            "r5b.2xlarge",
            "r5b.4xlarge",
            "r5b.8xlarge",
            "r5b.large",
            "r5b.metal",
            "r5b.xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.large",
            "r5d.metal",
            "r5d.xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.large",
            "r5dn.metal",
            "r5dn.xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.large",
            "r5n.metal",
            "r5n.xlarge",
            "r6a.12xlarge",
            "r6a.16xlarge",
            "r6a.24xlarge",
            "r6a.2xlarge",
            "r6a.32xlarge",
            "r6a.48xlarge",
            "r6a.4xlarge",
            "r6a.8xlarge",
            "r6a.large",
            "r6a.metal",
            "r6a.xlarge",
            "r6g.12xlarge",
            "r6g.16xlarge",
            "r6g.2xlarge",
            "r6g.4xlarge",
            "r6g.8xlarge",
            "r6g.large",
            "r6g.medium",
            "r6g.metal",
            "r6g.xlarge",
            "r6gd.12xlarge",
            "r6gd.16xlarge",
            "r6gd.2xlarge",
            "r6gd.4xlarge",
            "r6gd.8xlarge",
            "r6gd.large",
            "r6gd.medium",
            "r6gd.metal",
            "r6gd.xlarge",
            "r6i.12xlarge",
            "r6i.16xlarge",
            "r6i.24xlarge",
            "r6i.2xlarge",
            "r6i.32xlarge",
            "r6i.4xlarge",
            "r6i.8xlarge",
            "r6i.large",
            "r6i.metal",
            "r6i.xlarge",
            "r6id.12xlarge",
            "r6id.16xlarge",
            "r6id.24xlarge",
            "r6id.2xlarge",
            "r6id.32xlarge",
            "r6id.4xlarge",
            "r6id.8xlarge",
            "r6id.large",
            "r6id.metal",
            "r6id.xlarge",
            "r6idn.12xlarge",
            "r6idn.16xlarge",
            "r6idn.24xlarge",
            "r6idn.2xlarge",
            "r6idn.32xlarge",
            "r6idn.4xlarge",
            "r6idn.8xlarge",
            "r6idn.large",
            "r6idn.xlarge",
            "r6in.12xlarge",
            "r6in.16xlarge",
            "r6in.24xlarge",
            "r6in.2xlarge",
            "r6in.32xlarge",
            "r6in.4xlarge",
            "r6in.8xlarge",
            "r6in.large",
            "r6in.xlarge",
            "t1.micro",
            "t2.2xlarge",
            "t2.large",
            "t2.medium",
            "t2.micro",
            "t2.nano",
            "t2.small",
            "t2.xlarge",
            "t3.2xlarge",
            "t3.large",
            "t3.medium",
            "t3.micro",
            "t3.nano",
            "t3.small",
            "t3.xlarge",
            "t3a.2xlarge",
            "t3a.large",
            "t3a.medium",
            "t3a.micro",
            "t3a.nano",
            "t3a.small",
            "t3a.xlarge",
            "t4g.2xlarge",
            "t4g.large",
            "t4g.medium",
            "t4g.micro",
            "t4g.nano",
            "t4g.small",
            "t4g.xlarge",
            "trn1.2xlarge",
            "trn1.32xlarge",
            "u-12tb1.112xlarge",
            "u-12tb1.metal",
            "u-18tb1.112xlarge",
            "u-18tb1.metal",
            "u-24tb1.112xlarge",
            "u-24tb1.metal",
            "u-3tb1.56xlarge",
            "u-6tb1.112xlarge",
            "u-6tb1.56xlarge",
            "u-6tb1.metal",
            "u-9tb1.112xlarge",
            "u-9tb1.metal",
            "vt1.24xlarge",
            "vt1.3xlarge",
            "vt1.6xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.16xlarge",
            "x1e.2xlarge",
            "x1e.32xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.xlarge",
            "x2gd.12xlarge",
            "x2gd.16xlarge",
            "x2gd.2xlarge",
            "x2gd.4xlarge",
            "x2gd.8xlarge",
            "x2gd.large",
            "x2gd.medium",
            "x2gd.metal",
            "x2gd.xlarge",
            "x2idn.16xlarge",
            "x2idn.24xlarge",
            "x2idn.32xlarge",
            "x2idn.metal",
            "x2iedn.16xlarge",
            "x2iedn.24xlarge",
            "x2iedn.2xlarge",
            "x2iedn.32xlarge",
            "x2iedn.4xlarge",
            "x2iedn.8xlarge",
            "x2iedn.metal",
            "x2iedn.xlarge",
            "x2iezn.12xlarge",
            "x2iezn.2xlarge",
            "x2iezn.4xlarge",
            "x2iezn.6xlarge",
            "x2iezn.8xlarge",
            "x2iezn.metal",
            "z1d.12xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.large",
            "z1d.metal",
            "z1d.xlarge",
        ]
    ] = Field(default=None, alias="InstanceType")
    platform: Optional[Literal["Windows"]] = Field(default=None, alias="Platform")


class DescribeFleetErrorModel(BaseModel):
    launch_template_and_overrides: Optional[
        LaunchTemplateAndOverridesResponseModel
    ] = Field(default=None, alias="LaunchTemplateAndOverrides")
    lifecycle: Optional[Literal["on-demand", "spot"]] = Field(
        default=None, alias="Lifecycle"
    )
    error_code: Optional[str] = Field(default=None, alias="ErrorCode")
    error_message: Optional[str] = Field(default=None, alias="ErrorMessage")


class DescribeFleetsInstancesModel(BaseModel):
    launch_template_and_overrides: Optional[
        LaunchTemplateAndOverridesResponseModel
    ] = Field(default=None, alias="LaunchTemplateAndOverrides")
    lifecycle: Optional[Literal["on-demand", "spot"]] = Field(
        default=None, alias="Lifecycle"
    )
    instance_ids: Optional[List[str]] = Field(default=None, alias="InstanceIds")
    instance_type: Optional[
        Literal[
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.large",
            "a1.medium",
            "a1.metal",
            "a1.xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c3.large",
            "c3.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.large",
            "c5.metal",
            "c5.xlarge",
            "c5a.12xlarge",
            "c5a.16xlarge",
            "c5a.24xlarge",
            "c5a.2xlarge",
            "c5a.4xlarge",
            "c5a.8xlarge",
            "c5a.large",
            "c5a.xlarge",
            "c5ad.12xlarge",
            "c5ad.16xlarge",
            "c5ad.24xlarge",
            "c5ad.2xlarge",
            "c5ad.4xlarge",
            "c5ad.8xlarge",
            "c5ad.large",
            "c5ad.xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.large",
            "c5d.metal",
            "c5d.xlarge",
            "c5n.18xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.large",
            "c5n.metal",
            "c5n.xlarge",
            "c6a.12xlarge",
            "c6a.16xlarge",
            "c6a.24xlarge",
            "c6a.2xlarge",
            "c6a.32xlarge",
            "c6a.48xlarge",
            "c6a.4xlarge",
            "c6a.8xlarge",
            "c6a.large",
            "c6a.metal",
            "c6a.xlarge",
            "c6g.12xlarge",
            "c6g.16xlarge",
            "c6g.2xlarge",
            "c6g.4xlarge",
            "c6g.8xlarge",
            "c6g.large",
            "c6g.medium",
            "c6g.metal",
            "c6g.xlarge",
            "c6gd.12xlarge",
            "c6gd.16xlarge",
            "c6gd.2xlarge",
            "c6gd.4xlarge",
            "c6gd.8xlarge",
            "c6gd.large",
            "c6gd.medium",
            "c6gd.metal",
            "c6gd.xlarge",
            "c6gn.12xlarge",
            "c6gn.16xlarge",
            "c6gn.2xlarge",
            "c6gn.4xlarge",
            "c6gn.8xlarge",
            "c6gn.large",
            "c6gn.medium",
            "c6gn.xlarge",
            "c6i.12xlarge",
            "c6i.16xlarge",
            "c6i.24xlarge",
            "c6i.2xlarge",
            "c6i.32xlarge",
            "c6i.4xlarge",
            "c6i.8xlarge",
            "c6i.large",
            "c6i.metal",
            "c6i.xlarge",
            "c6id.12xlarge",
            "c6id.16xlarge",
            "c6id.24xlarge",
            "c6id.2xlarge",
            "c6id.32xlarge",
            "c6id.4xlarge",
            "c6id.8xlarge",
            "c6id.large",
            "c6id.metal",
            "c6id.xlarge",
            "c6in.12xlarge",
            "c6in.16xlarge",
            "c6in.24xlarge",
            "c6in.2xlarge",
            "c6in.32xlarge",
            "c6in.4xlarge",
            "c6in.8xlarge",
            "c6in.large",
            "c6in.xlarge",
            "c7g.12xlarge",
            "c7g.16xlarge",
            "c7g.2xlarge",
            "c7g.4xlarge",
            "c7g.8xlarge",
            "c7g.large",
            "c7g.medium",
            "c7g.xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "cg1.4xlarge",
            "cr1.8xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "d2.xlarge",
            "d3.2xlarge",
            "d3.4xlarge",
            "d3.8xlarge",
            "d3.xlarge",
            "d3en.12xlarge",
            "d3en.2xlarge",
            "d3en.4xlarge",
            "d3en.6xlarge",
            "d3en.8xlarge",
            "d3en.xlarge",
            "dl1.24xlarge",
            "f1.16xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.16xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3s.xlarge",
            "g4ad.16xlarge",
            "g4ad.2xlarge",
            "g4ad.4xlarge",
            "g4ad.8xlarge",
            "g4ad.xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.metal",
            "g4dn.xlarge",
            "g5.12xlarge",
            "g5.16xlarge",
            "g5.24xlarge",
            "g5.2xlarge",
            "g5.48xlarge",
            "g5.4xlarge",
            "g5.8xlarge",
            "g5.xlarge",
            "g5g.16xlarge",
            "g5g.2xlarge",
            "g5g.4xlarge",
            "g5g.8xlarge",
            "g5g.metal",
            "g5g.xlarge",
            "h1.16xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "hi1.4xlarge",
            "hpc6a.48xlarge",
            "hpc6id.32xlarge",
            "hs1.8xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i2.xlarge",
            "i3.16xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.large",
            "i3.metal",
            "i3.xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.large",
            "i3en.metal",
            "i3en.xlarge",
            "i4i.16xlarge",
            "i4i.2xlarge",
            "i4i.32xlarge",
            "i4i.4xlarge",
            "i4i.8xlarge",
            "i4i.large",
            "i4i.metal",
            "i4i.xlarge",
            "im4gn.16xlarge",
            "im4gn.2xlarge",
            "im4gn.4xlarge",
            "im4gn.8xlarge",
            "im4gn.large",
            "im4gn.xlarge",
            "inf1.24xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.xlarge",
            "is4gen.2xlarge",
            "is4gen.4xlarge",
            "is4gen.8xlarge",
            "is4gen.large",
            "is4gen.medium",
            "is4gen.xlarge",
            "m1.large",
            "m1.medium",
            "m1.small",
            "m1.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "m2.xlarge",
            "m3.2xlarge",
            "m3.large",
            "m3.medium",
            "m3.xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.large",
            "m4.xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.large",
            "m5.metal",
            "m5.xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.large",
            "m5a.xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.large",
            "m5ad.xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.large",
            "m5d.metal",
            "m5d.xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.large",
            "m5dn.metal",
            "m5dn.xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.large",
            "m5n.metal",
            "m5n.xlarge",
            "m5zn.12xlarge",
            "m5zn.2xlarge",
            "m5zn.3xlarge",
            "m5zn.6xlarge",
            "m5zn.large",
            "m5zn.metal",
            "m5zn.xlarge",
            "m6a.12xlarge",
            "m6a.16xlarge",
            "m6a.24xlarge",
            "m6a.2xlarge",
            "m6a.32xlarge",
            "m6a.48xlarge",
            "m6a.4xlarge",
            "m6a.8xlarge",
            "m6a.large",
            "m6a.metal",
            "m6a.xlarge",
            "m6g.12xlarge",
            "m6g.16xlarge",
            "m6g.2xlarge",
            "m6g.4xlarge",
            "m6g.8xlarge",
            "m6g.large",
            "m6g.medium",
            "m6g.metal",
            "m6g.xlarge",
            "m6gd.12xlarge",
            "m6gd.16xlarge",
            "m6gd.2xlarge",
            "m6gd.4xlarge",
            "m6gd.8xlarge",
            "m6gd.large",
            "m6gd.medium",
            "m6gd.metal",
            "m6gd.xlarge",
            "m6i.12xlarge",
            "m6i.16xlarge",
            "m6i.24xlarge",
            "m6i.2xlarge",
            "m6i.32xlarge",
            "m6i.4xlarge",
            "m6i.8xlarge",
            "m6i.large",
            "m6i.metal",
            "m6i.xlarge",
            "m6id.12xlarge",
            "m6id.16xlarge",
            "m6id.24xlarge",
            "m6id.2xlarge",
            "m6id.32xlarge",
            "m6id.4xlarge",
            "m6id.8xlarge",
            "m6id.large",
            "m6id.metal",
            "m6id.xlarge",
            "m6idn.12xlarge",
            "m6idn.16xlarge",
            "m6idn.24xlarge",
            "m6idn.2xlarge",
            "m6idn.32xlarge",
            "m6idn.4xlarge",
            "m6idn.8xlarge",
            "m6idn.large",
            "m6idn.xlarge",
            "m6in.12xlarge",
            "m6in.16xlarge",
            "m6in.24xlarge",
            "m6in.2xlarge",
            "m6in.32xlarge",
            "m6in.4xlarge",
            "m6in.8xlarge",
            "m6in.large",
            "m6in.xlarge",
            "mac1.metal",
            "mac2.metal",
            "p2.16xlarge",
            "p2.8xlarge",
            "p2.xlarge",
            "p3.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3dn.24xlarge",
            "p4d.24xlarge",
            "p4de.24xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r4.16xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.large",
            "r5.metal",
            "r5.xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.large",
            "r5a.xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.large",
            "r5ad.xlarge",
            "r5b.12xlarge",
            "r5b.16xlarge",
            "r5b.24xlarge",
            "r5b.2xlarge",
            "r5b.4xlarge",
            "r5b.8xlarge",
            "r5b.large",
            "r5b.metal",
            "r5b.xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.large",
            "r5d.metal",
            "r5d.xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.large",
            "r5dn.metal",
            "r5dn.xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.large",
            "r5n.metal",
            "r5n.xlarge",
            "r6a.12xlarge",
            "r6a.16xlarge",
            "r6a.24xlarge",
            "r6a.2xlarge",
            "r6a.32xlarge",
            "r6a.48xlarge",
            "r6a.4xlarge",
            "r6a.8xlarge",
            "r6a.large",
            "r6a.metal",
            "r6a.xlarge",
            "r6g.12xlarge",
            "r6g.16xlarge",
            "r6g.2xlarge",
            "r6g.4xlarge",
            "r6g.8xlarge",
            "r6g.large",
            "r6g.medium",
            "r6g.metal",
            "r6g.xlarge",
            "r6gd.12xlarge",
            "r6gd.16xlarge",
            "r6gd.2xlarge",
            "r6gd.4xlarge",
            "r6gd.8xlarge",
            "r6gd.large",
            "r6gd.medium",
            "r6gd.metal",
            "r6gd.xlarge",
            "r6i.12xlarge",
            "r6i.16xlarge",
            "r6i.24xlarge",
            "r6i.2xlarge",
            "r6i.32xlarge",
            "r6i.4xlarge",
            "r6i.8xlarge",
            "r6i.large",
            "r6i.metal",
            "r6i.xlarge",
            "r6id.12xlarge",
            "r6id.16xlarge",
            "r6id.24xlarge",
            "r6id.2xlarge",
            "r6id.32xlarge",
            "r6id.4xlarge",
            "r6id.8xlarge",
            "r6id.large",
            "r6id.metal",
            "r6id.xlarge",
            "r6idn.12xlarge",
            "r6idn.16xlarge",
            "r6idn.24xlarge",
            "r6idn.2xlarge",
            "r6idn.32xlarge",
            "r6idn.4xlarge",
            "r6idn.8xlarge",
            "r6idn.large",
            "r6idn.xlarge",
            "r6in.12xlarge",
            "r6in.16xlarge",
            "r6in.24xlarge",
            "r6in.2xlarge",
            "r6in.32xlarge",
            "r6in.4xlarge",
            "r6in.8xlarge",
            "r6in.large",
            "r6in.xlarge",
            "t1.micro",
            "t2.2xlarge",
            "t2.large",
            "t2.medium",
            "t2.micro",
            "t2.nano",
            "t2.small",
            "t2.xlarge",
            "t3.2xlarge",
            "t3.large",
            "t3.medium",
            "t3.micro",
            "t3.nano",
            "t3.small",
            "t3.xlarge",
            "t3a.2xlarge",
            "t3a.large",
            "t3a.medium",
            "t3a.micro",
            "t3a.nano",
            "t3a.small",
            "t3a.xlarge",
            "t4g.2xlarge",
            "t4g.large",
            "t4g.medium",
            "t4g.micro",
            "t4g.nano",
            "t4g.small",
            "t4g.xlarge",
            "trn1.2xlarge",
            "trn1.32xlarge",
            "u-12tb1.112xlarge",
            "u-12tb1.metal",
            "u-18tb1.112xlarge",
            "u-18tb1.metal",
            "u-24tb1.112xlarge",
            "u-24tb1.metal",
            "u-3tb1.56xlarge",
            "u-6tb1.112xlarge",
            "u-6tb1.56xlarge",
            "u-6tb1.metal",
            "u-9tb1.112xlarge",
            "u-9tb1.metal",
            "vt1.24xlarge",
            "vt1.3xlarge",
            "vt1.6xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.16xlarge",
            "x1e.2xlarge",
            "x1e.32xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.xlarge",
            "x2gd.12xlarge",
            "x2gd.16xlarge",
            "x2gd.2xlarge",
            "x2gd.4xlarge",
            "x2gd.8xlarge",
            "x2gd.large",
            "x2gd.medium",
            "x2gd.metal",
            "x2gd.xlarge",
            "x2idn.16xlarge",
            "x2idn.24xlarge",
            "x2idn.32xlarge",
            "x2idn.metal",
            "x2iedn.16xlarge",
            "x2iedn.24xlarge",
            "x2iedn.2xlarge",
            "x2iedn.32xlarge",
            "x2iedn.4xlarge",
            "x2iedn.8xlarge",
            "x2iedn.metal",
            "x2iedn.xlarge",
            "x2iezn.12xlarge",
            "x2iezn.2xlarge",
            "x2iezn.4xlarge",
            "x2iezn.6xlarge",
            "x2iezn.8xlarge",
            "x2iezn.metal",
            "z1d.12xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.large",
            "z1d.metal",
            "z1d.xlarge",
        ]
    ] = Field(default=None, alias="InstanceType")
    platform: Optional[Literal["Windows"]] = Field(default=None, alias="Platform")


class ModifySpotFleetRequestRequestModel(BaseModel):
    spot_fleet_request_id: str = Field(alias="SpotFleetRequestId")
    excess_capacity_termination_policy: Optional[
        Literal["default", "noTermination"]
    ] = Field(default=None, alias="ExcessCapacityTerminationPolicy")
    launch_template_configs: Optional[Sequence[LaunchTemplateConfigModel]] = Field(
        default=None, alias="LaunchTemplateConfigs"
    )
    target_capacity: Optional[int] = Field(default=None, alias="TargetCapacity")
    on_demand_target_capacity: Optional[int] = Field(
        default=None, alias="OnDemandTargetCapacity"
    )
    context: Optional[str] = Field(default=None, alias="Context")


class SpotFleetRequestConfigDataModel(BaseModel):
    iam_fleet_role: str = Field(alias="IamFleetRole")
    target_capacity: int = Field(alias="TargetCapacity")
    allocation_strategy: Optional[
        Literal[
            "capacityOptimized",
            "capacityOptimizedPrioritized",
            "diversified",
            "lowestPrice",
            "priceCapacityOptimized",
        ]
    ] = Field(default=None, alias="AllocationStrategy")
    on_demand_allocation_strategy: Optional[
        Literal["lowestPrice", "prioritized"]
    ] = Field(default=None, alias="OnDemandAllocationStrategy")
    spot_maintenance_strategies: Optional[SpotMaintenanceStrategiesModel] = Field(
        default=None, alias="SpotMaintenanceStrategies"
    )
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    excess_capacity_termination_policy: Optional[
        Literal["default", "noTermination"]
    ] = Field(default=None, alias="ExcessCapacityTerminationPolicy")
    fulfilled_capacity: Optional[float] = Field(default=None, alias="FulfilledCapacity")
    on_demand_fulfilled_capacity: Optional[float] = Field(
        default=None, alias="OnDemandFulfilledCapacity"
    )
    launch_specifications: Optional[List[SpotFleetLaunchSpecificationModel]] = Field(
        default=None, alias="LaunchSpecifications"
    )
    launch_template_configs: Optional[List[LaunchTemplateConfigModel]] = Field(
        default=None, alias="LaunchTemplateConfigs"
    )
    spot_price: Optional[str] = Field(default=None, alias="SpotPrice")
    on_demand_target_capacity: Optional[int] = Field(
        default=None, alias="OnDemandTargetCapacity"
    )
    on_demand_max_total_price: Optional[str] = Field(
        default=None, alias="OnDemandMaxTotalPrice"
    )
    spot_max_total_price: Optional[str] = Field(default=None, alias="SpotMaxTotalPrice")
    terminate_instances_with_expiration: Optional[bool] = Field(
        default=None, alias="TerminateInstancesWithExpiration"
    )
    type: Optional[Literal["instant", "maintain", "request"]] = Field(
        default=None, alias="Type"
    )
    valid_from: Optional[datetime] = Field(default=None, alias="ValidFrom")
    valid_until: Optional[datetime] = Field(default=None, alias="ValidUntil")
    replace_unhealthy_instances: Optional[bool] = Field(
        default=None, alias="ReplaceUnhealthyInstances"
    )
    instance_interruption_behavior: Optional[
        Literal["hibernate", "stop", "terminate"]
    ] = Field(default=None, alias="InstanceInterruptionBehavior")
    load_balancers_config: Optional[LoadBalancersConfigModel] = Field(
        default=None, alias="LoadBalancersConfig"
    )
    instance_pools_to_use_count: Optional[int] = Field(
        default=None, alias="InstancePoolsToUseCount"
    )
    context: Optional[str] = Field(default=None, alias="Context")
    target_capacity_unit_type: Optional[Literal["memory-mib", "units", "vcpu"]] = Field(
        default=None, alias="TargetCapacityUnitType"
    )
    tag_specifications: Optional[List[TagSpecificationModel]] = Field(
        default=None, alias="TagSpecifications"
    )


class CreateLaunchTemplateVersionResultModel(BaseModel):
    launch_template_version: LaunchTemplateVersionModel = Field(
        alias="LaunchTemplateVersion"
    )
    warning: ValidationWarningModel = Field(alias="Warning")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeLaunchTemplateVersionsResultModel(BaseModel):
    launch_template_versions: List[LaunchTemplateVersionModel] = Field(
        alias="LaunchTemplateVersions"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateNetworkInsightsAccessScopeResultModel(BaseModel):
    network_insights_access_scope: NetworkInsightsAccessScopeModel = Field(
        alias="NetworkInsightsAccessScope"
    )
    network_insights_access_scope_content: NetworkInsightsAccessScopeContentModel = (
        Field(alias="NetworkInsightsAccessScopeContent")
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetNetworkInsightsAccessScopeContentResultModel(BaseModel):
    network_insights_access_scope_content: NetworkInsightsAccessScopeContentModel = (
        Field(alias="NetworkInsightsAccessScopeContent")
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeVerifiedAccessInstanceLoggingConfigurationsResultModel(BaseModel):
    logging_configurations: List[
        VerifiedAccessInstanceLoggingConfigurationModel
    ] = Field(alias="LoggingConfigurations")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyVerifiedAccessInstanceLoggingConfigurationResultModel(BaseModel):
    logging_configuration: VerifiedAccessInstanceLoggingConfigurationModel = Field(
        alias="LoggingConfiguration"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class GetNetworkInsightsAccessScopeAnalysisFindingsResultModel(BaseModel):
    network_insights_access_scope_analysis_id: str = Field(
        alias="NetworkInsightsAccessScopeAnalysisId"
    )
    analysis_status: Literal["failed", "running", "succeeded"] = Field(
        alias="AnalysisStatus"
    )
    analysis_findings: List[AccessScopeAnalysisFindingModel] = Field(
        alias="AnalysisFindings"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeNetworkInsightsAnalysesResultModel(BaseModel):
    network_insights_analyses: List[NetworkInsightsAnalysisModel] = Field(
        alias="NetworkInsightsAnalyses"
    )
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class StartNetworkInsightsAnalysisResultModel(BaseModel):
    network_insights_analysis: NetworkInsightsAnalysisModel = Field(
        alias="NetworkInsightsAnalysis"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateVpnConnectionResultModel(BaseModel):
    vpn_connection: VpnConnectionModel = Field(alias="VpnConnection")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeVpnConnectionsResultModel(BaseModel):
    vpn_connections: List[VpnConnectionModel] = Field(alias="VpnConnections")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyVpnConnectionOptionsResultModel(BaseModel):
    vpn_connection: VpnConnectionModel = Field(alias="VpnConnection")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyVpnConnectionResultModel(BaseModel):
    vpn_connection: VpnConnectionModel = Field(alias="VpnConnection")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyVpnTunnelCertificateResultModel(BaseModel):
    vpn_connection: VpnConnectionModel = Field(alias="VpnConnection")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class ModifyVpnTunnelOptionsResultModel(BaseModel):
    vpn_connection: VpnConnectionModel = Field(alias="VpnConnection")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeInstancesResultModel(BaseModel):
    reservations: List[ReservationModel] = Field(alias="Reservations")
    next_token: str = Field(alias="NextToken")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class CreateFleetResultModel(BaseModel):
    fleet_id: str = Field(alias="FleetId")
    errors: List[CreateFleetErrorModel] = Field(alias="Errors")
    instances: List[CreateFleetInstanceModel] = Field(alias="Instances")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class FleetDataModel(BaseModel):
    activity_status: Optional[
        Literal["error", "fulfilled", "pending_fulfillment", "pending_termination"]
    ] = Field(default=None, alias="ActivityStatus")
    create_time: Optional[datetime] = Field(default=None, alias="CreateTime")
    fleet_id: Optional[str] = Field(default=None, alias="FleetId")
    fleet_state: Optional[
        Literal[
            "active",
            "deleted",
            "deleted_running",
            "deleted_terminating",
            "failed",
            "modifying",
            "submitted",
        ]
    ] = Field(default=None, alias="FleetState")
    client_token: Optional[str] = Field(default=None, alias="ClientToken")
    excess_capacity_termination_policy: Optional[
        Literal["no-termination", "termination"]
    ] = Field(default=None, alias="ExcessCapacityTerminationPolicy")
    fulfilled_capacity: Optional[float] = Field(default=None, alias="FulfilledCapacity")
    fulfilled_on_demand_capacity: Optional[float] = Field(
        default=None, alias="FulfilledOnDemandCapacity"
    )
    launch_template_configs: Optional[List[FleetLaunchTemplateConfigModel]] = Field(
        default=None, alias="LaunchTemplateConfigs"
    )
    target_capacity_specification: Optional[TargetCapacitySpecificationModel] = Field(
        default=None, alias="TargetCapacitySpecification"
    )
    terminate_instances_with_expiration: Optional[bool] = Field(
        default=None, alias="TerminateInstancesWithExpiration"
    )
    type: Optional[Literal["instant", "maintain", "request"]] = Field(
        default=None, alias="Type"
    )
    valid_from: Optional[datetime] = Field(default=None, alias="ValidFrom")
    valid_until: Optional[datetime] = Field(default=None, alias="ValidUntil")
    replace_unhealthy_instances: Optional[bool] = Field(
        default=None, alias="ReplaceUnhealthyInstances"
    )
    spot_options: Optional[SpotOptionsModel] = Field(default=None, alias="SpotOptions")
    on_demand_options: Optional[OnDemandOptionsModel] = Field(
        default=None, alias="OnDemandOptions"
    )
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")
    errors: Optional[List[DescribeFleetErrorModel]] = Field(
        default=None, alias="Errors"
    )
    instances: Optional[List[DescribeFleetsInstancesModel]] = Field(
        default=None, alias="Instances"
    )
    context: Optional[str] = Field(default=None, alias="Context")


class RequestSpotFleetRequestModel(BaseModel):
    spot_fleet_request_config: SpotFleetRequestConfigDataModel = Field(
        alias="SpotFleetRequestConfig"
    )
    dry_run: Optional[bool] = Field(default=None, alias="DryRun")


class SpotFleetRequestConfigModel(BaseModel):
    activity_status: Optional[
        Literal["error", "fulfilled", "pending_fulfillment", "pending_termination"]
    ] = Field(default=None, alias="ActivityStatus")
    create_time: Optional[datetime] = Field(default=None, alias="CreateTime")
    spot_fleet_request_config: Optional[SpotFleetRequestConfigDataModel] = Field(
        default=None, alias="SpotFleetRequestConfig"
    )
    spot_fleet_request_id: Optional[str] = Field(
        default=None, alias="SpotFleetRequestId"
    )
    spot_fleet_request_state: Optional[
        Literal[
            "active",
            "cancelled",
            "cancelled_running",
            "cancelled_terminating",
            "failed",
            "modifying",
            "submitted",
        ]
    ] = Field(default=None, alias="SpotFleetRequestState")
    tags: Optional[List[TagModel]] = Field(default=None, alias="Tags")


class DescribeFleetsResultModel(BaseModel):
    next_token: str = Field(alias="NextToken")
    fleets: List[FleetDataModel] = Field(alias="Fleets")
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")


class DescribeSpotFleetRequestsResponseModel(BaseModel):
    next_token: str = Field(alias="NextToken")
    spot_fleet_request_configs: List[SpotFleetRequestConfigModel] = Field(
        alias="SpotFleetRequestConfigs"
    )
    response_metadata: ResponseMetadataModel = Field(alias="ResponseMetadata")
